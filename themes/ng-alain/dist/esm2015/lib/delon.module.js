/**
 * @fileoverview added by tsickle
 * Generated from: lib/delon.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 进一步对基础模块的导入提炼
 * 有关模块注册指导原则请参考：https://ng-alain.com/docs/module
 */
import { NgModule, Optional, SkipSelf } from '@angular/core';
import { throwIfAlreadyLoaded } from './core/module-import-guard';
import { AlainThemeModule } from '@delon/theme';
import { DelonACLModule } from '@delon/acl';
// #region mock
import { DelonMockModule } from '@delon/mock';
import * as MOCKDATA from '../_mock';
const ɵ0 = {
    "PROFILES": MOCKDATA.PROFILES,
    "RULES": MOCKDATA.RULES,
    "APIS": MOCKDATA.APIS,
    "CHARTS": MOCKDATA.CHARTS,
    "POIS": MOCKDATA.POIS,
    "USERS": MOCKDATA.USERS,
    "GEOS": MOCKDATA.GEOS
};
/** @type {?} */
const MOCK_MODULES = true ? [DelonMockModule.forRoot({
        data: ɵ0
    })] : [];
/** @type {?} */
const REUSETAB_PROVIDES = [
// {
//   provide: RouteReuseStrategy,
//   useClass: ReuseTabStrategy,
//   deps: [ReuseTabService],
// },
];
// #endregion
// #region global config functions
import { PageHeaderConfig } from '@delon/abc';
/**
 * @return {?}
 */
export function fnPageHeaderConfig() {
    return Object.assign({}, new PageHeaderConfig(), { homeI18n: 'home' });
}
import { DelonAuthConfig } from '@delon/auth';
/**
 * @return {?}
 */
export function fnDelonAuthConfig() {
    return Object.assign({}, new DelonAuthConfig(), { login_url: '/passport/login' });
}
// tslint:disable-next-line: no-duplicate-imports
import { STConfig } from '@delon/abc';
/**
 * @return {?}
 */
export function fnSTConfig() {
    return Object.assign({}, new STConfig(), { modal: { size: 'lg' } });
}
/** @type {?} */
const GLOBAL_CONFIG_PROVIDES = [
    // TIPS：@delon/abc 有大量的全局配置信息，例如设置所有 `st` 的页码默认为 `20` 行
    { provide: STConfig, useFactory: fnSTConfig },
    { provide: PageHeaderConfig, useFactory: fnPageHeaderConfig },
    { provide: DelonAuthConfig, useFactory: fnDelonAuthConfig },
];
// #endregion
export class DelonModule {
    /**
     * @param {?} parentModule
     */
    constructor(parentModule) {
        throwIfAlreadyLoaded(parentModule, 'DelonModule');
    }
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: DelonModule,
            providers: [...REUSETAB_PROVIDES, ...GLOBAL_CONFIG_PROVIDES],
        };
    }
}
DelonModule.decorators = [
    { type: NgModule, args: [{
                imports: [AlainThemeModule.forRoot(), DelonACLModule.forRoot(), ...MOCK_MODULES],
            },] }
];
/** @nocollapse */
DelonModule.ctorParameters = () => [
    { type: DelonModule, decorators: [{ type: Optional }, { type: SkipSelf }] }
];
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVsb24ubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZzL25nLWFsYWluLyIsInNvdXJjZXMiOlsibGliL2RlbG9uLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFJQSxPQUFPLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQXVCLE1BQU0sZUFBZSxDQUFDO0FBQ2xGLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRWxFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUNoRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sWUFBWSxDQUFDOztBQUc1QyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzlDLE9BQU8sS0FBSyxRQUFRLE1BQU0sVUFBVSxDQUFDO1dBRzdCO0lBQ0osVUFBVSxFQUFFLFFBQVEsQ0FBQyxRQUFRO0lBQzdCLE9BQU8sRUFBRSxRQUFRLENBQUMsS0FBSztJQUN2QixNQUFNLEVBQUUsUUFBUSxDQUFDLElBQUk7SUFDckIsUUFBUSxFQUFFLFFBQVEsQ0FBQyxNQUFNO0lBQ3pCLE1BQU0sRUFBRSxRQUFRLENBQUMsSUFBSTtJQUNyQixPQUFPLEVBQUUsUUFBUSxDQUFDLEtBQUs7SUFDdkIsTUFBTSxFQUFFLFFBQVEsQ0FBQyxJQUFJO0NBQ3RCOztNQVRHLFlBQVksR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQztRQUNuRCxJQUFJLElBUUg7S0FDRixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTs7TUFpQkYsaUJBQWlCLEdBQUc7QUFDeEIsSUFBSTtBQUNKLGlDQUFpQztBQUNqQyxnQ0FBZ0M7QUFDaEMsNkJBQTZCO0FBQzdCLEtBQUs7Q0FDTjs7O0FBS0QsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sWUFBWSxDQUFDOzs7O0FBQzlDLE1BQU0sVUFBVSxrQkFBa0I7SUFDaEMseUJBQ0ssSUFBSSxnQkFBZ0IsRUFBRSxJQUN6QixRQUFRLEVBQUUsTUFBTSxJQUNoQjtBQUNKLENBQUM7QUFFRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sYUFBYSxDQUFDOzs7O0FBQzlDLE1BQU0sVUFBVSxpQkFBaUI7SUFDL0IseUJBQ0ssSUFBSSxlQUFlLEVBQUUsSUFDeEIsU0FBUyxFQUFFLGlCQUFpQixJQUM1QjtBQUNKLENBQUM7O0FBR0QsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFlBQVksQ0FBQzs7OztBQUN0QyxNQUFNLFVBQVUsVUFBVTtJQUN4Qix5QkFDSyxJQUFJLFFBQVEsRUFBRSxJQUNqQixLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQ3JCO0FBQ0osQ0FBQzs7TUFFSyxzQkFBc0IsR0FBRztJQUM3Qix1REFBdUQ7SUFDdkQsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUU7SUFDN0MsRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsVUFBVSxFQUFFLGtCQUFrQixFQUFFO0lBQzdELEVBQUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxVQUFVLEVBQUUsaUJBQWlCLEVBQUU7Q0FDNUQ7O0FBT0QsTUFBTSxPQUFPLFdBQVc7Ozs7SUFDdEIsWUFBb0MsWUFBeUI7UUFDM0Qsb0JBQW9CLENBQUMsWUFBWSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ3BELENBQUM7Ozs7SUFFRCxNQUFNLENBQUMsT0FBTztRQUNaLE9BQU87WUFDTCxRQUFRLEVBQUUsV0FBVztZQUNyQixTQUFTLEVBQUUsQ0FBQyxHQUFHLGlCQUFpQixFQUFFLEdBQUcsc0JBQXNCLENBQUM7U0FDN0QsQ0FBQztJQUNKLENBQUM7OztZQWJGLFFBQVEsU0FBQztnQkFDUixPQUFPLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsRUFBRSxjQUFjLENBQUMsT0FBTyxFQUFFLEVBQUUsR0FBRyxZQUFZLENBQUM7YUFDakY7Ozs7WUFFbUQsV0FBVyx1QkFBaEQsUUFBUSxZQUFJLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICog6L+b5LiA5q2l5a+55Z+656GA5qih5Z2X55qE5a+85YWl5o+Q54K8XHJcbiAqIOacieWFs+aooeWdl+azqOWGjOaMh+WvvOWOn+WImeivt+WPguiAg++8mmh0dHBzOi8vbmctYWxhaW4uY29tL2RvY3MvbW9kdWxlXHJcbiAqL1xyXG5pbXBvcnQgeyBOZ01vZHVsZSwgT3B0aW9uYWwsIFNraXBTZWxmLCBNb2R1bGVXaXRoUHJvdmlkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IHRocm93SWZBbHJlYWR5TG9hZGVkIH0gZnJvbSAnLi9jb3JlL21vZHVsZS1pbXBvcnQtZ3VhcmQnO1xyXG5cclxuaW1wb3J0IHsgQWxhaW5UaGVtZU1vZHVsZSB9IGZyb20gJ0BkZWxvbi90aGVtZSc7XHJcbmltcG9ydCB7IERlbG9uQUNMTW9kdWxlIH0gZnJvbSAnQGRlbG9uL2FjbCc7XHJcblxyXG4vLyAjcmVnaW9uIG1vY2tcclxuaW1wb3J0IHsgRGVsb25Nb2NrTW9kdWxlIH0gZnJvbSAnQGRlbG9uL21vY2snO1xyXG5pbXBvcnQgKiBhcyBNT0NLREFUQSBmcm9tICcuLi9fbW9jayc7XHJcbmltcG9ydCB7IGVudmlyb25tZW50IH0gZnJvbSAnLi4vZW52aXJvbm1lbnRzL2Vudmlyb25tZW50JztcclxuY29uc3QgTU9DS19NT0RVTEVTID0gdHJ1ZSA/IFtEZWxvbk1vY2tNb2R1bGUuZm9yUm9vdCh7XHJcbiAgZGF0YToge1xyXG4gICAgXCJQUk9GSUxFU1wiOiBNT0NLREFUQS5QUk9GSUxFUyxcclxuICAgIFwiUlVMRVNcIjogTU9DS0RBVEEuUlVMRVMsXHJcbiAgICBcIkFQSVNcIjogTU9DS0RBVEEuQVBJUyxcclxuICAgIFwiQ0hBUlRTXCI6IE1PQ0tEQVRBLkNIQVJUUyxcclxuICAgIFwiUE9JU1wiOiBNT0NLREFUQS5QT0lTLFxyXG4gICAgXCJVU0VSU1wiOiBNT0NLREFUQS5VU0VSUyxcclxuICAgIFwiR0VPU1wiOiBNT0NLREFUQS5HRU9TXHJcbiAgfVxyXG59KV0gOiBbXTtcclxuLy8gI2VuZHJlZ2lvblxyXG5cclxuLy8gI3JlZ2lvbiByZXVzZS10YWJcclxuLyoqXHJcbiAqIOiLpemcgOimgVvot6/nlLHlpI3nlKhdKGh0dHBzOi8vbmctYWxhaW4uY29tL2NvbXBvbmVudHMvcmV1c2UtdGFiKemcgOimge+8mlxyXG4gKiAx44CB5aKe5YqgIGBSRVVTRVRBQl9QUk9WSURFU2BcclxuICogMuOAgeWcqCBgc3JjL2FwcC9sYXlvdXQvZGVmYXVsdC9kZWZhdWx0LmNvbXBvbmVudC5odG1sYCDkv67mlLnvvJpcclxuICogIGBgYGh0bWxcclxuICogIDxzZWN0aW9uIGNsYXNzPVwiYWxhaW4tZGVmYXVsdF9fY29udGVudFwiPlxyXG4gKiAgICA8cmV1c2UtdGFiPjwvcmV1c2UtdGFiPlxyXG4gKiAgICA8cm91dGVyLW91dGxldD48L3JvdXRlci1vdXRsZXQ+XHJcbiAqICA8L3NlY3Rpb24+XHJcbiAqICBgYGBcclxuICovXHJcbmltcG9ydCB7IFJvdXRlUmV1c2VTdHJhdGVneSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCB7IFJldXNlVGFiU2VydmljZSwgUmV1c2VUYWJTdHJhdGVneSB9IGZyb20gJ0BkZWxvbi9hYmMvcmV1c2UtdGFiJztcclxuY29uc3QgUkVVU0VUQUJfUFJPVklERVMgPSBbXHJcbiAgLy8ge1xyXG4gIC8vICAgcHJvdmlkZTogUm91dGVSZXVzZVN0cmF0ZWd5LFxyXG4gIC8vICAgdXNlQ2xhc3M6IFJldXNlVGFiU3RyYXRlZ3ksXHJcbiAgLy8gICBkZXBzOiBbUmV1c2VUYWJTZXJ2aWNlXSxcclxuICAvLyB9LFxyXG5dO1xyXG4vLyAjZW5kcmVnaW9uXHJcblxyXG4vLyAjcmVnaW9uIGdsb2JhbCBjb25maWcgZnVuY3Rpb25zXHJcblxyXG5pbXBvcnQgeyBQYWdlSGVhZGVyQ29uZmlnIH0gZnJvbSAnQGRlbG9uL2FiYyc7XHJcbmV4cG9ydCBmdW5jdGlvbiBmblBhZ2VIZWFkZXJDb25maWcoKTogUGFnZUhlYWRlckNvbmZpZyB7XHJcbiAgcmV0dXJuIHtcclxuICAgIC4uLm5ldyBQYWdlSGVhZGVyQ29uZmlnKCksXHJcbiAgICBob21lSTE4bjogJ2hvbWUnLFxyXG4gIH07XHJcbn1cclxuXHJcbmltcG9ydCB7IERlbG9uQXV0aENvbmZpZyB9IGZyb20gJ0BkZWxvbi9hdXRoJztcclxuZXhwb3J0IGZ1bmN0aW9uIGZuRGVsb25BdXRoQ29uZmlnKCk6IERlbG9uQXV0aENvbmZpZyB7XHJcbiAgcmV0dXJuIHtcclxuICAgIC4uLm5ldyBEZWxvbkF1dGhDb25maWcoKSxcclxuICAgIGxvZ2luX3VybDogJy9wYXNzcG9ydC9sb2dpbicsXHJcbiAgfTtcclxufVxyXG5cclxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1kdXBsaWNhdGUtaW1wb3J0c1xyXG5pbXBvcnQgeyBTVENvbmZpZyB9IGZyb20gJ0BkZWxvbi9hYmMnO1xyXG5leHBvcnQgZnVuY3Rpb24gZm5TVENvbmZpZygpOiBTVENvbmZpZyB7XHJcbiAgcmV0dXJuIHtcclxuICAgIC4uLm5ldyBTVENvbmZpZygpLFxyXG4gICAgbW9kYWw6IHsgc2l6ZTogJ2xnJyB9LFxyXG4gIH07XHJcbn1cclxuXHJcbmNvbnN0IEdMT0JBTF9DT05GSUdfUFJPVklERVMgPSBbXHJcbiAgLy8gVElQU++8mkBkZWxvbi9hYmMg5pyJ5aSn6YeP55qE5YWo5bGA6YWN572u5L+h5oGv77yM5L6L5aaC6K6+572u5omA5pyJIGBzdGAg55qE6aG156CB6buY6K6k5Li6IGAyMGAg6KGMXHJcbiAgeyBwcm92aWRlOiBTVENvbmZpZywgdXNlRmFjdG9yeTogZm5TVENvbmZpZyB9LFxyXG4gIHsgcHJvdmlkZTogUGFnZUhlYWRlckNvbmZpZywgdXNlRmFjdG9yeTogZm5QYWdlSGVhZGVyQ29uZmlnIH0sXHJcbiAgeyBwcm92aWRlOiBEZWxvbkF1dGhDb25maWcsIHVzZUZhY3Rvcnk6IGZuRGVsb25BdXRoQ29uZmlnIH0sXHJcbl07XHJcblxyXG4vLyAjZW5kcmVnaW9uXHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGltcG9ydHM6IFtBbGFpblRoZW1lTW9kdWxlLmZvclJvb3QoKSwgRGVsb25BQ0xNb2R1bGUuZm9yUm9vdCgpLCAuLi5NT0NLX01PRFVMRVNdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgRGVsb25Nb2R1bGUge1xyXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBTa2lwU2VsZigpIHBhcmVudE1vZHVsZTogRGVsb25Nb2R1bGUpIHtcclxuICAgIHRocm93SWZBbHJlYWR5TG9hZGVkKHBhcmVudE1vZHVsZSwgJ0RlbG9uTW9kdWxlJyk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZm9yUm9vdCgpOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIG5nTW9kdWxlOiBEZWxvbk1vZHVsZSxcclxuICAgICAgcHJvdmlkZXJzOiBbLi4uUkVVU0VUQUJfUFJPVklERVMsIC4uLkdMT0JBTF9DT05GSUdfUFJPVklERVNdLFxyXG4gICAgfTtcclxuICB9XHJcbn1cclxuIl19