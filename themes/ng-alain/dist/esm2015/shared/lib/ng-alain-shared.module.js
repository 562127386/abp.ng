/**
 * @fileoverview added by tsickle
 * Generated from: lib/ng-alain-shared.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CoreModule } from '@abp/ng.core';
import { NgModule, LOCALE_ID, APP_INITIALIZER } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ThemeSharedModule } from '@abp/ng.theme.shared';
import { SharedModule } from '@fs/ng-alain';
import { default as ngLang } from '@angular/common/locales/zh';
import { NZ_I18N, zh_CN as zorroLang } from 'ng-zorro-antd';
import { ALAIN_I18N_TOKEN, DELON_LOCALE, zh_CN as delonLang } from '@delon/theme';
import { registerLocaleData } from '@angular/common';
import { I18NService } from '@fs/ng-alain';
import { StartupService } from '@fs/ng-alain';
import { TranslateHttpLoader } from '@ngx-translate/http-loader';
import { TranslateModule, TranslateLoader } from '@ngx-translate/core';
import { HttpClient } from '@angular/common/http';
/**
 * @param {?} startupService
 * @return {?}
 */
export function StartupServiceFactory(startupService) {
    /** @type {?} */
    const startupServiceLoad = (/**
     * @return {?}
     */
    () => startupService.load());
    return startupServiceLoad;
}
/** @type {?} */
const APPINIT_PROVIDES = [
    StartupService,
    {
        provide: APP_INITIALIZER,
        useFactory: StartupServiceFactory,
        deps: [StartupService],
        multi: true,
    },
];
/** @type {?} */
const LANG = {
    abbr: 'zh',
    ng: ngLang,
    zorro: zorroLang,
    delon: delonLang,
};
registerLocaleData(LANG.ng, LANG.abbr);
const ɵ0 = LANG.abbr, ɵ1 = LANG.zorro, ɵ2 = LANG.delon;
/** @type {?} */
const LANG_PROVIDES = [
    { provide: LOCALE_ID, useValue: ɵ0 },
    { provide: NZ_I18N, useValue: ɵ1 },
    { provide: DELON_LOCALE, useValue: ɵ2 },
];
/** @type {?} */
const I18NSERVICE_PROVIDES = [{ provide: ALAIN_I18N_TOKEN, useClass: I18NService, multi: false }];
/** @type {?} */
const INTERCEPTOR_PROVIDES = [
//{ provide: HTTP_INTERCEPTORS, useClass: SimpleInterceptor, multi: true },
//{ provide: HTTP_INTERCEPTORS, useClass: DefaultInterceptor, multi: true },
];
/**
 * @param {?} http
 * @return {?}
 */
export function I18nHttpLoaderFactory(http) {
    return new TranslateHttpLoader(http, `assets/tmp/i18n/`, '.json');
}
/** @type {?} */
const I18NSERVICE_MODULES = [
    TranslateModule.forRoot({
        loader: {
            provide: TranslateLoader,
            useFactory: I18nHttpLoaderFactory,
            deps: [HttpClient],
        },
    }),
];
/** @type {?} */
const GLOBAL_THIRD_MODULES = [];
import { JsonSchemaModule } from '@fs/ng-alain';
/** @type {?} */
const FORM_MODULES = [JsonSchemaModule];
export class NgAlainSharedModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: NgAlainSharedModule,
            providers: [
                ...APPINIT_PROVIDES,
                ...LANG_PROVIDES,
                ...INTERCEPTOR_PROVIDES,
                ...I18NSERVICE_PROVIDES
            ]
        };
    }
}
NgAlainSharedModule.decorators = [
    { type: NgModule, args: [{
                declarations: [],
                imports: [
                    CoreModule,
                    CommonModule,
                    ThemeSharedModule,
                    SharedModule,
                    //...I18NSERVICE_MODULES,
                    ...GLOBAL_THIRD_MODULES,
                    ...FORM_MODULES
                ],
                exports: [SharedModule, ThemeSharedModule],
                entryComponents: []
            },] }
];
export { ɵ0, ɵ1, ɵ2 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctYWxhaW4tc2hhcmVkLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bmcy9uZy1hbGFpbi9zaGFyZWQvIiwic291cmNlcyI6WyJsaWIvbmctYWxhaW4tc2hhcmVkLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQW1CLE1BQU0sY0FBYyxDQUFDO0FBQzNELE9BQU8sRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUF1QixlQUFlLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUYsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDNUMsT0FBTyxFQUFFLE9BQU8sSUFBSSxNQUFNLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssSUFBSSxTQUFTLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQzNFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxZQUFZLEVBQUUsS0FBSyxJQUFJLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUNsRixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQzNDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDOUMsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDakUsT0FBTyxFQUFFLGVBQWUsRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RSxPQUFPLEVBQUUsVUFBVSxFQUF1QyxNQUFNLHNCQUFzQixDQUFDOzs7OztBQUd2RixNQUFNLFVBQVUscUJBQXFCLENBQUMsY0FBOEI7O1VBQzVELGtCQUFrQjs7O0lBQUMsR0FBRSxFQUFFLENBQUEsY0FBYyxDQUFDLElBQUksRUFBRSxDQUFBO0lBQ2xELE9BQU8sa0JBQWtCLENBQUM7QUFDNUIsQ0FBQzs7TUFDSyxnQkFBZ0IsR0FBRztJQUN2QixjQUFjO0lBQ2Q7UUFDRSxPQUFPLEVBQUUsZUFBZTtRQUN4QixVQUFVLEVBQUUscUJBQXFCO1FBQ2pDLElBQUksRUFBRSxDQUFDLGNBQWMsQ0FBQztRQUN0QixLQUFLLEVBQUUsSUFBSTtLQUNaO0NBQ0Y7O01BRUssSUFBSSxHQUFHO0lBQ1gsSUFBSSxFQUFFLElBQUk7SUFDVixFQUFFLEVBQUUsTUFBTTtJQUNWLEtBQUssRUFBRSxTQUFTO0lBQ2hCLEtBQUssRUFBRSxTQUFTO0NBQ2pCO0FBQ0Qsa0JBQWtCLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7V0FFTCxJQUFJLENBQUMsSUFBSSxPQUNYLElBQUksQ0FBQyxLQUFLLE9BQ0wsSUFBSSxDQUFDLEtBQUs7O01BSHpDLGFBQWEsR0FBRztJQUNwQixFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsUUFBUSxJQUFXLEVBQUU7SUFDM0MsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLFFBQVEsSUFBWSxFQUFFO0lBQzFDLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxRQUFRLElBQVksRUFBRTtDQUNoRDs7TUFFSyxvQkFBb0IsR0FBRyxDQUFDLEVBQUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDOztNQUMzRixvQkFBb0IsR0FBRztBQUMzQiwyRUFBMkU7QUFDM0UsNEVBQTRFO0NBQzdFOzs7OztBQUNELE1BQU0sVUFBVSxxQkFBcUIsQ0FBQyxJQUFnQjtJQUNwRCxPQUFPLElBQUksbUJBQW1CLENBQUMsSUFBSSxFQUFFLGtCQUFrQixFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3BFLENBQUM7O01BRUssbUJBQW1CLEdBQUc7SUFDMUIsZUFBZSxDQUFDLE9BQU8sQ0FBQztRQUN0QixNQUFNLEVBQUU7WUFDTixPQUFPLEVBQUUsZUFBZTtZQUN4QixVQUFVLEVBQUUscUJBQXFCO1lBQ2pDLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQztTQUNuQjtLQUNGLENBQUM7Q0FDSDs7TUFDSyxvQkFBb0IsR0FBRyxFQUFFO0FBQy9CLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGNBQWMsQ0FBQzs7TUFFMUMsWUFBWSxHQUFHLENBQUMsZ0JBQWdCLENBQUM7QUFpQnZDLE1BQU0sT0FBTyxtQkFBbUI7Ozs7SUFDOUIsTUFBTSxDQUFDLE9BQU87UUFDWixPQUFPO1lBQ0wsUUFBUSxFQUFFLG1CQUFtQjtZQUM3QixTQUFTLEVBQUU7Z0JBQ1QsR0FBRyxnQkFBZ0I7Z0JBQ25CLEdBQUcsYUFBYTtnQkFDaEIsR0FBRyxvQkFBb0I7Z0JBQ3ZCLEdBQUcsb0JBQW9CO2FBQ3hCO1NBQ0YsQ0FBQztJQUNKLENBQUM7OztZQTNCRixRQUFRLFNBQUM7Z0JBQ1IsWUFBWSxFQUFFLEVBQ2I7Z0JBQ0QsT0FBTyxFQUFFO29CQUNQLFVBQVU7b0JBQ1YsWUFBWTtvQkFDWixpQkFBaUI7b0JBQ2pCLFlBQVk7b0JBQ1oseUJBQXlCO29CQUN6QixHQUFHLG9CQUFvQjtvQkFDdkIsR0FBRyxZQUFZO2lCQUNoQjtnQkFDRCxPQUFPLEVBQUUsQ0FBQyxZQUFZLEVBQUUsaUJBQWlCLENBQUM7Z0JBQzFDLGVBQWUsRUFBRSxFQUNoQjthQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29yZU1vZHVsZSwgTGF6eUxvYWRTZXJ2aWNlIH0gZnJvbSAnQGFicC9uZy5jb3JlJztcclxuaW1wb3J0IHsgTmdNb2R1bGUsIExPQ0FMRV9JRCwgTW9kdWxlV2l0aFByb3ZpZGVycywgQVBQX0lOSVRJQUxJWkVSIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IFRoZW1lU2hhcmVkTW9kdWxlIH0gZnJvbSAnQGFicC9uZy50aGVtZS5zaGFyZWQnO1xyXG5pbXBvcnQgeyBTaGFyZWRNb2R1bGUgfSBmcm9tICdAZnMvbmctYWxhaW4nO1xyXG5pbXBvcnQgeyBkZWZhdWx0IGFzIG5nTGFuZyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9sb2NhbGVzL3poJztcclxuaW1wb3J0IHsgTlpfSTE4TiwgemhfQ04gYXMgem9ycm9MYW5nLCBOek1vZGFsTW9kdWxlIH0gZnJvbSAnbmctem9ycm8tYW50ZCc7XHJcbmltcG9ydCB7IEFMQUlOX0kxOE5fVE9LRU4sIERFTE9OX0xPQ0FMRSwgemhfQ04gYXMgZGVsb25MYW5nIH0gZnJvbSAnQGRlbG9uL3RoZW1lJztcclxuaW1wb3J0IHsgcmVnaXN0ZXJMb2NhbGVEYXRhIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgSTE4TlNlcnZpY2UgfSBmcm9tICdAZnMvbmctYWxhaW4nO1xyXG5pbXBvcnQgeyBTdGFydHVwU2VydmljZSB9IGZyb20gJ0Bmcy9uZy1hbGFpbic7XHJcbmltcG9ydCB7IFRyYW5zbGF0ZUh0dHBMb2FkZXIgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9odHRwLWxvYWRlcic7XHJcbmltcG9ydCB7IFRyYW5zbGF0ZU1vZHVsZSwgVHJhbnNsYXRlTG9hZGVyIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XHJcbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBDbGllbnRNb2R1bGUsIEhUVFBfSU5URVJDRVBUT1JTIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBTaW1wbGVJbnRlcmNlcHRvciB9IGZyb20gJ0BkZWxvbi9hdXRoJztcclxuaW1wb3J0IHsgRGVmYXVsdEludGVyY2VwdG9yIH0gZnJvbSAnQGZzL25nLWFsYWluJztcclxuZXhwb3J0IGZ1bmN0aW9uIFN0YXJ0dXBTZXJ2aWNlRmFjdG9yeShzdGFydHVwU2VydmljZTogU3RhcnR1cFNlcnZpY2UpIHtcclxuICBjb25zdCBzdGFydHVwU2VydmljZUxvYWQ9KCk9PnN0YXJ0dXBTZXJ2aWNlLmxvYWQoKTtcclxuICByZXR1cm4gc3RhcnR1cFNlcnZpY2VMb2FkO1xyXG59XHJcbmNvbnN0IEFQUElOSVRfUFJPVklERVMgPSBbXHJcbiAgU3RhcnR1cFNlcnZpY2UsXHJcbiAge1xyXG4gICAgcHJvdmlkZTogQVBQX0lOSVRJQUxJWkVSLFxyXG4gICAgdXNlRmFjdG9yeTogU3RhcnR1cFNlcnZpY2VGYWN0b3J5LFxyXG4gICAgZGVwczogW1N0YXJ0dXBTZXJ2aWNlXSxcclxuICAgIG11bHRpOiB0cnVlLFxyXG4gIH0sXHJcbl07XHJcblxyXG5jb25zdCBMQU5HID0ge1xyXG4gIGFiYnI6ICd6aCcsXHJcbiAgbmc6IG5nTGFuZyxcclxuICB6b3Jybzogem9ycm9MYW5nLFxyXG4gIGRlbG9uOiBkZWxvbkxhbmcsXHJcbn07XHJcbnJlZ2lzdGVyTG9jYWxlRGF0YShMQU5HLm5nLCBMQU5HLmFiYnIpO1xyXG5jb25zdCBMQU5HX1BST1ZJREVTID0gW1xyXG4gIHsgcHJvdmlkZTogTE9DQUxFX0lELCB1c2VWYWx1ZTogTEFORy5hYmJyIH0sXHJcbiAgeyBwcm92aWRlOiBOWl9JMThOLCB1c2VWYWx1ZTogTEFORy56b3JybyB9LFxyXG4gIHsgcHJvdmlkZTogREVMT05fTE9DQUxFLCB1c2VWYWx1ZTogTEFORy5kZWxvbiB9LFxyXG5dO1xyXG5cclxuY29uc3QgSTE4TlNFUlZJQ0VfUFJPVklERVMgPSBbeyBwcm92aWRlOiBBTEFJTl9JMThOX1RPS0VOLCB1c2VDbGFzczogSTE4TlNlcnZpY2UsIG11bHRpOiBmYWxzZSB9XTtcclxuY29uc3QgSU5URVJDRVBUT1JfUFJPVklERVMgPSBbXHJcbiAgLy97IHByb3ZpZGU6IEhUVFBfSU5URVJDRVBUT1JTLCB1c2VDbGFzczogU2ltcGxlSW50ZXJjZXB0b3IsIG11bHRpOiB0cnVlIH0sXHJcbiAgLy97IHByb3ZpZGU6IEhUVFBfSU5URVJDRVBUT1JTLCB1c2VDbGFzczogRGVmYXVsdEludGVyY2VwdG9yLCBtdWx0aTogdHJ1ZSB9LFxyXG5dO1xyXG5leHBvcnQgZnVuY3Rpb24gSTE4bkh0dHBMb2FkZXJGYWN0b3J5KGh0dHA6IEh0dHBDbGllbnQpIHtcclxuICByZXR1cm4gbmV3IFRyYW5zbGF0ZUh0dHBMb2FkZXIoaHR0cCwgYGFzc2V0cy90bXAvaTE4bi9gLCAnLmpzb24nKTtcclxufVxyXG5cclxuY29uc3QgSTE4TlNFUlZJQ0VfTU9EVUxFUyA9IFtcclxuICBUcmFuc2xhdGVNb2R1bGUuZm9yUm9vdCh7XHJcbiAgICBsb2FkZXI6IHtcclxuICAgICAgcHJvdmlkZTogVHJhbnNsYXRlTG9hZGVyLFxyXG4gICAgICB1c2VGYWN0b3J5OiBJMThuSHR0cExvYWRlckZhY3RvcnksXHJcbiAgICAgIGRlcHM6IFtIdHRwQ2xpZW50XSxcclxuICAgIH0sXHJcbiAgfSksXHJcbl07XHJcbmNvbnN0IEdMT0JBTF9USElSRF9NT0RVTEVTID0gW107XHJcbmltcG9ydCB7IEpzb25TY2hlbWFNb2R1bGUgfSBmcm9tICdAZnMvbmctYWxhaW4nO1xyXG5cclxuY29uc3QgRk9STV9NT0RVTEVTID0gW0pzb25TY2hlbWFNb2R1bGVdO1xyXG5ATmdNb2R1bGUoe1xyXG4gIGRlY2xhcmF0aW9uczogW1xyXG4gIF0sXHJcbiAgaW1wb3J0czogW1xyXG4gICAgQ29yZU1vZHVsZSxcclxuICAgIENvbW1vbk1vZHVsZSxcclxuICAgIFRoZW1lU2hhcmVkTW9kdWxlLC8vYWJwXHJcbiAgICBTaGFyZWRNb2R1bGUsLy9hbGFpblxyXG4gICAgLy8uLi5JMThOU0VSVklDRV9NT0RVTEVTLFxyXG4gICAgLi4uR0xPQkFMX1RISVJEX01PRFVMRVMsXHJcbiAgICAuLi5GT1JNX01PRFVMRVNcclxuICBdLFxyXG4gIGV4cG9ydHM6IFtTaGFyZWRNb2R1bGUsIFRoZW1lU2hhcmVkTW9kdWxlXSxcclxuICBlbnRyeUNvbXBvbmVudHM6IFtcclxuICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ0FsYWluU2hhcmVkTW9kdWxlIHtcclxuICBzdGF0aWMgZm9yUm9vdCgpOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIG5nTW9kdWxlOiBOZ0FsYWluU2hhcmVkTW9kdWxlLFxyXG4gICAgICBwcm92aWRlcnM6IFtcclxuICAgICAgICAuLi5BUFBJTklUX1BST1ZJREVTLFxyXG4gICAgICAgIC4uLkxBTkdfUFJPVklERVMsXHJcbiAgICAgICAgLi4uSU5URVJDRVBUT1JfUFJPVklERVMsXHJcbiAgICAgICAgLi4uSTE4TlNFUlZJQ0VfUFJPVklERVNcclxuICAgICAgXVxyXG4gICAgfTtcclxuICB9XHJcblxyXG59XHJcbiJdfQ==