{"version":3,"file":"abp-ng.tenant-management.js","sources":["ng://@abp/ng.tenant-management/lib/actions/tenant-management.actions.ts","ng://@abp/ng.tenant-management/lib/services/tenant-management.service.ts","ng://@abp/ng.tenant-management/lib/states/tenant-management.state.ts","ng://@abp/ng.tenant-management/lib/components/tenants/tenants.component.ts","ng://@abp/ng.tenant-management/lib/tenant-management-routing.module.ts","ng://@abp/ng.tenant-management/lib/tenant-management.module.ts","ng://@abp/ng.tenant-management/lib/models/tenant-management.ts","ng://@abp/ng.tenant-management/lib/services/tenant-management-state.service.ts"],"sourcesContent":["import { TenantManagement } from '../models/tenant-management';\r\nimport { ABP } from '@abp/ng.core';\r\n\r\nexport class GetTenants {\r\n  static readonly type = '[TenantManagement] Get Tenant';\r\n  constructor(public payload?: ABP.PageQueryParams) {}\r\n}\r\n\r\nexport class GetTenantById {\r\n  static readonly type = '[TenantManagement] Get Tenant By Id';\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class CreateTenant {\r\n  static readonly type = '[TenantManagement] Create Tenant';\r\n  constructor(public payload: TenantManagement.AddRequest) {}\r\n}\r\n\r\nexport class UpdateTenant {\r\n  static readonly type = '[TenantManagement] Update Tenant';\r\n  constructor(public payload: TenantManagement.UpdateRequest) {}\r\n}\r\n\r\nexport class DeleteTenant {\r\n  static readonly type = '[TenantManagement] Delete Tenant';\r\n  constructor(public payload: string) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { RestService, Rest, ABP } from '@abp/ng.core';\r\nimport { TenantManagement } from '../models/tenant-management';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TenantManagementService {\r\n  constructor(private rest: RestService) {}\r\n\r\n  getTenant(params = {} as ABP.PageQueryParams): Observable<TenantManagement.Response> {\r\n    const request: Rest.Request<null> = {\r\n      method: 'GET',\r\n      url: '/api/multi-tenancy/tenants',\r\n      params,\r\n    };\r\n\r\n    return this.rest.request<null, TenantManagement.Response>(request);\r\n  }\r\n\r\n  getTenantById(id: string): Observable<ABP.BasicItem> {\r\n    const request: Rest.Request<null> = {\r\n      method: 'GET',\r\n      url: `/api/multi-tenancy/tenants/${id}`,\r\n    };\r\n\r\n    return this.rest.request<null, ABP.BasicItem>(request);\r\n  }\r\n\r\n  deleteTenant(id: string): Observable<null> {\r\n    const request: Rest.Request<null> = {\r\n      method: 'DELETE',\r\n      url: `/api/multi-tenancy/tenants/${id}`,\r\n    };\r\n\r\n    return this.rest.request<null, null>(request);\r\n  }\r\n\r\n  createTenant(body: TenantManagement.AddRequest): Observable<ABP.BasicItem> {\r\n    const request: Rest.Request<TenantManagement.AddRequest> = {\r\n      method: 'POST',\r\n      url: '/api/multi-tenancy/tenants',\r\n      body,\r\n    };\r\n\r\n    return this.rest.request<TenantManagement.AddRequest, ABP.BasicItem>(request);\r\n  }\r\n\r\n  updateTenant(body: TenantManagement.UpdateRequest): Observable<ABP.BasicItem> {\r\n    const url = `/api/multi-tenancy/tenants/${body.id}`;\r\n    delete body.id;\r\n\r\n    const request: Rest.Request<TenantManagement.UpdateRequest> = {\r\n      method: 'PUT',\r\n      url,\r\n      body,\r\n    };\r\n\r\n    return this.rest.request<TenantManagement.UpdateRequest, ABP.BasicItem>(request);\r\n  }\r\n\r\n  getDefaultConnectionString(id: string): Observable<string> {\r\n    const url = `/api/multi-tenancy/tenants/${id}/default-connection-string`;\r\n\r\n    const request: Rest.Request<TenantManagement.DefaultConnectionStringRequest> = {\r\n      method: 'GET',\r\n      responseType: Rest.ResponseType.Text,\r\n      url,\r\n    };\r\n    return this.rest.request<TenantManagement.DefaultConnectionStringRequest, string>(request);\r\n  }\r\n\r\n  updateDefaultConnectionString(\r\n    payload: TenantManagement.DefaultConnectionStringRequest,\r\n  ): Observable<any> {\r\n    const url = `/api/multi-tenancy/tenants/${payload.id}/default-connection-string`;\r\n\r\n    const request: Rest.Request<TenantManagement.DefaultConnectionStringRequest> = {\r\n      method: 'PUT',\r\n      url,\r\n      params: { defaultConnectionString: payload.defaultConnectionString },\r\n    };\r\n    return this.rest.request<TenantManagement.DefaultConnectionStringRequest, any>(request);\r\n  }\r\n\r\n  deleteDefaultConnectionString(id: string): Observable<string> {\r\n    const url = `/api/multi-tenancy/tenants/${id}/default-connection-string`;\r\n\r\n    const request: Rest.Request<TenantManagement.DefaultConnectionStringRequest> = {\r\n      method: 'DELETE',\r\n      url,\r\n    };\r\n    return this.rest.request<TenantManagement.DefaultConnectionStringRequest, any>(request);\r\n  }\r\n}\r\n","import { ABP } from '@abp/ng.core';\r\nimport { Action, Selector, State, StateContext } from '@ngxs/store';\r\nimport { tap } from 'rxjs/operators';\r\nimport {\r\n  CreateTenant,\r\n  DeleteTenant,\r\n  GetTenantById,\r\n  GetTenants,\r\n  UpdateTenant,\r\n} from '../actions/tenant-management.actions';\r\nimport { TenantManagement } from '../models/tenant-management';\r\nimport { TenantManagementService } from '../services/tenant-management.service';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@State<TenantManagement.State>({\r\n  name: 'TenantManagementState',\r\n  defaults: { result: {}, selectedItem: {} } as TenantManagement.State,\r\n})\r\n@Injectable()\r\nexport class TenantManagementState {\r\n  @Selector()\r\n  static get({ result }: TenantManagement.State): ABP.BasicItem[] {\r\n    return result.items || [];\r\n  }\r\n\r\n  @Selector()\r\n  static getTenantsTotalCount({ result }: TenantManagement.State): number {\r\n    return result.totalCount;\r\n  }\r\n\r\n  constructor(private tenantManagementService: TenantManagementService) {}\r\n\r\n  @Action(GetTenants)\r\n  get({ patchState }: StateContext<TenantManagement.State>, { payload }: GetTenants) {\r\n    return this.tenantManagementService.getTenant(payload).pipe(\r\n      tap(result =>\r\n        patchState({\r\n          result,\r\n        }),\r\n      ),\r\n    );\r\n  }\r\n\r\n  @Action(GetTenantById)\r\n  getById({ patchState }: StateContext<TenantManagement.State>, { payload }: GetTenantById) {\r\n    return this.tenantManagementService.getTenantById(payload).pipe(\r\n      tap(selectedItem =>\r\n        patchState({\r\n          selectedItem,\r\n        }),\r\n      ),\r\n    );\r\n  }\r\n\r\n  @Action(DeleteTenant)\r\n  delete(_, { payload }: DeleteTenant) {\r\n    return this.tenantManagementService.deleteTenant(payload);\r\n  }\r\n\r\n  @Action(CreateTenant)\r\n  add(_, { payload }: CreateTenant) {\r\n    return this.tenantManagementService.createTenant(payload);\r\n  }\r\n\r\n  @Action(UpdateTenant)\r\n  update({ getState }: StateContext<TenantManagement.State>, { payload }: UpdateTenant) {\r\n    return this.tenantManagementService.updateTenant({ ...getState().selectedItem, ...payload });\r\n  }\r\n}\r\n","import { ABP } from '@abp/ng.core';\r\nimport { ConfirmationService, Toaster } from '@abp/ng.theme.shared';\r\nimport { Component, OnInit, TemplateRef, ViewChild, ChangeDetectorRef } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Select, Store } from '@ngxs/store';\r\nimport { Observable } from 'rxjs';\r\nimport { finalize, pluck, switchMap, take } from 'rxjs/operators';\r\nimport {\r\n  CreateTenant,\r\n  DeleteTenant,\r\n  GetTenantById,\r\n  GetTenants,\r\n  UpdateTenant,\r\n} from '../../actions/tenant-management.actions';\r\nimport { TenantManagementService } from '../../services/tenant-management.service';\r\nimport { TenantManagementState } from '../../states/tenant-management.state';\r\n\r\ninterface SelectedModalContent {\r\n  type: 'saveConnStr' | 'saveTenant';\r\n  title: string;\r\n  template: TemplateRef<any>;\r\n}\r\n\r\n@Component({\r\n  selector: 'abp-tenants',\r\n  templateUrl: './tenants.component.html',\r\n})\r\nexport class TenantsComponent implements OnInit {\r\n  @Select(TenantManagementState.get)\r\n  data$: Observable<ABP.BasicItem[]>;\r\n\r\n  @Select(TenantManagementState.getTenantsTotalCount)\r\n  totalCount$: Observable<number>;\r\n\r\n  selected: ABP.BasicItem;\r\n\r\n  tenantForm: FormGroup;\r\n\r\n  defaultConnectionStringForm: FormGroup;\r\n\r\n  defaultConnectionString: string;\r\n\r\n  isModalVisible: boolean;\r\n\r\n  selectedModalContent = {} as SelectedModalContent;\r\n\r\n  visibleFeatures = false;\r\n\r\n  providerKey: string;\r\n\r\n  _useSharedDatabase: boolean;\r\n\r\n  pageQuery: ABP.PageQueryParams = { maxResultCount: 10 };\r\n\r\n  loading = false;\r\n\r\n  modalBusy = false;\r\n\r\n  sortOrder = '';\r\n\r\n  sortKey = '';\r\n\r\n  get hasSelectedTenant(): boolean {\r\n    return Boolean(this.selected.id);\r\n  }\r\n\r\n  get useSharedDatabase(): boolean {\r\n    return this.defaultConnectionStringForm.get('useSharedDatabase').value;\r\n  }\r\n\r\n  get connectionString(): string {\r\n    return this.defaultConnectionStringForm.get('defaultConnectionString').value;\r\n  }\r\n\r\n  @ViewChild('tenantModalTemplate', { static: false })\r\n  tenantModalTemplate: TemplateRef<any>;\r\n\r\n  @ViewChild('connectionStringModalTemplate', { static: false })\r\n  connectionStringModalTemplate: TemplateRef<any>;\r\n\r\n  get isDisabledSaveButton(): boolean {\r\n    if (!this.selectedModalContent) return false;\r\n\r\n    if (\r\n      this.selectedModalContent.type === 'saveConnStr' &&\r\n      this.defaultConnectionStringForm &&\r\n      this.defaultConnectionStringForm.invalid\r\n    ) {\r\n      return true;\r\n    } else if (\r\n      this.selectedModalContent.type === 'saveTenant' &&\r\n      this.tenantForm &&\r\n      this.tenantForm.invalid\r\n    ) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  onVisibleFeaturesChange = (value: boolean) => {\r\n    this.visibleFeatures = value;\r\n  };\r\n\r\n  constructor(\r\n    private confirmationService: ConfirmationService,\r\n    private tenantService: TenantManagementService,\r\n    private fb: FormBuilder,\r\n    private store: Store,\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.get();\r\n  }\r\n\r\n  onSearch(value: string) {\r\n    this.pageQuery.filter = value;\r\n    this.get();\r\n  }\r\n\r\n  private createTenantForm() {\r\n    const tenantForm = this.fb.group({\r\n      name: [this.selected.name || '', [Validators.required, Validators.maxLength(256)]],\r\n      adminEmailAddress: [null, [Validators.required, Validators.maxLength(256), Validators.email]],\r\n      adminPassword: [null, [Validators.required]],\r\n    });\r\n\r\n    if (this.hasSelectedTenant) {\r\n      tenantForm.removeControl('adminEmailAddress');\r\n      tenantForm.removeControl('adminPassword');\r\n    }\r\n\r\n    this.tenantForm = tenantForm;\r\n  }\r\n\r\n  private createDefaultConnectionStringForm() {\r\n    this.defaultConnectionStringForm = this.fb.group({\r\n      useSharedDatabase: this._useSharedDatabase,\r\n      defaultConnectionString: [this.defaultConnectionString || ''],\r\n    });\r\n  }\r\n\r\n  openModal(title: string, template: TemplateRef<any>, type: 'saveConnStr' | 'saveTenant') {\r\n    this.selectedModalContent = {\r\n      title,\r\n      template,\r\n      type,\r\n    };\r\n\r\n    this.isModalVisible = true;\r\n  }\r\n\r\n  onEditConnectionString(id: string) {\r\n    this.store\r\n      .dispatch(new GetTenantById(id))\r\n      .pipe(\r\n        pluck('TenantManagementState', 'selectedItem'),\r\n        switchMap(selected => {\r\n          this.selected = selected;\r\n          return this.tenantService.getDefaultConnectionString(id);\r\n        }),\r\n      )\r\n      .subscribe(fetchedConnectionString => {\r\n        this._useSharedDatabase = fetchedConnectionString ? false : true;\r\n        this.defaultConnectionString = fetchedConnectionString ? fetchedConnectionString : '';\r\n        this.createDefaultConnectionStringForm();\r\n        this.openModal(\r\n          'AbpTenantManagement::ConnectionStrings',\r\n          this.connectionStringModalTemplate,\r\n          'saveConnStr',\r\n        );\r\n      });\r\n  }\r\n\r\n  addTenant() {\r\n    this.selected = {} as ABP.BasicItem;\r\n    this.createTenantForm();\r\n    this.openModal('AbpTenantManagement::NewTenant', this.tenantModalTemplate, 'saveTenant');\r\n  }\r\n\r\n  editTenant(id: string) {\r\n    this.store\r\n      .dispatch(new GetTenantById(id))\r\n      .pipe(pluck('TenantManagementState', 'selectedItem'))\r\n      .subscribe(selected => {\r\n        this.selected = selected;\r\n        this.createTenantForm();\r\n        this.openModal('AbpTenantManagement::Edit', this.tenantModalTemplate, 'saveTenant');\r\n      });\r\n  }\r\n\r\n  save() {\r\n    const { type } = this.selectedModalContent;\r\n    if (!type) return;\r\n    if (type === 'saveTenant') this.saveTenant();\r\n    else if (type === 'saveConnStr') this.saveConnectionString();\r\n  }\r\n\r\n  saveConnectionString() {\r\n    if (this.modalBusy) return;\r\n\r\n    this.modalBusy = true;\r\n    if (this.useSharedDatabase || (!this.useSharedDatabase && !this.connectionString)) {\r\n      this.tenantService\r\n        .deleteDefaultConnectionString(this.selected.id)\r\n        .pipe(\r\n          take(1),\r\n          finalize(() => (this.modalBusy = false)),\r\n        )\r\n        .subscribe(() => {\r\n          this.isModalVisible = false;\r\n        });\r\n    } else {\r\n      this.tenantService\r\n        .updateDefaultConnectionString({\r\n          id: this.selected.id,\r\n          defaultConnectionString: this.connectionString,\r\n        })\r\n        .pipe(\r\n          take(1),\r\n          finalize(() => (this.modalBusy = false)),\r\n        )\r\n        .subscribe(() => {\r\n          this.isModalVisible = false;\r\n        });\r\n    }\r\n  }\r\n\r\n  saveTenant() {\r\n    if (!this.tenantForm.valid || this.modalBusy) return;\r\n    this.modalBusy = true;\r\n\r\n    this.store\r\n      .dispatch(\r\n        this.selected.id\r\n          ? new UpdateTenant({ ...this.selected, ...this.tenantForm.value, id: this.selected.id })\r\n          : new CreateTenant(this.tenantForm.value),\r\n      )\r\n      .pipe(finalize(() => (this.modalBusy = false)))\r\n      .subscribe(() => {\r\n        this.isModalVisible = false;\r\n        this.get();\r\n      });\r\n  }\r\n\r\n  delete(id: string, name: string) {\r\n    this.confirmationService\r\n      .warn(\r\n        'AbpTenantManagement::TenantDeletionConfirmationMessage',\r\n        'AbpTenantManagement::AreYouSure',\r\n        {\r\n          messageLocalizationParams: [name],\r\n        },\r\n      )\r\n      .subscribe((status: Toaster.Status) => {\r\n        if (status === Toaster.Status.confirm) {\r\n          this.store.dispatch(new DeleteTenant(id)).subscribe(() => this.get());\r\n        }\r\n      });\r\n  }\r\n\r\n  onPageChange(page: number) {\r\n    this.pageQuery.skipCount = (page - 1) * this.pageQuery.maxResultCount;\r\n\r\n    this.get();\r\n  }\r\n\r\n  get() {\r\n    this.loading = true;\r\n    this.store\r\n      .dispatch(new GetTenants(this.pageQuery))\r\n      .pipe(finalize(() => (this.loading = false)))\r\n      .subscribe();\r\n  }\r\n\r\n  onSharedDatabaseChange(value: boolean) {\r\n    if (!value) {\r\n      setTimeout(() => {\r\n        const defaultConnectionString = document.getElementById(\r\n          'defaultConnectionString',\r\n        ) as HTMLInputElement;\r\n        if (defaultConnectionString) {\r\n          defaultConnectionString.focus();\r\n        }\r\n      }, 0);\r\n    }\r\n  }\r\n\r\n  openFeaturesModal(providerKey: string) {\r\n    this.providerKey = providerKey;\r\n    setTimeout(() => {\r\n      this.visibleFeatures = true;\r\n    }, 0);\r\n  }\r\n}\r\n","import {\r\n  AuthGuard,\r\n  DynamicLayoutComponent,\r\n  PermissionGuard,\r\n  ReplaceableComponents,\r\n  ReplaceableRouteContainerComponent,\r\n} from '@abp/ng.core';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { TenantsComponent } from './components/tenants/tenants.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '', redirectTo: 'tenants', pathMatch: 'full' },\r\n  {\r\n    path: '',\r\n    component: DynamicLayoutComponent,\r\n    canActivate: [AuthGuard, PermissionGuard],\r\n    children: [\r\n      {\r\n        path: 'tenants',\r\n        component: ReplaceableRouteContainerComponent,\r\n        data: {\r\n          requiredPolicy: 'AbpTenantManagement.Tenants',\r\n          replaceableComponent: {\r\n            key: 'TenantManagement.TenantsComponent',\r\n            defaultComponent: TenantsComponent,\r\n          } as ReplaceableComponents.RouteData<TenantsComponent>,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class TenantManagementRoutingModule {}\r\n","import { CoreModule } from '@abp/ng.core';\r\nimport { ThemeSharedModule } from '@abp/ng.theme.shared';\r\nimport { NgModule, Provider } from '@angular/core';\r\nimport { NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { NgxsModule } from '@ngxs/store';\r\nimport { TenantsComponent } from './components/tenants/tenants.component';\r\nimport { TenantManagementState } from './states/tenant-management.state';\r\nimport { TenantManagementRoutingModule } from './tenant-management-routing.module';\r\nimport { FeatureManagementModule } from '@abp/ng.feature-management';\r\nimport { NgxValidateCoreModule } from '@ngx-validate/core';\r\n\r\n@NgModule({\r\n  declarations: [TenantsComponent],\r\n  imports: [\r\n    TenantManagementRoutingModule,\r\n    NgxsModule.forFeature([TenantManagementState]),\r\n    NgxValidateCoreModule,\r\n    CoreModule,\r\n    ThemeSharedModule,\r\n    NgbDropdownModule,\r\n    FeatureManagementModule,\r\n  ],\r\n})\r\nexport class TenantManagementModule {}\r\n","import { ABP } from '@abp/ng.core';\r\n\r\nexport namespace TenantManagement {\r\n  export interface State {\r\n    result: Response;\r\n    selectedItem: Item;\r\n  }\r\n\r\n  export type Response = ABP.PagedResponse<Item>;\r\n\r\n  export interface Item {\r\n    id: string;\r\n    name: string;\r\n  }\r\n\r\n  export interface AddRequest {\r\n    adminEmailAddress: string;\r\n    adminPassword: string;\r\n    name: string;\r\n  }\r\n\r\n  export interface UpdateRequest {\r\n    id: string;\r\n    name: string;\r\n  }\r\n\r\n  export interface DefaultConnectionStringRequest {\r\n    id: string;\r\n    defaultConnectionString: string;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Store } from '@ngxs/store';\r\nimport { TenantManagementState } from '../states/tenant-management.state';\r\nimport { ABP } from '@abp/ng.core';\r\nimport { GetTenants, GetTenantById, CreateTenant, UpdateTenant, DeleteTenant } from '../actions';\r\nimport { TenantManagement } from '../models';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TenantManagementStateService {\r\n  constructor(private store: Store) {}\r\n\r\n  get() {\r\n    return this.store.selectSnapshot(TenantManagementState.get);\r\n  }\r\n\r\n  getTenantsTotalCount() {\r\n    return this.store.selectSnapshot(TenantManagementState.getTenantsTotalCount);\r\n  }\r\n\r\n  dispatchGetTenants(...args: ConstructorParameters<typeof GetTenants>) {\r\n    return this.store.dispatch(new GetTenants(...args));\r\n  }\r\n\r\n  dispatchGetTenantById(...args: ConstructorParameters<typeof GetTenantById>) {\r\n    return this.store.dispatch(new GetTenantById(...args));\r\n  }\r\n\r\n  dispatchCreateTenant(...args: ConstructorParameters<typeof CreateTenant>) {\r\n    return this.store.dispatch(new CreateTenant(...args));\r\n  }\r\n\r\n  dispatchUpdateTenant(...args: ConstructorParameters<typeof UpdateTenant>) {\r\n    return this.store.dispatch(new UpdateTenant(...args));\r\n  }\r\n\r\n  dispatchDeleteTenant(...args: ConstructorParameters<typeof DeleteTenant>) {\r\n    return this.store.dispatch(new DeleteTenant(...args));\r\n  }\r\n}\r\n"],"names":["tslib_1.__decorate"],"mappings":"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"}