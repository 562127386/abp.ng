{"version":3,"file":"abp-ng.tenant-management.js","sources":["../../../packages/tenant-management/src/lib/actions/tenant-management.actions.ts","../../../packages/tenant-management/src/lib/services/tenant-management.service.ts","../../../packages/tenant-management/src/lib/states/tenant-management.state.ts","../../../packages/tenant-management/src/lib/components/tenants/tenants.component.ts","../../../packages/tenant-management/src/lib/tenant-management-routing.module.ts","../../../packages/tenant-management/src/lib/tenant-management.module.ts","../../../packages/tenant-management/src/lib/services/tenant-management-state.service.ts","../../../packages/tenant-management/src/abp-ng.tenant-management.ts"],"sourcesContent":["import { TenantManagement } from '../models/tenant-management';\r\nimport { ABP } from '@abp/ng.core';\r\n\r\nexport class GetTenants {\r\n  static readonly type = '[TenantManagement] Get Tenant';\r\n  constructor(public payload?: ABP.PageQueryParams) {}\r\n}\r\n\r\nexport class GetTenantById {\r\n  static readonly type = '[TenantManagement] Get Tenant By Id';\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class CreateTenant {\r\n  static readonly type = '[TenantManagement] Create Tenant';\r\n  constructor(public payload: TenantManagement.AddRequest) {}\r\n}\r\n\r\nexport class UpdateTenant {\r\n  static readonly type = '[TenantManagement] Update Tenant';\r\n  constructor(public payload: TenantManagement.UpdateRequest) {}\r\n}\r\n\r\nexport class DeleteTenant {\r\n  static readonly type = '[TenantManagement] Delete Tenant';\r\n  constructor(public payload: string) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { RestService, Rest, ABP } from '@abp/ng.core';\r\nimport { TenantManagement } from '../models/tenant-management';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TenantManagementService {\r\n  apiName = 'AbpTenantManagement';\r\n\r\n  constructor(private rest: RestService) {}\r\n\r\n  getTenant(params = {} as ABP.PageQueryParams): Observable<TenantManagement.Response> {\r\n    const request: Rest.Request<null> = {\r\n      method: 'GET',\r\n      url: '/api/multi-tenancy/tenants',\r\n      params,\r\n    };\r\n\r\n    return this.rest.request<null, TenantManagement.Response>(request, { apiName: this.apiName });\r\n  }\r\n\r\n  getTenantById(id: string): Observable<ABP.BasicItem> {\r\n    const request: Rest.Request<null> = {\r\n      method: 'GET',\r\n      url: `/api/multi-tenancy/tenants/${id}`,\r\n    };\r\n\r\n    return this.rest.request<null, ABP.BasicItem>(request, { apiName: this.apiName });\r\n  }\r\n\r\n  deleteTenant(id: string): Observable<null> {\r\n    const request: Rest.Request<null> = {\r\n      method: 'DELETE',\r\n      url: `/api/multi-tenancy/tenants/${id}`,\r\n    };\r\n\r\n    return this.rest.request<null, null>(request, { apiName: this.apiName });\r\n  }\r\n\r\n  createTenant(body: TenantManagement.AddRequest): Observable<ABP.BasicItem> {\r\n    const request: Rest.Request<TenantManagement.AddRequest> = {\r\n      method: 'POST',\r\n      url: '/api/multi-tenancy/tenants',\r\n      body,\r\n    };\r\n\r\n    return this.rest.request<TenantManagement.AddRequest, ABP.BasicItem>(request, {\r\n      apiName: this.apiName,\r\n    });\r\n  }\r\n\r\n  updateTenant(body: TenantManagement.UpdateRequest): Observable<ABP.BasicItem> {\r\n    const url = `/api/multi-tenancy/tenants/${body.id}`;\r\n    delete body.id;\r\n\r\n    const request: Rest.Request<TenantManagement.UpdateRequest> = {\r\n      method: 'PUT',\r\n      url,\r\n      body,\r\n    };\r\n\r\n    return this.rest.request<TenantManagement.UpdateRequest, ABP.BasicItem>(request, {\r\n      apiName: this.apiName,\r\n    });\r\n  }\r\n\r\n  getDefaultConnectionString(id: string): Observable<string> {\r\n    const url = `/api/multi-tenancy/tenants/${id}/default-connection-string`;\r\n\r\n    const request: Rest.Request<TenantManagement.DefaultConnectionStringRequest> = {\r\n      method: 'GET',\r\n      responseType: Rest.ResponseType.Text,\r\n      url,\r\n    };\r\n    return this.rest.request<TenantManagement.DefaultConnectionStringRequest, string>(request, {\r\n      apiName: this.apiName,\r\n    });\r\n  }\r\n\r\n  updateDefaultConnectionString(\r\n    payload: TenantManagement.DefaultConnectionStringRequest,\r\n  ): Observable<any> {\r\n    const url = `/api/multi-tenancy/tenants/${payload.id}/default-connection-string`;\r\n\r\n    const request: Rest.Request<TenantManagement.DefaultConnectionStringRequest> = {\r\n      method: 'PUT',\r\n      url,\r\n      params: { defaultConnectionString: payload.defaultConnectionString },\r\n    };\r\n    return this.rest.request<TenantManagement.DefaultConnectionStringRequest, any>(request, {\r\n      apiName: this.apiName,\r\n    });\r\n  }\r\n\r\n  deleteDefaultConnectionString(id: string): Observable<string> {\r\n    const url = `/api/multi-tenancy/tenants/${id}/default-connection-string`;\r\n\r\n    const request: Rest.Request<TenantManagement.DefaultConnectionStringRequest> = {\r\n      method: 'DELETE',\r\n      url,\r\n    };\r\n    return this.rest.request<TenantManagement.DefaultConnectionStringRequest, any>(request, {\r\n      apiName: this.apiName,\r\n    });\r\n  }\r\n}\r\n","import { ABP } from '@abp/ng.core';\r\nimport { Action, Selector, State, StateContext } from '@ngxs/store';\r\nimport { tap } from 'rxjs/operators';\r\nimport {\r\n  CreateTenant,\r\n  DeleteTenant,\r\n  GetTenantById,\r\n  GetTenants,\r\n  UpdateTenant,\r\n} from '../actions/tenant-management.actions';\r\nimport { TenantManagement } from '../models/tenant-management';\r\nimport { TenantManagementService } from '../services/tenant-management.service';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@State<TenantManagement.State>({\r\n  name: 'TenantManagementState',\r\n  defaults: { result: {}, selectedItem: {} } as TenantManagement.State,\r\n})\r\n@Injectable()\r\nexport class TenantManagementState {\r\n  @Selector()\r\n  static get({ result }: TenantManagement.State): ABP.BasicItem[] {\r\n    return result.items || [];\r\n  }\r\n\r\n  @Selector()\r\n  static getTenantsTotalCount({ result }: TenantManagement.State): number {\r\n    return result.totalCount;\r\n  }\r\n\r\n  constructor(private tenantManagementService: TenantManagementService) {}\r\n\r\n  @Action(GetTenants)\r\n  get({ patchState }: StateContext<TenantManagement.State>, { payload }: GetTenants) {\r\n    return this.tenantManagementService.getTenant(payload).pipe(\r\n      tap(result =>\r\n        patchState({\r\n          result,\r\n        }),\r\n      ),\r\n    );\r\n  }\r\n\r\n  @Action(GetTenantById)\r\n  getById({ patchState }: StateContext<TenantManagement.State>, { payload }: GetTenantById) {\r\n    return this.tenantManagementService.getTenantById(payload).pipe(\r\n      tap(selectedItem =>\r\n        patchState({\r\n          selectedItem,\r\n        }),\r\n      ),\r\n    );\r\n  }\r\n\r\n  @Action(DeleteTenant)\r\n  delete(_, { payload }: DeleteTenant) {\r\n    return this.tenantManagementService.deleteTenant(payload);\r\n  }\r\n\r\n  @Action(CreateTenant)\r\n  add(_, { payload }: CreateTenant) {\r\n    return this.tenantManagementService.createTenant(payload);\r\n  }\r\n\r\n  @Action(UpdateTenant)\r\n  update({ getState }: StateContext<TenantManagement.State>, { payload }: UpdateTenant) {\r\n    return this.tenantManagementService.updateTenant({ ...getState().selectedItem, ...payload });\r\n  }\r\n}\r\n","import { ABP, ListService } from '@abp/ng.core';\r\nimport { eFeatureManagementComponents } from '@abp/ng.feature-management';\r\nimport { Confirmation, ConfirmationService, getPasswordValidators } from '@abp/ng.theme.shared';\r\nimport { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Select, Store } from '@ngxs/store';\r\nimport { Observable } from 'rxjs';\r\nimport { finalize, pluck, switchMap, take } from 'rxjs/operators';\r\nimport {\r\n  CreateTenant,\r\n  DeleteTenant,\r\n  GetTenantById,\r\n  GetTenants,\r\n  UpdateTenant,\r\n} from '../../actions/tenant-management.actions';\r\nimport { TenantManagementService } from '../../services/tenant-management.service';\r\nimport { TenantManagementState } from '../../states/tenant-management.state';\r\n\r\ninterface SelectedModalContent {\r\n  type: 'saveConnStr' | 'saveTenant';\r\n  title: string;\r\n  template: TemplateRef<any>;\r\n}\r\n\r\n@Component({\r\n  selector: 'abp-tenants',\r\n  templateUrl: './tenants.component.html',\r\n  providers: [ListService],\r\n})\r\nexport class TenantsComponent implements OnInit {\r\n  @Select(TenantManagementState.get)\r\n  data$: Observable<ABP.BasicItem[]>;\r\n\r\n  @Select(TenantManagementState.getTenantsTotalCount)\r\n  totalCount$: Observable<number>;\r\n\r\n  selected: ABP.BasicItem;\r\n\r\n  tenantForm: FormGroup;\r\n\r\n  defaultConnectionStringForm: FormGroup;\r\n\r\n  defaultConnectionString: string;\r\n\r\n  isModalVisible: boolean;\r\n\r\n  selectedModalContent = {} as SelectedModalContent;\r\n\r\n  visibleFeatures = false;\r\n\r\n  providerKey: string;\r\n\r\n  _useSharedDatabase: boolean;\r\n\r\n  modalBusy = false;\r\n\r\n  featureManagementKey = eFeatureManagementComponents.FeatureManagement;\r\n\r\n  get hasSelectedTenant(): boolean {\r\n    return Boolean(this.selected.id);\r\n  }\r\n\r\n  get useSharedDatabase(): boolean {\r\n    return this.defaultConnectionStringForm.get('useSharedDatabase').value;\r\n  }\r\n\r\n  get connectionString(): string {\r\n    return this.defaultConnectionStringForm.get('defaultConnectionString').value;\r\n  }\r\n\r\n  @ViewChild('tenantModalTemplate')\r\n  tenantModalTemplate: TemplateRef<any>;\r\n\r\n  @ViewChild('connectionStringModalTemplate')\r\n  connectionStringModalTemplate: TemplateRef<any>;\r\n\r\n  get isDisabledSaveButton(): boolean {\r\n    if (!this.selectedModalContent) return false;\r\n\r\n    if (\r\n      this.selectedModalContent.type === 'saveConnStr' &&\r\n      this.defaultConnectionStringForm &&\r\n      this.defaultConnectionStringForm.invalid\r\n    ) {\r\n      return true;\r\n    } else if (\r\n      this.selectedModalContent.type === 'saveTenant' &&\r\n      this.tenantForm &&\r\n      this.tenantForm.invalid\r\n    ) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  onVisibleFeaturesChange = (value: boolean) => {\r\n    this.visibleFeatures = value;\r\n  };\r\n\r\n  constructor(\r\n    public readonly list: ListService,\r\n    private confirmationService: ConfirmationService,\r\n    private tenantService: TenantManagementService,\r\n    private fb: FormBuilder,\r\n    private store: Store,\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.hookToQuery();\r\n  }\r\n\r\n  private createTenantForm() {\r\n    const tenantForm = this.fb.group({\r\n      name: [this.selected.name || '', [Validators.required, Validators.maxLength(256)]],\r\n      adminEmailAddress: [null, [Validators.required, Validators.maxLength(256), Validators.email]],\r\n      adminPassword: [null, [Validators.required, ...getPasswordValidators(this.store)]],\r\n    });\r\n\r\n    if (this.hasSelectedTenant) {\r\n      tenantForm.removeControl('adminEmailAddress');\r\n      tenantForm.removeControl('adminPassword');\r\n    }\r\n\r\n    this.tenantForm = tenantForm;\r\n  }\r\n\r\n  private createDefaultConnectionStringForm() {\r\n    this.defaultConnectionStringForm = this.fb.group({\r\n      useSharedDatabase: this._useSharedDatabase,\r\n      defaultConnectionString: [this.defaultConnectionString || ''],\r\n    });\r\n  }\r\n\r\n  openModal(title: string, template: TemplateRef<any>, type: 'saveConnStr' | 'saveTenant') {\r\n    this.selectedModalContent = {\r\n      title,\r\n      template,\r\n      type,\r\n    };\r\n\r\n    this.isModalVisible = true;\r\n  }\r\n\r\n  onEditConnectionString(id: string) {\r\n    this.store\r\n      .dispatch(new GetTenantById(id))\r\n      .pipe(\r\n        pluck('TenantManagementState', 'selectedItem'),\r\n        switchMap(selected => {\r\n          this.selected = selected;\r\n          return this.tenantService.getDefaultConnectionString(id);\r\n        }),\r\n      )\r\n      .subscribe(fetchedConnectionString => {\r\n        this._useSharedDatabase = fetchedConnectionString ? false : true;\r\n        this.defaultConnectionString = fetchedConnectionString ? fetchedConnectionString : '';\r\n        this.createDefaultConnectionStringForm();\r\n        this.openModal(\r\n          'AbpTenantManagement::ConnectionStrings',\r\n          this.connectionStringModalTemplate,\r\n          'saveConnStr',\r\n        );\r\n      });\r\n  }\r\n\r\n  addTenant() {\r\n    this.selected = {} as ABP.BasicItem;\r\n    this.createTenantForm();\r\n    this.openModal('AbpTenantManagement::NewTenant', this.tenantModalTemplate, 'saveTenant');\r\n  }\r\n\r\n  editTenant(id: string) {\r\n    this.store\r\n      .dispatch(new GetTenantById(id))\r\n      .pipe(pluck('TenantManagementState', 'selectedItem'))\r\n      .subscribe(selected => {\r\n        this.selected = selected;\r\n        this.createTenantForm();\r\n        this.openModal('AbpTenantManagement::Edit', this.tenantModalTemplate, 'saveTenant');\r\n      });\r\n  }\r\n\r\n  save() {\r\n    const { type } = this.selectedModalContent;\r\n    if (!type) return;\r\n    if (type === 'saveTenant') this.saveTenant();\r\n    else if (type === 'saveConnStr') this.saveConnectionString();\r\n  }\r\n\r\n  saveConnectionString() {\r\n    if (this.modalBusy) return;\r\n\r\n    this.modalBusy = true;\r\n    if (this.useSharedDatabase || (!this.useSharedDatabase && !this.connectionString)) {\r\n      this.tenantService\r\n        .deleteDefaultConnectionString(this.selected.id)\r\n        .pipe(\r\n          take(1),\r\n          finalize(() => (this.modalBusy = false)),\r\n        )\r\n        .subscribe(() => {\r\n          this.isModalVisible = false;\r\n        });\r\n    } else {\r\n      this.tenantService\r\n        .updateDefaultConnectionString({\r\n          id: this.selected.id,\r\n          defaultConnectionString: this.connectionString,\r\n        })\r\n        .pipe(\r\n          take(1),\r\n          finalize(() => (this.modalBusy = false)),\r\n        )\r\n        .subscribe(() => {\r\n          this.isModalVisible = false;\r\n        });\r\n    }\r\n  }\r\n\r\n  saveTenant() {\r\n    if (!this.tenantForm.valid || this.modalBusy) return;\r\n    this.modalBusy = true;\r\n\r\n    this.store\r\n      .dispatch(\r\n        this.selected.id\r\n          ? new UpdateTenant({ ...this.selected, ...this.tenantForm.value, id: this.selected.id })\r\n          : new CreateTenant(this.tenantForm.value),\r\n      )\r\n      .pipe(finalize(() => (this.modalBusy = false)))\r\n      .subscribe(() => {\r\n        this.isModalVisible = false;\r\n        this.list.get();\r\n      });\r\n  }\r\n\r\n  delete(id: string, name: string) {\r\n    this.confirmationService\r\n      .warn(\r\n        'AbpTenantManagement::TenantDeletionConfirmationMessage',\r\n        'AbpTenantManagement::AreYouSure',\r\n        {\r\n          messageLocalizationParams: [name],\r\n        },\r\n      )\r\n      .subscribe((status: Confirmation.Status) => {\r\n        if (status === Confirmation.Status.confirm) {\r\n          this.store.dispatch(new DeleteTenant(id)).subscribe(() => this.list.get());\r\n        }\r\n      });\r\n  }\r\n\r\n  hookToQuery() {\r\n    this.list.hookToQuery(query => this.store.dispatch(new GetTenants(query))).subscribe();\r\n  }\r\n\r\n  onSharedDatabaseChange(value: boolean) {\r\n    if (!value) {\r\n      setTimeout(() => {\r\n        const defaultConnectionString = document.getElementById(\r\n          'defaultConnectionString',\r\n        ) as HTMLInputElement;\r\n        if (defaultConnectionString) {\r\n          defaultConnectionString.focus();\r\n        }\r\n      }, 0);\r\n    }\r\n  }\r\n\r\n  openFeaturesModal(providerKey: string) {\r\n    this.providerKey = providerKey;\r\n    setTimeout(() => {\r\n      this.visibleFeatures = true;\r\n    }, 0);\r\n  }\r\n\r\n  sort(data) {\r\n    const { prop, dir } = data.sorts[0];\r\n    this.list.sortKey = prop;\r\n    this.list.sortOrder = dir;\r\n  }\r\n}\r\n","import {\r\n  AuthGuard,\r\n  DynamicLayoutComponent,\r\n  PermissionGuard,\r\n  ReplaceableComponents,\r\n  ReplaceableRouteContainerComponent,\r\n} from '@abp/ng.core';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { TenantsComponent } from './components/tenants/tenants.component';\r\nimport { eTenantManagementComponents } from './enums/components';\r\n\r\nconst routes: Routes = [\r\n  { path: '', redirectTo: 'tenants', pathMatch: 'full' },\r\n  {\r\n    path: '',\r\n    component: DynamicLayoutComponent,\r\n    canActivate: [AuthGuard, PermissionGuard],\r\n    children: [\r\n      {\r\n        path: 'tenants',\r\n        component: ReplaceableRouteContainerComponent,\r\n        data: {\r\n          requiredPolicy: 'AbpTenantManagement.Tenants',\r\n          replaceableComponent: {\r\n            key: eTenantManagementComponents.Tenants,\r\n            defaultComponent: TenantsComponent,\r\n          } as ReplaceableComponents.RouteData<TenantsComponent>,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class TenantManagementRoutingModule {}\r\n","import { CoreModule, LazyModuleFactory } from '@abp/ng.core';\r\nimport { FeatureManagementModule } from '@abp/ng.feature-management';\r\nimport { ThemeSharedModule } from '@abp/ng.theme.shared';\r\nimport { ModuleWithProviders, NgModule, NgModuleFactory } from '@angular/core';\r\nimport { NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { NgxValidateCoreModule } from '@ngx-validate/core';\r\nimport { NgxsModule } from '@ngxs/store';\r\nimport { TenantsComponent } from './components/tenants/tenants.component';\r\nimport { TenantManagementState } from './states/tenant-management.state';\r\nimport { TenantManagementRoutingModule } from './tenant-management-routing.module';\r\n\r\n@NgModule({\r\n  declarations: [TenantsComponent],\r\n  exports: [TenantsComponent],\r\n  imports: [\r\n    TenantManagementRoutingModule,\r\n    NgxsModule.forFeature([TenantManagementState]),\r\n    NgxValidateCoreModule,\r\n    CoreModule,\r\n    ThemeSharedModule,\r\n    NgbDropdownModule,\r\n    FeatureManagementModule,\r\n  ],\r\n})\r\nexport class TenantManagementModule {\r\n  static forChild(): ModuleWithProviders<TenantManagementModule> {\r\n    return {\r\n      ngModule: TenantManagementModule,\r\n      providers: [],\r\n    };\r\n  }\r\n\r\n  static forLazy(): NgModuleFactory<TenantManagementModule> {\r\n    return new LazyModuleFactory(TenantManagementModule.forChild());\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Store } from '@ngxs/store';\r\nimport { TenantManagementState } from '../states/tenant-management.state';\r\nimport { ABP } from '@abp/ng.core';\r\nimport { GetTenants, GetTenantById, CreateTenant, UpdateTenant, DeleteTenant } from '../actions';\r\nimport { TenantManagement } from '../models';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TenantManagementStateService {\r\n  constructor(private store: Store) {}\r\n\r\n  get() {\r\n    return this.store.selectSnapshot(TenantManagementState.get);\r\n  }\r\n\r\n  getTenantsTotalCount() {\r\n    return this.store.selectSnapshot(TenantManagementState.getTenantsTotalCount);\r\n  }\r\n\r\n  dispatchGetTenants(...args: ConstructorParameters<typeof GetTenants>) {\r\n    return this.store.dispatch(new GetTenants(...args));\r\n  }\r\n\r\n  dispatchGetTenantById(...args: ConstructorParameters<typeof GetTenantById>) {\r\n    return this.store.dispatch(new GetTenantById(...args));\r\n  }\r\n\r\n  dispatchCreateTenant(...args: ConstructorParameters<typeof CreateTenant>) {\r\n    return this.store.dispatch(new CreateTenant(...args));\r\n  }\r\n\r\n  dispatchUpdateTenant(...args: ConstructorParameters<typeof UpdateTenant>) {\r\n    return this.store.dispatch(new UpdateTenant(...args));\r\n  }\r\n\r\n  dispatchDeleteTenant(...args: ConstructorParameters<typeof DeleteTenant>) {\r\n    return this.store.dispatch(new DeleteTenant(...args));\r\n  }\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {CreateTenant as ɵf,DeleteTenant as ɵh,GetTenantById as ɵe,GetTenants as ɵd,UpdateTenant as ɵg} from './lib/actions/tenant-management.actions';\nexport {TenantsComponent as ɵa} from './lib/components/tenants/tenants.component';\nexport {eTenantManagementComponents as ɵk} from './lib/enums/components';\nexport {TenantManagement as ɵi} from './lib/models/tenant-management';\nexport {TenantManagementService as ɵc} from './lib/services/tenant-management.service';\nexport {TenantManagementState as ɵb} from './lib/states/tenant-management.state';\nexport {TenantManagementRoutingModule as ɵj} from './lib/tenant-management-routing.module';"],"names":[],"mappings":"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"}