{"version":3,"sources":["C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/feature-management/src/lib/components/feature-management/feature-management.component.html","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/tenant-management/src/lib/components/tenants/tenants.component.html","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/feature-management/src/lib/actions/feature-management.actions.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/feature-management/src/lib/components/feature-management/feature-management.component.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/feature-management/src/lib/feature-management.module.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/feature-management/src/lib/services/feature-management.service.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/feature-management/src/lib/states/feature-management.state.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/tenant-management/src/lib/actions/tenant-management.actions.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/tenant-management/src/lib/components/tenants/tenants.component.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/tenant-management/src/lib/services/tenant-management-state.service.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/tenant-management/src/lib/services/tenant-management.service.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/tenant-management/src/lib/states/tenant-management.state.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/tenant-management/src/lib/tenant-management-routing.module.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/tenant-management/src/lib/tenant-management.module.ts","src/app/lazy-libs/tenant-management-wrapper.module.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<abp-modal size=\\\"md\\\" [(visible)]=\\\"visible\\\" [busy]=\\\"modalBusy\\\">\\r\\n  <ng-template #abpHeader>\\r\\n    <h3>{{ 'AbpFeatureManagement::Features' | abpLocalization }}</h3>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpBody>\\r\\n    <form *ngIf=\\\"form\\\" (ngSubmit)=\\\"save()\\\" [formGroup]=\\\"form\\\" validateOnSubmit>\\r\\n      <div\\r\\n        class=\\\"row my-3\\\"\\r\\n        *ngFor=\\\"let feature of features$ | async; let i = index\\\"\\r\\n        [ngSwitch]=\\\"feature.valueType.name\\\"\\r\\n      >\\r\\n        <div class=\\\"col-4\\\">{{ feature.name }}</div>\\r\\n        <div class=\\\"col-8\\\" *ngSwitchCase=\\\"'ToggleStringValueType'\\\">\\r\\n          <input type=\\\"checkbox\\\" name=\\\"feature.name\\\" [formControlName]=\\\"i\\\" />\\r\\n        </div>\\r\\n        <div class=\\\"col-8\\\" *ngSwitchCase=\\\"'FreeTextStringValueType'\\\">\\r\\n          <input type=\\\"text\\\" name=\\\"feature.name\\\" [formControlName]=\\\"i\\\" />\\r\\n        </div>\\r\\n      </div>\\r\\n      <div *ngIf=\\\"!(features$ | async)?.length\\\">\\r\\n        {{ 'AbpFeatureManagement::NoFeatureFoundMessage' | abpLocalization }}\\r\\n      </div>\\r\\n    </form>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpFooter>\\r\\n    <ng-container *ngIf=\\\"(features$ | async)?.length\\\">\\r\\n      <button #abpClose type=\\\"button\\\" class=\\\"btn btn-secondary\\\">\\r\\n        {{ 'AbpFeatureManagement::Cancel' | abpLocalization }}\\r\\n      </button>\\r\\n      <abp-button iconClass=\\\"fa fa-check\\\" [disabled]=\\\"form?.invalid || modalBusy\\\" (click)=\\\"save()\\\">\\r\\n        {{ 'AbpFeatureManagement::Save' | abpLocalization }}\\r\\n      </abp-button>\\r\\n    </ng-container>\\r\\n  </ng-template>\\r\\n</abp-modal>\\r\\n\"","export default \"<div id=\\\"wrapper\\\" class=\\\"card\\\">\\r\\n  <div class=\\\"card-header\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col col-md-6\\\">\\r\\n        <h5 class=\\\"card-title\\\">{{ 'AbpTenantManagement::Tenants' | abpLocalization }}</h5>\\r\\n      </div>\\r\\n      <div class=\\\"text-right col col-md-6\\\">\\r\\n        <button\\r\\n          *abpPermission=\\\"'AbpTenantManagement.Tenants.Create'\\\"\\r\\n          id=\\\"create-tenants\\\"\\r\\n          class=\\\"btn btn-primary\\\"\\r\\n          type=\\\"button\\\"\\r\\n          (click)=\\\"addTenant()\\\"\\r\\n        >\\r\\n          <i class=\\\"fa fa-plus mr-1\\\"></i>\\r\\n          <span>{{ 'AbpTenantManagement::NewTenant' | abpLocalization }}</span>\\r\\n        </button>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\\"card-body\\\">\\r\\n    <div id=\\\"data-tables-table-filter\\\" class=\\\"data-tables-filter\\\">\\r\\n      <label\\r\\n        ><input\\r\\n          type=\\\"search\\\"\\r\\n          class=\\\"form-control form-control-sm\\\"\\r\\n          [placeholder]=\\\"'AbpUi::PagerSearch' | abpLocalization\\\"\\r\\n          (input.debounce)=\\\"onSearch($event.target.value)\\\"\\r\\n      /></label>\\r\\n    </div>\\r\\n    <p-table\\r\\n      *ngIf=\\\"[150, 0] as columnWidths\\\"\\r\\n      [value]=\\\"data$ | async\\\"\\r\\n      [abpTableSort]=\\\"{ key: sortKey, order: sortOrder }\\\"\\r\\n      [lazy]=\\\"true\\\"\\r\\n      [lazyLoadOnInit]=\\\"false\\\"\\r\\n      [paginator]=\\\"true\\\"\\r\\n      [rows]=\\\"10\\\"\\r\\n      [totalRecords]=\\\"totalCount$ | async\\\"\\r\\n      [loading]=\\\"loading\\\"\\r\\n      [resizableColumns]=\\\"true\\\"\\r\\n      [scrollable]=\\\"true\\\"\\r\\n      (onLazyLoad)=\\\"onPageChange($event)\\\"\\r\\n    >\\r\\n      <ng-template pTemplate=\\\"colgroup\\\">\\r\\n        <colgroup>\\r\\n          <col *ngFor=\\\"let width of columnWidths\\\" [ngStyle]=\\\"{ 'width.px': width || undefined }\\\" />\\r\\n        </colgroup>\\r\\n      </ng-template>\\r\\n      <ng-template pTemplate=\\\"emptymessage\\\" let-columns>\\r\\n        <tr\\r\\n          abp-table-empty-message\\r\\n          [attr.colspan]=\\\"columnWidths.length\\\"\\r\\n          localizationResource=\\\"AbpTenantManagement\\\"\\r\\n          localizationProp=\\\"NoDataAvailableInDatatable\\\"\\r\\n        ></tr>\\r\\n      </ng-template>\\r\\n      <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n        <tr>\\r\\n          <th>{{ 'AbpTenantManagement::Actions' | abpLocalization }}</th>\\r\\n          <th pResizableColumn (click)=\\\"sortOrderIcon.sort('name')\\\">\\r\\n            {{ 'AbpTenantManagement::TenantName' | abpLocalization }}\\r\\n            <abp-sort-order-icon\\r\\n              #sortOrderIcon\\r\\n              sortKey=\\\"name\\\"\\r\\n              [(selectedSortKey)]=\\\"sortKey\\\"\\r\\n              [(order)]=\\\"sortOrder\\\"\\r\\n            >\\r\\n            </abp-sort-order-icon>\\r\\n          </th>\\r\\n        </tr>\\r\\n      </ng-template>\\r\\n      <ng-template pTemplate=\\\"body\\\" let-data>\\r\\n        <tr>\\r\\n          <td class=\\\"text-center\\\">\\r\\n            <div ngbDropdown container=\\\"body\\\" class=\\\"d-inline-block\\\">\\r\\n              <button\\r\\n                class=\\\"btn btn-primary btn-sm dropdown-toggle\\\"\\r\\n                data-toggle=\\\"dropdown\\\"\\r\\n                aria-haspopup=\\\"true\\\"\\r\\n                ngbDropdownToggle\\r\\n              >\\r\\n                <i class=\\\"fa fa-cog mr-1\\\"></i>{{ 'AbpTenantManagement::Actions' | abpLocalization }}\\r\\n              </button>\\r\\n              <div ngbDropdownMenu>\\r\\n                <button\\r\\n                  *abpPermission=\\\"'AbpTenantManagement.Tenants.Update'\\\"\\r\\n                  ngbDropdownItem\\r\\n                  (click)=\\\"editTenant(data.id)\\\"\\r\\n                >\\r\\n                  {{ 'AbpTenantManagement::Edit' | abpLocalization }}\\r\\n                </button>\\r\\n                <button\\r\\n                  *abpPermission=\\\"'AbpTenantManagement.Tenants.ManageConnectionStrings'\\\"\\r\\n                  ngbDropdownItem\\r\\n                  (click)=\\\"onEditConnectionString(data.id)\\\"\\r\\n                >\\r\\n                  {{ 'AbpTenantManagement::Permission:ManageConnectionStrings' | abpLocalization }}\\r\\n                </button>\\r\\n                <button\\r\\n                  *abpPermission=\\\"'AbpTenantManagement.Tenants.ManageFeatures'\\\"\\r\\n                  ngbDropdownItem\\r\\n                  (click)=\\\"providerKey = data.id; visibleFeatures = true\\\"\\r\\n                >\\r\\n                  {{ 'AbpTenantManagement::Permission:ManageFeatures' | abpLocalization }}\\r\\n                </button>\\r\\n                <button\\r\\n                  *abpPermission=\\\"'AbpTenantManagement.Tenants.Delete'\\\"\\r\\n                  ngbDropdownItem\\r\\n                  (click)=\\\"delete(data.id, data.name)\\\"\\r\\n                >\\r\\n                  {{ 'AbpTenantManagement::Delete' | abpLocalization }}\\r\\n                </button>\\r\\n              </div>\\r\\n            </div>\\r\\n          </td>\\r\\n          <td>{{ data.name }}</td>\\r\\n        </tr>\\r\\n      </ng-template>\\r\\n    </p-table>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<abp-modal size=\\\"md\\\" [(visible)]=\\\"isModalVisible\\\" [busy]=\\\"modalBusy\\\">\\r\\n  <ng-template #abpHeader>\\r\\n    <h3>{{ selectedModalContent.title | abpLocalization }}</h3>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpBody>\\r\\n    <ng-container *ngTemplateOutlet=\\\"selectedModalContent?.template\\\"></ng-container>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpFooter>\\r\\n    <button #abpClose type=\\\"button\\\" class=\\\"btn btn-secondary\\\">\\r\\n      {{ 'AbpTenantManagement::Cancel' | abpLocalization }}\\r\\n    </button>\\r\\n    <abp-button iconClass=\\\"fa fa-check\\\" (click)=\\\"save()\\\" [disabled]=\\\"isDisabledSaveButton\\\">{{\\r\\n      'AbpIdentity::Save' | abpLocalization\\r\\n    }}</abp-button>\\r\\n  </ng-template>\\r\\n</abp-modal>\\r\\n\\r\\n<ng-template #tenantModalTemplate>\\r\\n  <form [formGroup]=\\\"tenantForm\\\" (ngSubmit)=\\\"save()\\\" validateOnSubmit>\\r\\n    <div class=\\\"mt-2\\\">\\r\\n      <div class=\\\"form-group\\\">\\r\\n        <label for=\\\"name\\\">{{ 'AbpTenantManagement::TenantName' | abpLocalization }}</label>\\r\\n        <input type=\\\"text\\\" id=\\\"name\\\" class=\\\"form-control\\\" formControlName=\\\"name\\\" autofocus />\\r\\n      </div>\\r\\n    </div>\\r\\n  </form>\\r\\n</ng-template>\\r\\n\\r\\n<ng-template #connectionStringModalTemplate>\\r\\n  <form [formGroup]=\\\"defaultConnectionStringForm\\\" (ngSubmit)=\\\"save()\\\" validateOnSubmit>\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <div class=\\\"custom-checkbox custom-control mb-2\\\">\\r\\n        <input\\r\\n          id=\\\"useSharedDatabase\\\"\\r\\n          type=\\\"checkbox\\\"\\r\\n          class=\\\"custom-control-input\\\"\\r\\n          formControlName=\\\"useSharedDatabase\\\"\\r\\n          autofocus\\r\\n          (ngModelChange)=\\\"onSharedDatabaseChange($event)\\\"\\r\\n        />\\r\\n        <label for=\\\"useSharedDatabase\\\" class=\\\"custom-control-label\\\">{{\\r\\n          'AbpTenantManagement::DisplayName:UseSharedDatabase' | abpLocalization\\r\\n        }}</label>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\" *ngIf=\\\"!useSharedDatabase\\\">\\r\\n      <label for=\\\"defaultConnectionString\\\">{{\\r\\n        'AbpTenantManagement::DisplayName:DefaultConnectionString' | abpLocalization\\r\\n      }}</label>\\r\\n      <input\\r\\n        type=\\\"text\\\"\\r\\n        id=\\\"defaultConnectionString\\\"\\r\\n        class=\\\"form-control\\\"\\r\\n        formControlName=\\\"defaultConnectionString\\\"\\r\\n      />\\r\\n    </div>\\r\\n  </form>\\r\\n</ng-template>\\r\\n\\r\\n<abp-feature-management\\r\\n  *abpReplaceableTemplate=\\\"{\\r\\n    inputs: {\\r\\n      providerName: { value: 'T' },\\r\\n      providerKey: { value: providerKey },\\r\\n      visible: { value: visibleFeatures, twoWay: true }\\r\\n    },\\r\\n    outputs: { visibleChange: onVisibleFeaturesChange },\\r\\n    componentKey: 'FeatureManagement.FeatureManagementComponent'\\r\\n  }\\\"\\r\\n  [(visible)]=\\\"visibleFeatures\\\"\\r\\n  providerName=\\\"T\\\"\\r\\n  [providerKey]=\\\"providerKey\\\"\\r\\n>\\r\\n</abp-feature-management>\\r\\n\"","import { FeatureManagement } from '../models';\r\n\r\nexport class GetFeatures {\r\n  static readonly type = '[FeatureManagement] Get Features';\r\n  constructor(public payload: FeatureManagement.Provider) {}\r\n}\r\n\r\nexport class UpdateFeatures {\r\n  static readonly type = '[FeatureManagement] Update Features';\r\n  constructor(public payload: FeatureManagement.Provider & FeatureManagement.Features) {}\r\n}\r\n","import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\r\nimport { Select, Store } from '@ngxs/store';\r\nimport { Observable } from 'rxjs';\r\nimport { GetFeatures, UpdateFeatures } from '../../actions';\r\nimport { FeatureManagement } from '../../models/feature-management';\r\nimport { FeatureManagementState } from '../../states';\r\nimport { FormGroup, FormControl } from '@angular/forms';\r\nimport { pluck, finalize } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'abp-feature-management',\r\n  templateUrl: './feature-management.component.html',\r\n  exportAs: 'abpFeatureManagement',\r\n})\r\nexport class FeatureManagementComponent\r\n  implements\r\n    FeatureManagement.FeatureManagementComponentInputs,\r\n    FeatureManagement.FeatureManagementComponentOutputs {\r\n  @Input()\r\n  providerKey: string;\r\n\r\n  @Input()\r\n  providerName: string;\r\n\r\n  protected _visible;\r\n\r\n  @Input()\r\n  get visible(): boolean {\r\n    return this._visible;\r\n  }\r\n\r\n  set visible(value: boolean) {\r\n    this._visible = value;\r\n    this.visibleChange.emit(value);\r\n\r\n    if (value) this.openModal();\r\n  }\r\n\r\n  @Output() readonly visibleChange = new EventEmitter<boolean>();\r\n\r\n  @Select(FeatureManagementState.getFeatures)\r\n  features$: Observable<FeatureManagement.Feature[]>;\r\n\r\n  modalBusy = false;\r\n\r\n  form: FormGroup;\r\n\r\n  constructor(private store: Store) {}\r\n\r\n  openModal() {\r\n    if (!this.providerKey || !this.providerName) {\r\n      throw new Error('Provider Key and Provider Name are required.');\r\n    }\r\n\r\n    this.getFeatures();\r\n  }\r\n\r\n  getFeatures() {\r\n    this.store\r\n      .dispatch(\r\n        new GetFeatures({\r\n          providerKey: this.providerKey,\r\n          providerName: this.providerName,\r\n        }),\r\n      )\r\n      .pipe(pluck('FeatureManagementState', 'features'))\r\n      .subscribe(features => {\r\n        this.buildForm(features);\r\n      });\r\n  }\r\n\r\n  buildForm(features) {\r\n    const formGroupObj = {};\r\n\r\n    for (let i = 0; i < features.length; i++) {\r\n      formGroupObj[i] = new FormControl(features[i].value === 'false' ? null : features[i].value);\r\n    }\r\n\r\n    this.form = new FormGroup(formGroupObj);\r\n  }\r\n\r\n  save() {\r\n    if (this.modalBusy) return;\r\n\r\n    this.modalBusy = true;\r\n\r\n    let features = this.store.selectSnapshot(FeatureManagementState.getFeatures);\r\n\r\n    features = features.map((feature, i) => ({\r\n      name: feature.name,\r\n      value: !this.form.value[i] || this.form.value[i] === 'false' ? null : this.form.value[i],\r\n    }));\r\n\r\n    this.store\r\n      .dispatch(\r\n        new UpdateFeatures({\r\n          providerKey: this.providerKey,\r\n          providerName: this.providerName,\r\n          features,\r\n        }),\r\n      )\r\n      .pipe(finalize(() => (this.modalBusy = false)))\r\n      .subscribe(() => {\r\n        this.visible = false;\r\n      });\r\n  }\r\n}\r\n","import { CoreModule } from '@abp/ng.core';\r\nimport { ThemeSharedModule } from '@abp/ng.theme.shared';\r\nimport { NgModule } from '@angular/core';\r\nimport { FeatureManagementComponent } from './components/feature-management/feature-management.component';\r\nimport { NgxsModule } from '@ngxs/store';\r\nimport { FeatureManagementState } from './states/feature-management.state';\r\n\r\n@NgModule({\r\n  declarations: [FeatureManagementComponent],\r\n  imports: [CoreModule, ThemeSharedModule, NgxsModule.forFeature([FeatureManagementState])],\r\n  exports: [FeatureManagementComponent],\r\n})\r\nexport class FeatureManagementModule {}\r\n","import { Injectable } from '@angular/core';\r\nimport { RestService, Rest } from '@abp/ng.core';\r\nimport { Store } from '@ngxs/store';\r\nimport { Observable } from 'rxjs';\r\nimport { FeatureManagement } from '../models';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class FeatureManagementService {\r\n  constructor(private rest: RestService, private store: Store) {}\r\n\r\n  getFeatures(params: FeatureManagement.Provider): Observable<FeatureManagement.Features> {\r\n    const request: Rest.Request<null> = {\r\n      method: 'GET',\r\n      url: '/api/abp/features',\r\n      params,\r\n    };\r\n    return this.rest.request<FeatureManagement.Provider, FeatureManagement.Features>(request);\r\n  }\r\n\r\n  updateFeatures({\r\n    features,\r\n    providerKey,\r\n    providerName,\r\n  }: FeatureManagement.Provider & FeatureManagement.Features): Observable<null> {\r\n    const request: Rest.Request<FeatureManagement.Features> = {\r\n      method: 'PUT',\r\n      url: '/api/abp/features',\r\n      body: { features },\r\n      params: { providerKey, providerName },\r\n    };\r\n    return this.rest.request<FeatureManagement.Features, null>(request);\r\n  }\r\n}\r\n","import { Action, Selector, State, StateContext } from '@ngxs/store';\r\nimport { tap } from 'rxjs/operators';\r\nimport { GetFeatures, UpdateFeatures } from '../actions/feature-management.actions';\r\nimport { FeatureManagement } from '../models/feature-management';\r\nimport { FeatureManagementService } from '../services/feature-management.service';\r\n\r\n@State<FeatureManagement.State>({\r\n  name: 'FeatureManagementState',\r\n  defaults: { features: {} } as FeatureManagement.State,\r\n})\r\nexport class FeatureManagementState {\r\n  @Selector()\r\n  static getFeatures({ features }: FeatureManagement.State) {\r\n    return features || [];\r\n  }\r\n\r\n  constructor(private featureManagementService: FeatureManagementService) {}\r\n\r\n  @Action(GetFeatures)\r\n  getFeatures({ patchState }: StateContext<FeatureManagement.State>, { payload }: GetFeatures) {\r\n    return this.featureManagementService.getFeatures(payload).pipe(\r\n      tap(({ features }) =>\r\n        patchState({\r\n          features,\r\n        }),\r\n      ),\r\n    );\r\n  }\r\n\r\n  @Action(UpdateFeatures)\r\n  updateFeatures(_, { payload }: UpdateFeatures) {\r\n    return this.featureManagementService.updateFeatures(payload);\r\n  }\r\n}\r\n","import { TenantManagement } from '../models/tenant-management';\r\nimport { ABP } from '@abp/ng.core';\r\n\r\nexport class GetTenants {\r\n  static readonly type = '[TenantManagement] Get Tenant';\r\n  constructor(public payload?: ABP.PageQueryParams) {}\r\n}\r\n\r\nexport class GetTenantById {\r\n  static readonly type = '[TenantManagement] Get Tenant By Id';\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class CreateTenant {\r\n  static readonly type = '[TenantManagement] Create Tenant';\r\n  constructor(public payload: TenantManagement.AddRequest) {}\r\n}\r\n\r\nexport class UpdateTenant {\r\n  static readonly type = '[TenantManagement] Update Tenant';\r\n  constructor(public payload: TenantManagement.UpdateRequest) {}\r\n}\r\n\r\nexport class DeleteTenant {\r\n  static readonly type = '[TenantManagement] Delete Tenant';\r\n  constructor(public payload: string) {}\r\n}\r\n","import { ABP } from '@abp/ng.core';\r\nimport { ConfirmationService, Toaster } from '@abp/ng.theme.shared';\r\nimport { Component, OnInit, TemplateRef, ViewChild, ChangeDetectorRef } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Select, Store } from '@ngxs/store';\r\nimport { Observable } from 'rxjs';\r\nimport { finalize, pluck, switchMap, take } from 'rxjs/operators';\r\nimport {\r\n  CreateTenant,\r\n  DeleteTenant,\r\n  GetTenantById,\r\n  GetTenants,\r\n  UpdateTenant,\r\n} from '../../actions/tenant-management.actions';\r\nimport { TenantManagementService } from '../../services/tenant-management.service';\r\nimport { TenantManagementState } from '../../states/tenant-management.state';\r\n\r\ninterface SelectedModalContent {\r\n  type: 'saveConnStr' | 'saveTenant';\r\n  title: string;\r\n  template: TemplateRef<any>;\r\n}\r\n\r\n@Component({\r\n  selector: 'abp-tenants',\r\n  templateUrl: './tenants.component.html',\r\n})\r\nexport class TenantsComponent implements OnInit {\r\n  @Select(TenantManagementState.get)\r\n  data$: Observable<ABP.BasicItem[]>;\r\n\r\n  @Select(TenantManagementState.getTenantsTotalCount)\r\n  totalCount$: Observable<number>;\r\n\r\n  selected: ABP.BasicItem;\r\n\r\n  tenantForm: FormGroup;\r\n\r\n  defaultConnectionStringForm: FormGroup;\r\n\r\n  defaultConnectionString: string;\r\n\r\n  isModalVisible: boolean;\r\n\r\n  selectedModalContent = {} as SelectedModalContent;\r\n\r\n  visibleFeatures = false;\r\n\r\n  providerKey: string;\r\n\r\n  _useSharedDatabase: boolean;\r\n\r\n  pageQuery: ABP.PageQueryParams = {};\r\n\r\n  loading = false;\r\n\r\n  modalBusy = false;\r\n\r\n  sortOrder = '';\r\n\r\n  sortKey = '';\r\n\r\n  get useSharedDatabase(): boolean {\r\n    return this.defaultConnectionStringForm.get('useSharedDatabase').value;\r\n  }\r\n\r\n  get connectionString(): string {\r\n    return this.defaultConnectionStringForm.get('defaultConnectionString').value;\r\n  }\r\n\r\n  @ViewChild('tenantModalTemplate', { static: false })\r\n  tenantModalTemplate: TemplateRef<any>;\r\n\r\n  @ViewChild('connectionStringModalTemplate', { static: false })\r\n  connectionStringModalTemplate: TemplateRef<any>;\r\n\r\n  get isDisabledSaveButton(): boolean {\r\n    if (!this.selectedModalContent) return false;\r\n\r\n    if (\r\n      this.selectedModalContent.type === 'saveConnStr' &&\r\n      this.defaultConnectionStringForm &&\r\n      this.defaultConnectionStringForm.invalid\r\n    ) {\r\n      return true;\r\n    } else if (\r\n      this.selectedModalContent.type === 'saveTenant' &&\r\n      this.tenantForm &&\r\n      this.tenantForm.invalid\r\n    ) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  onVisibleFeaturesChange = (value: boolean) => {\r\n    this.visibleFeatures = value;\r\n  };\r\n\r\n  constructor(\r\n    private confirmationService: ConfirmationService,\r\n    private tenantService: TenantManagementService,\r\n    private fb: FormBuilder,\r\n    private store: Store,\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.get();\r\n  }\r\n\r\n  onSearch(value) {\r\n    this.pageQuery.filter = value;\r\n    this.get();\r\n  }\r\n\r\n  private createTenantForm() {\r\n    this.tenantForm = this.fb.group({\r\n      name: [this.selected.name || '', [Validators.required, Validators.maxLength(256)]],\r\n    });\r\n  }\r\n\r\n  private createDefaultConnectionStringForm() {\r\n    this.defaultConnectionStringForm = this.fb.group({\r\n      useSharedDatabase: this._useSharedDatabase,\r\n      defaultConnectionString: [this.defaultConnectionString || ''],\r\n    });\r\n  }\r\n\r\n  openModal(title: string, template: TemplateRef<any>, type: 'saveConnStr' | 'saveTenant') {\r\n    this.selectedModalContent = {\r\n      title,\r\n      template,\r\n      type,\r\n    };\r\n\r\n    this.isModalVisible = true;\r\n  }\r\n\r\n  onEditConnectionString(id: string) {\r\n    this.store\r\n      .dispatch(new GetTenantById(id))\r\n      .pipe(\r\n        pluck('TenantManagementState', 'selectedItem'),\r\n        switchMap(selected => {\r\n          this.selected = selected;\r\n          return this.tenantService.getDefaultConnectionString(id);\r\n        }),\r\n      )\r\n      .subscribe(fetchedConnectionString => {\r\n        this._useSharedDatabase = fetchedConnectionString ? false : true;\r\n        this.defaultConnectionString = fetchedConnectionString ? fetchedConnectionString : '';\r\n        this.createDefaultConnectionStringForm();\r\n        this.openModal(\r\n          'AbpTenantManagement::ConnectionStrings',\r\n          this.connectionStringModalTemplate,\r\n          'saveConnStr',\r\n        );\r\n      });\r\n  }\r\n\r\n  addTenant() {\r\n    this.selected = {} as ABP.BasicItem;\r\n    this.createTenantForm();\r\n    this.openModal('AbpTenantManagement::NewTenant', this.tenantModalTemplate, 'saveTenant');\r\n  }\r\n\r\n  editTenant(id: string) {\r\n    this.store\r\n      .dispatch(new GetTenantById(id))\r\n      .pipe(pluck('TenantManagementState', 'selectedItem'))\r\n      .subscribe(selected => {\r\n        this.selected = selected;\r\n        this.createTenantForm();\r\n        this.openModal('AbpTenantManagement::Edit', this.tenantModalTemplate, 'saveTenant');\r\n      });\r\n  }\r\n\r\n  save() {\r\n    const { type } = this.selectedModalContent;\r\n    if (!type) return;\r\n    if (type === 'saveTenant') this.saveTenant();\r\n    else if (type === 'saveConnStr') this.saveConnectionString();\r\n  }\r\n\r\n  saveConnectionString() {\r\n    if (this.modalBusy) return;\r\n\r\n    this.modalBusy = true;\r\n    if (this.useSharedDatabase || (!this.useSharedDatabase && !this.connectionString)) {\r\n      this.tenantService\r\n        .deleteDefaultConnectionString(this.selected.id)\r\n        .pipe(\r\n          take(1),\r\n          finalize(() => (this.modalBusy = false)),\r\n        )\r\n        .subscribe(() => {\r\n          this.isModalVisible = false;\r\n        });\r\n    } else {\r\n      this.tenantService\r\n        .updateDefaultConnectionString({\r\n          id: this.selected.id,\r\n          defaultConnectionString: this.connectionString,\r\n        })\r\n        .pipe(\r\n          take(1),\r\n          finalize(() => (this.modalBusy = false)),\r\n        )\r\n        .subscribe(() => {\r\n          this.isModalVisible = false;\r\n        });\r\n    }\r\n  }\r\n\r\n  saveTenant() {\r\n    if (!this.tenantForm.valid || this.modalBusy) return;\r\n    this.modalBusy = true;\r\n\r\n    this.store\r\n      .dispatch(\r\n        this.selected.id\r\n          ? new UpdateTenant({ ...this.selected, ...this.tenantForm.value, id: this.selected.id })\r\n          : new CreateTenant(this.tenantForm.value),\r\n      )\r\n      .pipe(finalize(() => (this.modalBusy = false)))\r\n      .subscribe(() => {\r\n        this.isModalVisible = false;\r\n        this.get();\r\n      });\r\n  }\r\n\r\n  delete(id: string, name: string) {\r\n    this.confirmationService\r\n      .warn(\r\n        'AbpTenantManagement::TenantDeletionConfirmationMessage',\r\n        'AbpTenantManagement::AreYouSure',\r\n        {\r\n          messageLocalizationParams: [name],\r\n        },\r\n      )\r\n      .subscribe((status: Toaster.Status) => {\r\n        if (status === Toaster.Status.confirm) {\r\n          this.store.dispatch(new DeleteTenant(id)).subscribe(() => this.get());\r\n        }\r\n      });\r\n  }\r\n\r\n  onPageChange(data) {\r\n    this.pageQuery.skipCount = data.first;\r\n    this.pageQuery.maxResultCount = data.rows;\r\n\r\n    this.get();\r\n  }\r\n\r\n  get() {\r\n    this.loading = true;\r\n    this.store\r\n      .dispatch(new GetTenants(this.pageQuery))\r\n      .pipe(finalize(() => (this.loading = false)))\r\n      .subscribe();\r\n  }\r\n\r\n  onSharedDatabaseChange(value: boolean) {\r\n    if (!value) {\r\n      setTimeout(() => {\r\n        const defaultConnectionString = document.getElementById(\r\n          'defaultConnectionString',\r\n        ) as HTMLInputElement;\r\n        if (defaultConnectionString) {\r\n          defaultConnectionString.focus();\r\n        }\r\n      }, 0);\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Store } from '@ngxs/store';\r\nimport { TenantManagementState } from '../states/tenant-management.state';\r\nimport { ABP } from '@abp/ng.core';\r\nimport { GetTenants, GetTenantById, CreateTenant, UpdateTenant, DeleteTenant } from '../actions';\r\nimport { TenantManagement } from '../models';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TenantManagementStateService {\r\n  constructor(private store: Store) {}\r\n\r\n  get() {\r\n    return this.store.selectSnapshot(TenantManagementState.get);\r\n  }\r\n\r\n  getTenantsTotalCount() {\r\n    return this.store.selectSnapshot(TenantManagementState.getTenantsTotalCount);\r\n  }\r\n\r\n  dispatchGetTenants(...args: ConstructorParameters<typeof GetTenants>) {\r\n    return this.store.dispatch(new GetTenants(...args));\r\n  }\r\n\r\n  dispatchGetTenantById(...args: ConstructorParameters<typeof GetTenantById>) {\r\n    return this.store.dispatch(new GetTenantById(...args));\r\n  }\r\n\r\n  dispatchCreateTenant(...args: ConstructorParameters<typeof CreateTenant>) {\r\n    return this.store.dispatch(new CreateTenant(...args));\r\n  }\r\n\r\n  dispatchUpdateTenant(...args: ConstructorParameters<typeof UpdateTenant>) {\r\n    return this.store.dispatch(new UpdateTenant(...args));\r\n  }\r\n\r\n  dispatchDeleteTenant(...args: ConstructorParameters<typeof DeleteTenant>) {\r\n    return this.store.dispatch(new DeleteTenant(...args));\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { RestService, Rest, ABP } from '@abp/ng.core';\r\nimport { TenantManagement } from '../models/tenant-management';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TenantManagementService {\r\n  constructor(private rest: RestService) {}\r\n\r\n  getTenant(params = {} as ABP.PageQueryParams): Observable<TenantManagement.Response> {\r\n    const request: Rest.Request<null> = {\r\n      method: 'GET',\r\n      url: '/api/multi-tenancy/tenants',\r\n      params\r\n    };\r\n\r\n    return this.rest.request<null, TenantManagement.Response>(request);\r\n  }\r\n\r\n  getTenantById(id: string): Observable<ABP.BasicItem> {\r\n    const request: Rest.Request<null> = {\r\n      method: 'GET',\r\n      url: `/api/multi-tenancy/tenants/${id}`\r\n    };\r\n\r\n    return this.rest.request<null, ABP.BasicItem>(request);\r\n  }\r\n\r\n  deleteTenant(id: string): Observable<null> {\r\n    const request: Rest.Request<null> = {\r\n      method: 'DELETE',\r\n      url: `/api/multi-tenancy/tenants/${id}`\r\n    };\r\n\r\n    return this.rest.request<null, null>(request);\r\n  }\r\n\r\n  createTenant(body: TenantManagement.AddRequest): Observable<ABP.BasicItem> {\r\n    const request: Rest.Request<TenantManagement.AddRequest> = {\r\n      method: 'POST',\r\n      url: '/api/multi-tenancy/tenants',\r\n      body\r\n    };\r\n\r\n    return this.rest.request<TenantManagement.AddRequest, ABP.BasicItem>(request);\r\n  }\r\n\r\n  updateTenant(body: TenantManagement.UpdateRequest): Observable<ABP.BasicItem> {\r\n    const url = `/api/multi-tenancy/tenants/${body.id}`;\r\n    delete body.id;\r\n\r\n    const request: Rest.Request<TenantManagement.UpdateRequest> = {\r\n      method: 'PUT',\r\n      url,\r\n      body\r\n    };\r\n\r\n    return this.rest.request<TenantManagement.AddRequest, ABP.BasicItem>(request);\r\n  }\r\n\r\n  getDefaultConnectionString(id: string): Observable<string> {\r\n    const url = `/api/multi-tenancy/tenants/${id}/default-connection-string`;\r\n\r\n    const request: Rest.Request<TenantManagement.DefaultConnectionStringRequest> = {\r\n      method: 'GET',\r\n      responseType: Rest.ResponseType.Text,\r\n      url\r\n    };\r\n    return this.rest.request<TenantManagement.DefaultConnectionStringRequest, string>(request);\r\n  }\r\n\r\n  updateDefaultConnectionString(payload: TenantManagement.DefaultConnectionStringRequest): Observable<any> {\r\n    const url = `/api/multi-tenancy/tenants/${payload.id}/default-connection-string`;\r\n\r\n    const request: Rest.Request<TenantManagement.DefaultConnectionStringRequest> = {\r\n      method: 'PUT',\r\n      url,\r\n      params: { defaultConnectionString: payload.defaultConnectionString }\r\n    };\r\n    return this.rest.request<TenantManagement.DefaultConnectionStringRequest, any>(request);\r\n  }\r\n\r\n  deleteDefaultConnectionString(id: string): Observable<string> {\r\n    const url = `/api/multi-tenancy/tenants/${id}/default-connection-string`;\r\n\r\n    const request: Rest.Request<TenantManagement.DefaultConnectionStringRequest> = {\r\n      method: 'DELETE',\r\n      url\r\n    };\r\n    return this.rest.request<TenantManagement.DefaultConnectionStringRequest, any>(request);\r\n  }\r\n}\r\n","import { ABP } from '@abp/ng.core';\r\nimport { Action, Selector, State, StateContext } from '@ngxs/store';\r\nimport { tap } from 'rxjs/operators';\r\nimport {\r\n  CreateTenant,\r\n  DeleteTenant,\r\n  GetTenantById,\r\n  GetTenants,\r\n  UpdateTenant,\r\n} from '../actions/tenant-management.actions';\r\nimport { TenantManagement } from '../models/tenant-management';\r\nimport { TenantManagementService } from '../services/tenant-management.service';\r\n\r\n@State<TenantManagement.State>({\r\n  name: 'TenantManagementState',\r\n  defaults: { result: {}, selectedItem: {} } as TenantManagement.State,\r\n})\r\nexport class TenantManagementState {\r\n  @Selector()\r\n  static get({ result }: TenantManagement.State): ABP.BasicItem[] {\r\n    return result.items || [];\r\n  }\r\n\r\n  @Selector()\r\n  static getTenantsTotalCount({ result }: TenantManagement.State): number {\r\n    return result.totalCount;\r\n  }\r\n\r\n  constructor(private tenantManagementService: TenantManagementService) {}\r\n\r\n  @Action(GetTenants)\r\n  get({ patchState }: StateContext<TenantManagement.State>, { payload }: GetTenants) {\r\n    return this.tenantManagementService.getTenant(payload).pipe(\r\n      tap(result =>\r\n        patchState({\r\n          result,\r\n        }),\r\n      ),\r\n    );\r\n  }\r\n\r\n  @Action(GetTenantById)\r\n  getById({ patchState }: StateContext<TenantManagement.State>, { payload }: GetTenantById) {\r\n    return this.tenantManagementService.getTenantById(payload).pipe(\r\n      tap(selectedItem =>\r\n        patchState({\r\n          selectedItem,\r\n        }),\r\n      ),\r\n    );\r\n  }\r\n\r\n  @Action(DeleteTenant)\r\n  delete(_, { payload }: DeleteTenant) {\r\n    return this.tenantManagementService.deleteTenant(payload);\r\n  }\r\n\r\n  @Action(CreateTenant)\r\n  add(_, { payload }: CreateTenant) {\r\n    return this.tenantManagementService.createTenant(payload);\r\n  }\r\n\r\n  @Action(UpdateTenant)\r\n  update({ getState }: StateContext<TenantManagement.State>, { payload }: UpdateTenant) {\r\n    return this.tenantManagementService.updateTenant({ ...getState().selectedItem, ...payload });\r\n  }\r\n}\r\n","import {\r\n  AuthGuard,\r\n  DynamicLayoutComponent,\r\n  PermissionGuard,\r\n  ReplaceableComponents,\r\n  ReplaceableRouteContainerComponent,\r\n} from '@abp/ng.core';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { TenantsComponent } from './components/tenants/tenants.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '', redirectTo: 'tenants', pathMatch: 'full' },\r\n  {\r\n    path: '',\r\n    component: DynamicLayoutComponent,\r\n    canActivate: [AuthGuard, PermissionGuard],\r\n    children: [\r\n      {\r\n        path: 'tenants',\r\n        component: ReplaceableRouteContainerComponent,\r\n        data: {\r\n          requiredPolicy: 'AbpTenantManagement.Tenants',\r\n          replaceableComponent: {\r\n            key: 'TenantManagement.TenantsComponent',\r\n            defaultComponent: TenantsComponent,\r\n          } as ReplaceableComponents.RouteData<TenantsComponent>,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class TenantManagementRoutingModule {}\r\n","import { CoreModule } from '@abp/ng.core';\r\nimport { ThemeSharedModule } from '@abp/ng.theme.shared';\r\nimport { NgModule, Provider } from '@angular/core';\r\nimport { NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { NgxsModule } from '@ngxs/store';\r\nimport { TableModule } from 'primeng/table';\r\nimport { TenantsComponent } from './components/tenants/tenants.component';\r\nimport { TenantManagementState } from './states/tenant-management.state';\r\nimport { TenantManagementRoutingModule } from './tenant-management-routing.module';\r\nimport { FeatureManagementModule } from '@abp/ng.feature-management';\r\nimport { NgxValidateCoreModule } from '@ngx-validate/core';\r\n\r\n@NgModule({\r\n  declarations: [TenantsComponent],\r\n  imports: [\r\n    TenantManagementRoutingModule,\r\n    NgxsModule.forFeature([TenantManagementState]),\r\n    NgxValidateCoreModule,\r\n    CoreModule,\r\n    TableModule,\r\n    ThemeSharedModule,\r\n    NgbDropdownModule,\r\n    FeatureManagementModule,\r\n  ],\r\n})\r\nexport class TenantManagementModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { TenantManagementModule } from '@abp/ng.tenant-management';\r\n\r\n@NgModule({\r\n  imports: [TenantManagementModule],\r\n})\r\nexport class TenantManagementWrapperModule {}\r\n"],"sourceRoot":"webpack:///"}