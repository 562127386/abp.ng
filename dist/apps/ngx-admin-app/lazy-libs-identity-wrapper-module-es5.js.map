{"version":3,"sources":["C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/identity/src/lib/components/roles/roles.component.html","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/identity/src/lib/components/users/users.component.html","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/permission-management/src/lib/components/permission-management.component.html","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/identity/src/lib/actions/identity.actions.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/identity/src/lib/components/roles/roles.component.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/identity/src/lib/components/users/users.component.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/identity/src/lib/identity-routing.module.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/identity/src/lib/identity.module.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/identity/src/lib/services/identity-state.service.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/identity/src/lib/services/identity.service.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/identity/src/lib/states/identity.state.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/identity/src/public-api.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/permission-management/src/lib/actions/permission-management.actions.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/permission-management/src/lib/components/permission-management.component.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/permission-management/src/lib/permission-management.module.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/permission-management/src/lib/services/permission-management-state.service.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/permission-management/src/lib/services/permission-management.service.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/permission-management/src/lib/states/permission-management.state.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/permission-management/src/public-api.ts","src/app/lazy-libs/identity-wrapper.module.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<div id=\\\"identity-roles-wrapper\\\" class=\\\"card\\\">\\r\\n  <div class=\\\"card-header\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col col-md-6\\\">\\r\\n        <h5 class=\\\"card-title\\\">{{ 'AbpIdentity::Roles' | abpLocalization }}</h5>\\r\\n      </div>\\r\\n      <div class=\\\"text-right col col-md-6\\\">\\r\\n        <button\\r\\n          *abpPermission=\\\"'AbpIdentity.Roles.Create'\\\"\\r\\n          id=\\\"create-role\\\"\\r\\n          class=\\\"btn btn-primary\\\"\\r\\n          type=\\\"button\\\"\\r\\n          (click)=\\\"add()\\\"\\r\\n        >\\r\\n          <i class=\\\"fa fa-plus mr-1\\\"></i>\\r\\n          <span>{{ 'AbpIdentity::NewRole' | abpLocalization }}</span>\\r\\n        </button>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"card-body\\\">\\r\\n    <p-table\\r\\n      *ngIf=\\\"[150, 0] as columnWidths\\\"\\r\\n      [value]=\\\"data$ | async\\\"\\r\\n      [abpTableSort]=\\\"{ key: sortKey, order: sortOrder }\\\"\\r\\n      [lazy]=\\\"true\\\"\\r\\n      [lazyLoadOnInit]=\\\"false\\\"\\r\\n      [paginator]=\\\"true\\\"\\r\\n      [rows]=\\\"10\\\"\\r\\n      [totalRecords]=\\\"totalCount$ | async\\\"\\r\\n      [loading]=\\\"loading\\\"\\r\\n      [resizableColumns]=\\\"true\\\"\\r\\n      [scrollable]=\\\"true\\\"\\r\\n      (onLazyLoad)=\\\"onPageChange($event)\\\"\\r\\n    >\\r\\n      <ng-template pTemplate=\\\"colgroup\\\">\\r\\n        <colgroup>\\r\\n          <col *ngFor=\\\"let width of columnWidths\\\" [ngStyle]=\\\"{ 'width.px': width || undefined }\\\" />\\r\\n        </colgroup>\\r\\n      </ng-template>\\r\\n      <ng-template pTemplate=\\\"emptymessage\\\" let-columns>\\r\\n        <tr\\r\\n          abp-table-empty-message\\r\\n          [attr.colspan]=\\\"columnWidths.length\\\"\\r\\n          localizationResource=\\\"AbpIdentity\\\"\\r\\n          localizationProp=\\\"NoDataAvailableInDatatable\\\"\\r\\n        ></tr>\\r\\n      </ng-template>\\r\\n      <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n        <tr>\\r\\n          <th>{{ 'AbpIdentity::Actions' | abpLocalization }}</th>\\r\\n          <th pResizableColumn (click)=\\\"sortOrderIcon.sort('name')\\\">\\r\\n            {{ 'AbpIdentity::RoleName' | abpLocalization }}\\r\\n            <abp-sort-order-icon\\r\\n              #sortOrderIcon\\r\\n              sortKey=\\\"name\\\"\\r\\n              [(selectedSortKey)]=\\\"sortKey\\\"\\r\\n              [(order)]=\\\"sortOrder\\\"\\r\\n            ></abp-sort-order-icon>\\r\\n          </th>\\r\\n        </tr>\\r\\n      </ng-template>\\r\\n      <ng-template pTemplate=\\\"body\\\" let-data>\\r\\n        <tr>\\r\\n          <td class=\\\"text-center\\\">\\r\\n            <div ngbDropdown container=\\\"body\\\" class=\\\"d-inline-block\\\">\\r\\n              <button\\r\\n                class=\\\"btn btn-primary btn-sm dropdown-toggle\\\"\\r\\n                data-toggle=\\\"dropdown\\\"\\r\\n                aria-haspopup=\\\"true\\\"\\r\\n                ngbDropdownToggle\\r\\n              >\\r\\n                <i class=\\\"fa fa-cog mr-1\\\"></i>{{ 'AbpIdentity::Actions' | abpLocalization }}\\r\\n              </button>\\r\\n              <div ngbDropdownMenu>\\r\\n                <button\\r\\n                  *abpPermission=\\\"'AbpIdentity.Roles.Update'\\\"\\r\\n                  ngbDropdownItem\\r\\n                  (click)=\\\"edit(data.id)\\\"\\r\\n                >\\r\\n                  {{ 'AbpIdentity::Edit' | abpLocalization }}\\r\\n                </button>\\r\\n                <button\\r\\n                  *abpPermission=\\\"'AbpIdentity.Roles.ManagePermissions'\\\"\\r\\n                  ngbDropdownItem\\r\\n                  (click)=\\\"providerKey = data.name; visiblePermissions = true\\\"\\r\\n                >\\r\\n                  {{ 'AbpIdentity::Permissions' | abpLocalization }}\\r\\n                </button>\\r\\n                <button\\r\\n                  *abpPermission=\\\"'AbpIdentity.Roles.Delete'\\\"\\r\\n                  ngbDropdownItem\\r\\n                  (click)=\\\"delete(data.id, data.name)\\\"\\r\\n                >\\r\\n                  {{ 'AbpIdentity::Delete' | abpLocalization }}\\r\\n                </button>\\r\\n              </div>\\r\\n            </div>\\r\\n          </td>\\r\\n          <td>\\r\\n            {{ data.name\\r\\n            }}<span *ngIf=\\\"data.isDefault\\\" class=\\\"badge badge-pill badge-success ml-1\\\">{{\\r\\n              'AbpIdentity::DisplayName:IsDefault' | abpLocalization\\r\\n            }}</span>\\r\\n            <span *ngIf=\\\"data.isPublic\\\" class=\\\"badge badge-pill badge-info ml-1\\\">{{\\r\\n              'AbpIdentity::DisplayName:IsPublic' | abpLocalization\\r\\n            }}</span>\\r\\n          </td>\\r\\n        </tr>\\r\\n      </ng-template>\\r\\n    </p-table>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<abp-modal size=\\\"md\\\" [(visible)]=\\\"isModalVisible\\\" [busy]=\\\"modalBusy\\\">\\r\\n  <ng-template #abpHeader>\\r\\n    <h3>{{ (selected?.id ? 'AbpIdentity::Edit' : 'AbpIdentity::NewRole') | abpLocalization }}</h3>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpBody>\\r\\n    <form #formRef [formGroup]=\\\"form\\\" (ngSubmit)=\\\"save()\\\" validateOnSubmit>\\r\\n      <div class=\\\"form-group\\\">\\r\\n        <label for=\\\"role-name\\\">{{ 'AbpIdentity::RoleName' | abpLocalization }}</label\\r\\n        ><span> * </span>\\r\\n        <input autofocus type=\\\"text\\\" id=\\\"role-name\\\" class=\\\"form-control\\\" formControlName=\\\"name\\\" />\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"custom-checkbox custom-control mb-2\\\">\\r\\n        <input\\r\\n          type=\\\"checkbox\\\"\\r\\n          id=\\\"role-is-default\\\"\\r\\n          class=\\\"custom-control-input\\\"\\r\\n          formControlName=\\\"isDefault\\\"\\r\\n        />\\r\\n        <label class=\\\"custom-control-label\\\" for=\\\"role-is-default\\\">{{\\r\\n          'AbpIdentity::DisplayName:IsDefault' | abpLocalization\\r\\n        }}</label>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"custom-checkbox custom-control mb-2\\\">\\r\\n        <input\\r\\n          type=\\\"checkbox\\\"\\r\\n          id=\\\"role-is-public\\\"\\r\\n          class=\\\"custom-control-input\\\"\\r\\n          formControlName=\\\"isPublic\\\"\\r\\n        />\\r\\n        <label class=\\\"custom-control-label\\\" for=\\\"role-is-public\\\">{{\\r\\n          'AbpIdentity::DisplayName:IsPublic' | abpLocalization\\r\\n        }}</label>\\r\\n      </div>\\r\\n    </form>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpFooter>\\r\\n    <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" #abpClose>\\r\\n      {{ 'AbpIdentity::Cancel' | abpLocalization }}\\r\\n    </button>\\r\\n    <abp-button iconClass=\\\"fa fa-check\\\" [disabled]=\\\"form?.invalid\\\" (click)=\\\"onClickSaveButton()\\\">{{\\r\\n      'AbpIdentity::Save' | abpLocalization\\r\\n    }}</abp-button>\\r\\n  </ng-template>\\r\\n</abp-modal>\\r\\n\\r\\n<abp-permission-management\\r\\n  #abpPermissionManagement=\\\"abpPermissionManagement\\\"\\r\\n  *abpReplaceableTemplate=\\\"\\r\\n    {\\r\\n      inputs: {\\r\\n        providerName: { value: 'R' },\\r\\n        providerKey: { value: providerKey },\\r\\n        visible: { value: visiblePermissions, twoWay: true },\\r\\n        hideBadges: { value: true }\\r\\n      },\\r\\n      outputs: { visibleChange: onVisiblePermissionChange },\\r\\n      componentKey: 'PermissionManagement.PermissionManagementComponent'\\r\\n    };\\r\\n    let init = initTemplate\\r\\n  \\\"\\r\\n  (abpInit)=\\\"init(abpPermissionManagement)\\\"\\r\\n>\\r\\n</abp-permission-management>\\r\\n\\r\\n<!-- <abp-permission-management\\r\\n  #abpPermissionManagement=\\\"abpPermissionManagement\\\"\\r\\n  *abpReplaceableTemplate=\\\"{\\r\\n    inputs: {\\r\\n      providerName: { value: 'R' },\\r\\n      providerKey: { value: providerKey },\\r\\n      visible: { value: visiblePermissions, twoWay: true },\\r\\n      hideBadges: { value: true }\\r\\n    },\\r\\n    outputs: { visibleChange: onVisiblePermissionChange },\\r\\n    componentKey: 'PermissionManagement.PermissionManagementComponent'\\r\\n  }\\\"\\r\\n  [(visible)]=\\\"visiblePermissions\\\"\\r\\n  [providerKey]=\\\"providerKey\\\"\\r\\n  [hideBadges]=\\\"true\\\"\\r\\n  providerName=\\\"R\\\"\\r\\n>\\r\\n</abp-permission-management> -->\\r\\n\"","export default \"<div id=\\\"identity-roles-wrapper\\\" class=\\\"card\\\">\\r\\n  <div class=\\\"card-header\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col col-md-6\\\">\\r\\n        <h5 class=\\\"card-title\\\">{{ 'AbpIdentity::Users' | abpLocalization }}</h5>\\r\\n      </div>\\r\\n      <div class=\\\"text-right col col-md-6\\\">\\r\\n        <button\\r\\n          *abpPermission=\\\"'AbpIdentity.Users.Create'\\\"\\r\\n          id=\\\"create-role\\\"\\r\\n          class=\\\"btn btn-primary\\\"\\r\\n          type=\\\"button\\\"\\r\\n          (click)=\\\"add()\\\"\\r\\n        >\\r\\n          <i class=\\\"fa fa-plus mr-1\\\"></i>\\r\\n          <span>{{ 'AbpIdentity::NewUser' | abpLocalization }}</span>\\r\\n        </button>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\\"card-body\\\">\\r\\n    <div id=\\\"data-tables-table-filter\\\" class=\\\"data-tables-filter\\\">\\r\\n      <label\\r\\n        ><input\\r\\n          type=\\\"search\\\"\\r\\n          class=\\\"form-control form-control-sm\\\"\\r\\n          [placeholder]=\\\"'AbpUi::PagerSearch' | abpLocalization\\\"\\r\\n          (input.debounce)=\\\"onSearch($event.target.value)\\\"\\r\\n      /></label>\\r\\n    </div>\\r\\n    <p-table\\r\\n      *ngIf=\\\"[150, 250, 250, 250] as columnWidths\\\"\\r\\n      [value]=\\\"data$ | async\\\"\\r\\n      [abpTableSort]=\\\"{ key: sortKey, order: sortOrder }\\\"\\r\\n      [lazy]=\\\"true\\\"\\r\\n      [lazyLoadOnInit]=\\\"false\\\"\\r\\n      [paginator]=\\\"true\\\"\\r\\n      [rows]=\\\"10\\\"\\r\\n      [totalRecords]=\\\"totalCount$ | async\\\"\\r\\n      [loading]=\\\"loading\\\"\\r\\n      [resizableColumns]=\\\"true\\\"\\r\\n      [scrollable]=\\\"true\\\"\\r\\n      (onLazyLoad)=\\\"onPageChange($event)\\\"\\r\\n    >\\r\\n      <ng-template pTemplate=\\\"colgroup\\\">\\r\\n        <colgroup>\\r\\n          <col *ngFor=\\\"let width of columnWidths\\\" [ngStyle]=\\\"{ 'width.px': width || undefined }\\\" />\\r\\n        </colgroup>\\r\\n      </ng-template>\\r\\n      <ng-template pTemplate=\\\"emptymessage\\\" let-columns>\\r\\n        <tr\\r\\n          abp-table-empty-message\\r\\n          [attr.colspan]=\\\"columnWidths.length\\\"\\r\\n          localizationResource=\\\"AbpIdentity\\\"\\r\\n          localizationProp=\\\"NoDataAvailableInDatatable\\\"\\r\\n        ></tr>\\r\\n      </ng-template>\\r\\n      <ng-template pTemplate=\\\"header\\\">\\r\\n        <tr>\\r\\n          <th>{{ 'AbpIdentity::Actions' | abpLocalization }}</th>\\r\\n          <th pResizableColumn (click)=\\\"sortOrderIcon.sort('userName')\\\">\\r\\n            {{ 'AbpIdentity::UserName' | abpLocalization }}\\r\\n            <abp-sort-order-icon\\r\\n              #sortOrderIcon\\r\\n              sortKey=\\\"userName\\\"\\r\\n              [(selectedSortKey)]=\\\"sortKey\\\"\\r\\n              [(order)]=\\\"sortOrder\\\"\\r\\n            >\\r\\n            </abp-sort-order-icon>\\r\\n          </th>\\r\\n          <th pResizableColumn (click)=\\\"sortOrderIcon.sort('email')\\\">\\r\\n            {{ 'AbpIdentity::EmailAddress' | abpLocalization }}\\r\\n            <abp-sort-order-icon\\r\\n              sortKey=\\\"email\\\"\\r\\n              [(selectedSortKey)]=\\\"sortKey\\\"\\r\\n              [(order)]=\\\"sortOrder\\\"\\r\\n            ></abp-sort-order-icon>\\r\\n          </th>\\r\\n          <th pResizableColumn (click)=\\\"sortOrderIcon.sort('phoneNumber')\\\">\\r\\n            {{ 'AbpIdentity::PhoneNumber' | abpLocalization }}\\r\\n            <abp-sort-order-icon\\r\\n              sortKey=\\\"phoneNumber\\\"\\r\\n              [(selectedSortKey)]=\\\"sortKey\\\"\\r\\n              [(order)]=\\\"sortOrder\\\"\\r\\n            >\\r\\n            </abp-sort-order-icon>\\r\\n          </th>\\r\\n        </tr>\\r\\n      </ng-template>\\r\\n      <ng-template pTemplate=\\\"body\\\" let-data>\\r\\n        <tr>\\r\\n          <td class=\\\"text-center\\\">\\r\\n            <div ngbDropdown container=\\\"body\\\" class=\\\"d-inline-block\\\">\\r\\n              <button\\r\\n                class=\\\"btn btn-primary btn-sm dropdown-toggle\\\"\\r\\n                data-toggle=\\\"dropdown\\\"\\r\\n                aria-haspopup=\\\"true\\\"\\r\\n                ngbDropdownToggle\\r\\n              >\\r\\n                <i class=\\\"fa fa-cog mr-1\\\"></i>{{ 'AbpIdentity::Actions' | abpLocalization }}\\r\\n              </button>\\r\\n              <div ngbDropdownMenu>\\r\\n                <button\\r\\n                  *abpPermission=\\\"'AbpIdentity.Users.Update'\\\"\\r\\n                  ngbDropdownItem\\r\\n                  (click)=\\\"edit(data.id)\\\"\\r\\n                >\\r\\n                  {{ 'AbpIdentity::Edit' | abpLocalization }}\\r\\n                </button>\\r\\n                <button\\r\\n                  *abpPermission=\\\"'AbpIdentity.Users.ManagePermissions'\\\"\\r\\n                  ngbDropdownItem\\r\\n                  (click)=\\\"providerKey = data.id; visiblePermissions = true\\\"\\r\\n                >\\r\\n                  {{ 'AbpIdentity::Permissions' | abpLocalization }}\\r\\n                </button>\\r\\n                <button\\r\\n                  *abpPermission=\\\"'AbpIdentity.Users.Delete'\\\"\\r\\n                  ngbDropdownItem\\r\\n                  (click)=\\\"delete(data.id, data.userName)\\\"\\r\\n                >\\r\\n                  {{ 'AbpIdentity::Delete' | abpLocalization }}\\r\\n                </button>\\r\\n              </div>\\r\\n            </div>\\r\\n          </td>\\r\\n          <td>{{ data.userName }}</td>\\r\\n          <td>{{ data.email }}</td>\\r\\n          <td>{{ data.phoneNumber }}</td>\\r\\n        </tr>\\r\\n      </ng-template>\\r\\n    </p-table>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<abp-modal [(visible)]=\\\"isModalVisible\\\" [busy]=\\\"modalBusy\\\" (disappear)=\\\"form = null\\\">\\r\\n  <ng-template #abpHeader>\\r\\n    <h3>{{ (selected?.id ? 'AbpIdentity::Edit' : 'AbpIdentity::NewUser') | abpLocalization }}</h3>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpBody>\\r\\n    <ng-template #loaderRef\\r\\n      ><div class=\\\"text-center\\\"><i class=\\\"fa fa-pulse fa-spinner\\\"></i></div\\r\\n    ></ng-template>\\r\\n\\r\\n    <form *ngIf=\\\"form; else loaderRef\\\" [formGroup]=\\\"form\\\" (ngSubmit)=\\\"save()\\\">\\r\\n      <ngb-tabset>\\r\\n        <ngb-tab [title]=\\\"'AbpIdentity::UserInformations' | abpLocalization\\\">\\r\\n          <ng-template ngbTabContent>\\r\\n            <div class=\\\"mt-2 fade-in-top\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"user-name\\\">{{ 'AbpIdentity::UserName' | abpLocalization }}</label\\r\\n                ><span> * </span>\\r\\n                <input\\r\\n                  type=\\\"text\\\"\\r\\n                  id=\\\"user-name\\\"\\r\\n                  class=\\\"form-control\\\"\\r\\n                  formControlName=\\\"userName\\\"\\r\\n                  autofocus\\r\\n                />\\r\\n              </div>\\r\\n\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"name\\\">{{ 'AbpIdentity::DisplayName:Name' | abpLocalization }}</label>\\r\\n                <input type=\\\"text\\\" id=\\\"name\\\" class=\\\"form-control\\\" formControlName=\\\"name\\\" />\\r\\n              </div>\\r\\n\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"surname\\\">{{\\r\\n                  'AbpIdentity::DisplayName:Surname' | abpLocalization\\r\\n                }}</label>\\r\\n                <input type=\\\"text\\\" id=\\\"surname\\\" class=\\\"form-control\\\" formControlName=\\\"surname\\\" />\\r\\n              </div>\\r\\n\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"password\\\">{{ 'AbpIdentity::Password' | abpLocalization }}</label\\r\\n                ><span *ngIf=\\\"!selected.userName\\\"> * </span>\\r\\n                <input\\r\\n                  type=\\\"password\\\"\\r\\n                  id=\\\"password\\\"\\r\\n                  autocomplete=\\\"new-password\\\"\\r\\n                  class=\\\"form-control\\\"\\r\\n                  formControlName=\\\"password\\\"\\r\\n                />\\r\\n              </div>\\r\\n\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"email\\\">{{ 'AbpIdentity::EmailAddress' | abpLocalization }}</label\\r\\n                ><span> * </span>\\r\\n                <input type=\\\"text\\\" id=\\\"email\\\" class=\\\"form-control\\\" formControlName=\\\"email\\\" />\\r\\n              </div>\\r\\n\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"phone-number\\\">{{ 'AbpIdentity::PhoneNumber' | abpLocalization }}</label>\\r\\n                <input\\r\\n                  type=\\\"text\\\"\\r\\n                  id=\\\"phone-number\\\"\\r\\n                  class=\\\"form-control\\\"\\r\\n                  formControlName=\\\"phoneNumber\\\"\\r\\n                />\\r\\n              </div>\\r\\n\\r\\n              <div class=\\\"custom-checkbox custom-control mb-2\\\">\\r\\n                <input\\r\\n                  type=\\\"checkbox\\\"\\r\\n                  id=\\\"lockout-checkbox\\\"\\r\\n                  class=\\\"custom-control-input\\\"\\r\\n                  formControlName=\\\"lockoutEnabled\\\"\\r\\n                />\\r\\n                <label class=\\\"custom-control-label\\\" for=\\\"lockout-checkbox\\\">{{\\r\\n                  'AbpIdentity::DisplayName:LockoutEnabled' | abpLocalization\\r\\n                }}</label>\\r\\n              </div>\\r\\n\\r\\n              <div class=\\\"custom-checkbox custom-control mb-2\\\">\\r\\n                <input\\r\\n                  type=\\\"checkbox\\\"\\r\\n                  id=\\\"two-factor-checkbox\\\"\\r\\n                  class=\\\"custom-control-input\\\"\\r\\n                  formControlName=\\\"twoFactorEnabled\\\"\\r\\n                />\\r\\n                <label class=\\\"custom-control-label\\\" for=\\\"two-factor-checkbox\\\">{{\\r\\n                  'AbpIdentity::DisplayName:TwoFactorEnabled' | abpLocalization\\r\\n                }}</label>\\r\\n              </div>\\r\\n            </div>\\r\\n          </ng-template>\\r\\n        </ngb-tab>\\r\\n        <ngb-tab [title]=\\\"'AbpIdentity::Roles' | abpLocalization\\\">\\r\\n          <ng-template ngbTabContent>\\r\\n            <div class=\\\"mt-2 fade-in-top\\\">\\r\\n              <div\\r\\n                *ngFor=\\\"let roleGroup of roleGroups; let i = index; trackBy: trackByFn\\\"\\r\\n                class=\\\"custom-checkbox custom-control mb-2\\\"\\r\\n              >\\r\\n                <input\\r\\n                  type=\\\"checkbox\\\"\\r\\n                  name=\\\"Roles[0].IsAssigned\\\"\\r\\n                  value=\\\"true\\\"\\r\\n                  class=\\\"custom-control-input\\\"\\r\\n                  [attr.id]=\\\"'roles-' + i\\\"\\r\\n                  [formControl]=\\\"roleGroup.controls[roles[i].name]\\\"\\r\\n                />\\r\\n                <label class=\\\"custom-control-label\\\" [attr.for]=\\\"'roles-' + i\\\">{{\\r\\n                  roles[i].name\\r\\n                }}</label>\\r\\n              </div>\\r\\n            </div>\\r\\n          </ng-template>\\r\\n        </ngb-tab>\\r\\n      </ngb-tabset>\\r\\n    </form>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpFooter>\\r\\n    <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" #abpClose>\\r\\n      {{ 'AbpIdentity::Cancel' | abpLocalization }}\\r\\n    </button>\\r\\n    <abp-button iconClass=\\\"fa fa-check\\\" (click)=\\\"save()\\\" [disabled]=\\\"form?.invalid\\\">{{\\r\\n      'AbpIdentity::Save' | abpLocalization\\r\\n    }}</abp-button>\\r\\n  </ng-template>\\r\\n</abp-modal>\\r\\n\\r\\n<abp-permission-management\\r\\n  #abpPermissionManagement=\\\"abpPermissionManagement\\\"\\r\\n  *abpReplaceableTemplate=\\\"\\r\\n    {\\r\\n      inputs: {\\r\\n        providerName: { value: 'U' },\\r\\n        providerKey: { value: providerKey },\\r\\n        visible: { value: visiblePermissions, twoWay: true }\\r\\n      },\\r\\n      outputs: { visibleChange: onVisiblePermissionChange },\\r\\n      componentKey: 'PermissionManagement.PermissionManagementComponent'\\r\\n    };\\r\\n    let init = initTemplate\\r\\n  \\\"\\r\\n  (abpInit)=\\\"init(abpPermissionManagement)\\\"\\r\\n>\\r\\n</abp-permission-management>\\r\\n\"","export default \"<abp-modal [(visible)]=\\\"visible\\\" (init)=\\\"initModal()\\\" [busy]=\\\"modalBusy\\\">\\r\\n  <ng-container *ngIf=\\\"{ entityName: entityName$ | async } as data\\\">\\r\\n    <ng-template #abpHeader>\\r\\n      <h4>\\r\\n        {{ 'AbpPermissionManagement::Permissions' | abpLocalization }} - {{ data.entityName }}\\r\\n      </h4>\\r\\n    </ng-template>\\r\\n    <ng-template #abpBody>\\r\\n      <div class=\\\"custom-checkbox custom-control mb-2\\\">\\r\\n        <input\\r\\n          type=\\\"checkbox\\\"\\r\\n          id=\\\"select-all-in-all-tabs\\\"\\r\\n          name=\\\"select-all-in-all-tabs\\\"\\r\\n          class=\\\"custom-control-input\\\"\\r\\n          [(ngModel)]=\\\"selectAllTab\\\"\\r\\n          (click)=\\\"onClickSelectAll()\\\"\\r\\n        />\\r\\n        <label class=\\\"custom-control-label\\\" for=\\\"select-all-in-all-tabs\\\">{{\\r\\n          'AbpPermissionManagement::SelectAllInAllTabs' | abpLocalization\\r\\n        }}</label>\\r\\n      </div>\\r\\n\\r\\n      <hr class=\\\"mt-2 mb-2\\\" />\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-4\\\">\\r\\n          <ul class=\\\"nav nav-pills flex-column\\\">\\r\\n            <li *ngFor=\\\"let group of groups$ | async; trackBy: trackByFn\\\" class=\\\"nav-item\\\">\\r\\n              <a\\r\\n                class=\\\"nav-link pointer\\\"\\r\\n                [class.active]=\\\"selectedGroup?.name === group?.name\\\"\\r\\n                (click)=\\\"onChangeGroup(group)\\\"\\r\\n                >{{ group?.displayName }}</a\\r\\n              >\\r\\n            </li>\\r\\n          </ul>\\r\\n        </div>\\r\\n        <div class=\\\"col-8\\\">\\r\\n          <h4>{{ selectedGroup?.displayName }}</h4>\\r\\n          <hr class=\\\"mt-2 mb-3\\\" />\\r\\n          <div class=\\\"pl-1 pt-1\\\">\\r\\n            <div class=\\\"custom-checkbox custom-control mb-2\\\">\\r\\n              <input\\r\\n                type=\\\"checkbox\\\"\\r\\n                id=\\\"select-all-in-this-tabs\\\"\\r\\n                name=\\\"select-all-in-this-tabs\\\"\\r\\n                class=\\\"custom-control-input\\\"\\r\\n                [(ngModel)]=\\\"selectThisTab\\\"\\r\\n                (click)=\\\"onClickSelectThisTab()\\\"\\r\\n              />\\r\\n              <label class=\\\"custom-control-label\\\" for=\\\"select-all-in-this-tabs\\\">{{\\r\\n                'AbpPermissionManagement::SelectAllInThisTab' | abpLocalization\\r\\n              }}</label>\\r\\n            </div>\\r\\n            <hr class=\\\"mb-3\\\" />\\r\\n            <div\\r\\n              *ngFor=\\\"\\r\\n                let permission of selectedGroupPermissions$ | async;\\r\\n                let i = index;\\r\\n                trackBy: trackByFn\\r\\n              \\\"\\r\\n              [style.margin-left]=\\\"permission.margin + 'px'\\\"\\r\\n              class=\\\"custom-checkbox custom-control mb-2\\\"\\r\\n            >\\r\\n              <input\\r\\n                #permissionCheckbox\\r\\n                type=\\\"checkbox\\\"\\r\\n                [checked]=\\\"getChecked(permission.name)\\\"\\r\\n                [value]=\\\"getChecked(permission.name)\\\"\\r\\n                [attr.id]=\\\"permission.name\\\"\\r\\n                class=\\\"custom-control-input\\\"\\r\\n                [disabled]=\\\"isGrantedByOtherProviderName(permission.grantedProviders)\\\"\\r\\n              />\\r\\n              <label\\r\\n                class=\\\"custom-control-label\\\"\\r\\n                [attr.for]=\\\"permission.name\\\"\\r\\n                (click)=\\\"onClickCheckbox(permission, permissionCheckbox.value)\\\"\\r\\n                >{{ permission.displayName }}\\r\\n                <ng-container *ngIf=\\\"!hideBadges\\\">\\r\\n                  <span\\r\\n                    *ngFor=\\\"let provider of permission.grantedProviders\\\"\\r\\n                    class=\\\"badge badge-light\\\"\\r\\n                    >{{ provider.providerName }}: {{ provider.providerKey }}</span\\r\\n                  >\\r\\n                </ng-container>\\r\\n              </label>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </ng-template>\\r\\n    <ng-template #abpFooter>\\r\\n      <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" #abpClose>\\r\\n        {{ 'AbpIdentity::Cancel' | abpLocalization }}\\r\\n      </button>\\r\\n      <abp-button iconClass=\\\"fa fa-check\\\" (click)=\\\"submit()\\\">{{\\r\\n        'AbpIdentity::Save' | abpLocalization\\r\\n      }}</abp-button>\\r\\n    </ng-template>\\r\\n  </ng-container>\\r\\n</abp-modal>\\r\\n\"","import { Identity } from '../models/identity';\r\nimport { ABP } from '@abp/ng.core';\r\n\r\nexport class GetRoles {\r\n  static readonly type = '[Identity] Get Roles';\r\n  constructor(public payload?: ABP.PageQueryParams) {}\r\n}\r\n\r\nexport class GetRoleById {\r\n  static readonly type = '[Identity] Get Role By Id';\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class DeleteRole {\r\n  static readonly type = '[Identity] Delete Role';\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class CreateRole {\r\n  static readonly type = '[Identity] Create Role';\r\n  constructor(public payload: Identity.RoleSaveRequest) {}\r\n}\r\n\r\nexport class UpdateRole {\r\n  static readonly type = '[Identity] Update Role';\r\n  constructor(public payload: Identity.RoleItem) {}\r\n}\r\n\r\nexport class GetUsers {\r\n  static readonly type = '[Identity] Get Users';\r\n  constructor(public payload?: ABP.PageQueryParams) {}\r\n}\r\n\r\nexport class GetUserById {\r\n  static readonly type = '[Identity] Get User By Id';\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class DeleteUser {\r\n  static readonly type = '[Identity] Delete User';\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class CreateUser {\r\n  static readonly type = '[Identity] Create User';\r\n  constructor(public payload: Identity.UserSaveRequest) {}\r\n}\r\n\r\nexport class UpdateUser {\r\n  static readonly type = '[Identity] Update User';\r\n  constructor(public payload: Identity.UserSaveRequest & { id: string }) {}\r\n}\r\n\r\nexport class GetUserRoles {\r\n  static readonly type = '[Identity] Get User Roles';\r\n  constructor(public payload: string) {}\r\n}\r\n","import { ABP } from '@abp/ng.core';\r\nimport { ConfirmationService, Toaster } from '@abp/ng.theme.shared';\r\nimport { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Select, Store } from '@ngxs/store';\r\nimport { Observable } from 'rxjs';\r\nimport { finalize, pluck } from 'rxjs/operators';\r\nimport {\r\n  CreateRole,\r\n  DeleteRole,\r\n  GetRoleById,\r\n  GetRoles,\r\n  UpdateRole,\r\n} from '../../actions/identity.actions';\r\nimport { Identity } from '../../models/identity';\r\nimport { IdentityState } from '../../states/identity.state';\r\n\r\n@Component({\r\n  selector: 'abp-roles',\r\n  templateUrl: './roles.component.html',\r\n})\r\nexport class RolesComponent implements OnInit {\r\n  @Select(IdentityState.getRoles)\r\n  data$: Observable<Identity.RoleItem[]>;\r\n\r\n  @Select(IdentityState.getRolesTotalCount)\r\n  totalCount$: Observable<number>;\r\n\r\n  form: FormGroup;\r\n\r\n  selected: Identity.RoleItem;\r\n\r\n  isModalVisible: boolean;\r\n\r\n  visiblePermissions = false;\r\n\r\n  providerKey: string;\r\n\r\n  pageQuery: ABP.PageQueryParams = {};\r\n\r\n  loading = false;\r\n\r\n  modalBusy = false;\r\n\r\n  sortOrder = '';\r\n\r\n  sortKey = '';\r\n\r\n  @ViewChild('formRef', { static: false, read: ElementRef })\r\n  formRef: ElementRef<HTMLFormElement>;\r\n\r\n  onVisiblePermissionChange = event => {\r\n    this.visiblePermissions = event;\r\n  };\r\n\r\n  constructor(\r\n    private confirmationService: ConfirmationService,\r\n    private fb: FormBuilder,\r\n    private store: Store,\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.get();\r\n  }\r\n\r\n  buildForm() {\r\n    this.form = this.fb.group({\r\n      name: new FormControl({ value: this.selected.name || '', disabled: this.selected.isStatic }, [\r\n        Validators.required,\r\n        Validators.maxLength(256),\r\n      ]),\r\n      isDefault: [this.selected.isDefault || false],\r\n      isPublic: [this.selected.isPublic || false],\r\n    });\r\n  }\r\n\r\n  openModal() {\r\n    this.buildForm();\r\n    this.isModalVisible = true;\r\n  }\r\n\r\n  add() {\r\n    this.selected = {} as Identity.RoleItem;\r\n    this.openModal();\r\n  }\r\n\r\n  edit(id: string) {\r\n    this.store\r\n      .dispatch(new GetRoleById(id))\r\n      .pipe(pluck('IdentityState', 'selectedRole'))\r\n      .subscribe(selectedRole => {\r\n        this.selected = selectedRole;\r\n        this.openModal();\r\n      });\r\n  }\r\n\r\n  save() {\r\n    if (!this.form.valid) return;\r\n    this.modalBusy = true;\r\n\r\n    this.store\r\n      .dispatch(\r\n        this.selected.id\r\n          ? new UpdateRole({ ...this.selected, ...this.form.value, id: this.selected.id })\r\n          : new CreateRole(this.form.value),\r\n      )\r\n      .pipe(finalize(() => (this.modalBusy = false)))\r\n      .subscribe(() => {\r\n        this.isModalVisible = false;\r\n        this.get();\r\n      });\r\n  }\r\n\r\n  delete(id: string, name: string) {\r\n    this.confirmationService\r\n      .warn('AbpIdentity::RoleDeletionConfirmationMessage', 'AbpIdentity::AreYouSure', {\r\n        messageLocalizationParams: [name],\r\n      })\r\n      .subscribe((status: Toaster.Status) => {\r\n        if (status === Toaster.Status.confirm) {\r\n          this.store.dispatch(new DeleteRole(id)).subscribe(() => this.get());\r\n        }\r\n      });\r\n  }\r\n\r\n  onPageChange(data) {\r\n    this.pageQuery.skipCount = data.first;\r\n    this.pageQuery.maxResultCount = data.rows;\r\n\r\n    this.get();\r\n  }\r\n\r\n  get() {\r\n    this.loading = true;\r\n    this.store\r\n      .dispatch(new GetRoles(this.pageQuery))\r\n      .pipe(finalize(() => (this.loading = false)))\r\n      .subscribe();\r\n  }\r\n\r\n  onClickSaveButton() {\r\n    this.formRef.nativeElement.dispatchEvent(\r\n      new Event('submit', { bubbles: true, cancelable: true }),\r\n    );\r\n  }\r\n}\r\n","import { ABP, ConfigState } from '@abp/ng.core';\r\nimport { ConfirmationService, Toaster } from '@abp/ng.theme.shared';\r\nimport { Component, OnInit, TemplateRef, TrackByFunction, ViewChild } from '@angular/core';\r\nimport {\r\n  AbstractControl,\r\n  FormArray,\r\n  FormBuilder,\r\n  FormControl,\r\n  FormGroup,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { PasswordRules, validatePassword } from '@ngx-validate/core';\r\nimport { Select, Store } from '@ngxs/store';\r\nimport { Observable } from 'rxjs';\r\nimport { finalize, pluck, switchMap, take } from 'rxjs/operators';\r\nimport snq from 'snq';\r\nimport {\r\n  CreateUser,\r\n  DeleteUser,\r\n  GetRoles,\r\n  GetUserById,\r\n  GetUserRoles,\r\n  GetUsers,\r\n  UpdateUser,\r\n} from '../../actions/identity.actions';\r\nimport { Identity } from '../../models/identity';\r\nimport { IdentityState } from '../../states/identity.state';\r\n@Component({\r\n  selector: 'abp-users',\r\n  templateUrl: './users.component.html',\r\n})\r\nexport class UsersComponent implements OnInit {\r\n  @Select(IdentityState.getUsers)\r\n  data$: Observable<Identity.UserItem[]>;\r\n\r\n  @Select(IdentityState.getUsersTotalCount)\r\n  totalCount$: Observable<number>;\r\n\r\n  @ViewChild('modalContent', { static: false })\r\n  modalContent: TemplateRef<any>;\r\n\r\n  form: FormGroup;\r\n\r\n  selected: Identity.UserItem;\r\n\r\n  selectedUserRoles: Identity.RoleItem[];\r\n\r\n  roles: Identity.RoleItem[];\r\n\r\n  visiblePermissions = false;\r\n\r\n  providerKey: string;\r\n\r\n  pageQuery: ABP.PageQueryParams = {};\r\n\r\n  isModalVisible: boolean;\r\n\r\n  loading = false;\r\n\r\n  modalBusy = false;\r\n\r\n  sortOrder = '';\r\n\r\n  sortKey = '';\r\n\r\n  passwordRulesArr = [] as PasswordRules;\r\n\r\n  requiredPasswordLength = 1;\r\n\r\n  trackByFn: TrackByFunction<AbstractControl> = (index, item) => Object.keys(item)[0] || index;\r\n\r\n  onVisiblePermissionChange = event => {\r\n    this.visiblePermissions = event;\r\n  };\r\n\r\n  get roleGroups(): FormGroup[] {\r\n    return snq(() => (this.form.get('roleNames') as FormArray).controls as FormGroup[], []);\r\n  }\r\n\r\n  constructor(\r\n    private confirmationService: ConfirmationService,\r\n    private fb: FormBuilder,\r\n    private store: Store,\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.get();\r\n\r\n    const passwordRules: ABP.Dictionary<string> = this.store.selectSnapshot(\r\n      ConfigState.getSettings('Identity.Password'),\r\n    );\r\n\r\n    if ((passwordRules['Abp.Identity.Password.RequireDigit'] || '').toLowerCase() === 'true') {\r\n      this.passwordRulesArr.push('number');\r\n    }\r\n\r\n    if ((passwordRules['Abp.Identity.Password.RequireLowercase'] || '').toLowerCase() === 'true') {\r\n      this.passwordRulesArr.push('small');\r\n    }\r\n\r\n    if ((passwordRules['Abp.Identity.Password.RequireUppercase'] || '').toLowerCase() === 'true') {\r\n      this.passwordRulesArr.push('capital');\r\n    }\r\n\r\n    if (+(passwordRules['Abp.Identity.Password.RequiredUniqueChars'] || 0) > 0) {\r\n      this.passwordRulesArr.push('special');\r\n    }\r\n\r\n    if (Number.isInteger(+passwordRules['Abp.Identity.Password.RequiredLength'])) {\r\n      this.requiredPasswordLength = +passwordRules['Abp.Identity.Password.RequiredLength'];\r\n    }\r\n  }\r\n\r\n  onSearch(value) {\r\n    this.pageQuery.filter = value;\r\n    this.get();\r\n  }\r\n\r\n  buildForm() {\r\n    this.store.dispatch(new GetRoles()).subscribe(() => {\r\n      this.roles = this.store.selectSnapshot(IdentityState.getRoles);\r\n      this.form = this.fb.group({\r\n        userName: [this.selected.userName || '', [Validators.required, Validators.maxLength(256)]],\r\n        email: [\r\n          this.selected.email || '',\r\n          [Validators.required, Validators.email, Validators.maxLength(256)],\r\n        ],\r\n        name: [this.selected.name || '', [Validators.maxLength(64)]],\r\n        surname: [this.selected.surname || '', [Validators.maxLength(64)]],\r\n        phoneNumber: [this.selected.phoneNumber || '', [Validators.maxLength(16)]],\r\n        lockoutEnabled: [this.selected.lockoutEnabled || (this.selected.id ? false : true)],\r\n        twoFactorEnabled: [this.selected.twoFactorEnabled || (this.selected.id ? false : true)],\r\n        roleNames: this.fb.array(\r\n          this.roles.map(role =>\r\n            this.fb.group({\r\n              [role.name]: [\r\n                !!snq(() => this.selectedUserRoles.find(userRole => userRole.id === role.id)),\r\n              ],\r\n            }),\r\n          ),\r\n        ),\r\n      });\r\n\r\n      const passwordValidators = [\r\n        validatePassword(this.passwordRulesArr),\r\n        Validators.minLength(this.requiredPasswordLength),\r\n        Validators.maxLength(32),\r\n      ];\r\n\r\n      this.form.addControl('password', new FormControl('', [...passwordValidators]));\r\n\r\n      if (!this.selected.userName) {\r\n        this.form.get('password').setValidators([...passwordValidators, Validators.required]);\r\n        this.form.get('password').updateValueAndValidity();\r\n      }\r\n    });\r\n  }\r\n\r\n  openModal() {\r\n    this.buildForm();\r\n    this.isModalVisible = true;\r\n  }\r\n\r\n  add() {\r\n    this.selected = {} as Identity.UserItem;\r\n    this.selectedUserRoles = [] as Identity.RoleItem[];\r\n    this.openModal();\r\n  }\r\n\r\n  edit(id: string) {\r\n    this.store\r\n      .dispatch(new GetUserById(id))\r\n      .pipe(\r\n        switchMap(() => this.store.dispatch(new GetUserRoles(id))),\r\n        pluck('IdentityState'),\r\n        take(1),\r\n      )\r\n      .subscribe((state: Identity.State) => {\r\n        this.selected = state.selectedUser;\r\n        this.selectedUserRoles = state.selectedUserRoles;\r\n        this.openModal();\r\n      });\r\n  }\r\n\r\n  save() {\r\n    if (!this.form.valid || this.modalBusy) return;\r\n    this.modalBusy = true;\r\n\r\n    const { roleNames } = this.form.value;\r\n    const mappedRoleNames = snq(\r\n      () =>\r\n        roleNames.filter(role => !!role[Object.keys(role)[0]]).map(role => Object.keys(role)[0]),\r\n      [],\r\n    );\r\n\r\n    this.store\r\n      .dispatch(\r\n        this.selected.id\r\n          ? new UpdateUser({\r\n              ...this.selected,\r\n              ...this.form.value,\r\n              id: this.selected.id,\r\n              roleNames: mappedRoleNames,\r\n            })\r\n          : new CreateUser({\r\n              ...this.form.value,\r\n              roleNames: mappedRoleNames,\r\n            }),\r\n      )\r\n      .pipe(finalize(() => (this.modalBusy = false)))\r\n      .subscribe(() => {\r\n        this.isModalVisible = false;\r\n        this.get();\r\n      });\r\n  }\r\n\r\n  delete(id: string, userName: string) {\r\n    this.confirmationService\r\n      .warn('AbpIdentity::UserDeletionConfirmationMessage', 'AbpIdentity::AreYouSure', {\r\n        messageLocalizationParams: [userName],\r\n      })\r\n      .subscribe((status: Toaster.Status) => {\r\n        if (status === Toaster.Status.confirm) {\r\n          this.store.dispatch(new DeleteUser(id)).subscribe(() => this.get());\r\n        }\r\n      });\r\n  }\r\n\r\n  onPageChange(data) {\r\n    this.pageQuery.skipCount = data.first;\r\n    this.pageQuery.maxResultCount = data.rows;\r\n\r\n    this.get();\r\n  }\r\n\r\n  get() {\r\n    this.loading = true;\r\n    this.store\r\n      .dispatch(new GetUsers(this.pageQuery))\r\n      .pipe(finalize(() => (this.loading = false)))\r\n      .subscribe();\r\n  }\r\n}\r\n","import {\r\n  AuthGuard,\r\n  DynamicLayoutComponent,\r\n  PermissionGuard,\r\n  CoreModule,\r\n  ReplaceableRouteContainerComponent,\r\n  ReplaceableComponents,\r\n} from '@abp/ng.core';\r\nimport { NgModule, Type } from '@angular/core';\r\nimport { RouterModule, Routes, Router, ActivatedRoute } from '@angular/router';\r\nimport { RolesComponent } from './components/roles/roles.component';\r\nimport { UsersComponent } from './components/users/users.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '', redirectTo: 'roles', pathMatch: 'full' },\r\n  {\r\n    path: '',\r\n    component: DynamicLayoutComponent,\r\n    canActivate: [AuthGuard, PermissionGuard],\r\n    children: [\r\n      {\r\n        path: 'roles',\r\n        component: ReplaceableRouteContainerComponent,\r\n        data: {\r\n          requiredPolicy: 'AbpIdentity.Roles',\r\n          replaceableComponent: {\r\n            key: 'Identity.RolesComponent',\r\n            defaultComponent: RolesComponent,\r\n          } as ReplaceableComponents.RouteData<RolesComponent>,\r\n        },\r\n      },\r\n      {\r\n        path: 'users',\r\n        component: ReplaceableRouteContainerComponent,\r\n        data: {\r\n          requiredPolicy: 'AbpIdentity.Users',\r\n          replaceableComponent: {\r\n            key: 'Identity.UsersComponent',\r\n            defaultComponent: UsersComponent,\r\n          } as ReplaceableComponents.RouteData<UsersComponent>,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes), CoreModule],\r\n  exports: [RouterModule],\r\n})\r\nexport class IdentityRoutingModule {}\r\n","import { CoreModule } from '@abp/ng.core';\r\nimport { NgModule, Provider } from '@angular/core';\r\nimport { NgxsModule } from '@ngxs/store';\r\nimport { RolesComponent } from './components/roles/roles.component';\r\nimport { IdentityRoutingModule } from './identity-routing.module';\r\nimport { IdentityState } from './states/identity.state';\r\nimport { NgbTabsetModule, NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ThemeSharedModule } from '@abp/ng.theme.shared';\r\nimport { UsersComponent } from './components/users/users.component';\r\nimport { PermissionManagementModule } from '@abp/ng.permission-management';\r\nimport { TableModule } from 'primeng/table';\r\nimport { NgxValidateCoreModule } from '@ngx-validate/core';\r\n\r\n@NgModule({\r\n  declarations: [RolesComponent, UsersComponent],\r\n  imports: [\r\n    NgxsModule.forFeature([IdentityState]),\r\n    CoreModule,\r\n    IdentityRoutingModule,\r\n    NgbTabsetModule,\r\n    ThemeSharedModule,\r\n    TableModule,\r\n    NgbDropdownModule,\r\n    PermissionManagementModule,\r\n    NgxValidateCoreModule,\r\n  ],\r\n})\r\nexport class IdentityModule {}\r\n","import { ABP } from '@abp/ng.core';\r\nimport { Injectable } from '@angular/core';\r\nimport { Store } from '@ngxs/store';\r\nimport {\r\n  CreateRole,\r\n  CreateUser,\r\n  DeleteRole,\r\n  DeleteUser,\r\n  GetRoleById,\r\n  GetRoles,\r\n  GetUserById,\r\n  GetUsers,\r\n  UpdateRole,\r\n  UpdateUser,\r\n  GetUserRoles,\r\n} from '../actions/identity.actions';\r\nimport { Identity } from '../models/identity';\r\nimport { IdentityState } from '../states/identity.state';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class IdentityStateService {\r\n  constructor(private store: Store) {}\r\n\r\n  getRoles() {\r\n    return this.store.selectSnapshot(IdentityState.getRoles);\r\n  }\r\n  getRolesTotalCount() {\r\n    return this.store.selectSnapshot(IdentityState.getRolesTotalCount);\r\n  }\r\n  getUsers() {\r\n    return this.store.selectSnapshot(IdentityState.getUsers);\r\n  }\r\n  getUsersTotalCount() {\r\n    return this.store.selectSnapshot(IdentityState.getUsersTotalCount);\r\n  }\r\n\r\n  dispatchGetRoles(...args: ConstructorParameters<typeof GetRoles>) {\r\n    return this.store.dispatch(new GetRoles(...args));\r\n  }\r\n\r\n  dispatchGetRoleById(...args: ConstructorParameters<typeof GetRoleById>) {\r\n    return this.store.dispatch(new GetRoleById(...args));\r\n  }\r\n\r\n  dispatchDeleteRole(...args: ConstructorParameters<typeof DeleteRole>) {\r\n    return this.store.dispatch(new DeleteRole(...args));\r\n  }\r\n\r\n  dispatchCreateRole(...args: ConstructorParameters<typeof CreateRole>) {\r\n    return this.store.dispatch(new CreateRole(...args));\r\n  }\r\n\r\n  dispatchUpdateRole(...args: ConstructorParameters<typeof UpdateRole>) {\r\n    return this.store.dispatch(new UpdateRole(...args));\r\n  }\r\n\r\n  dispatchGetUsers(...args: ConstructorParameters<typeof GetUsers>) {\r\n    return this.store.dispatch(new GetUsers(...args));\r\n  }\r\n\r\n  dispatchGetUserById(...args: ConstructorParameters<typeof GetUserById>) {\r\n    return this.store.dispatch(new GetUserById(...args));\r\n  }\r\n\r\n  dispatchDeleteUser(...args: ConstructorParameters<typeof DeleteUser>) {\r\n    return this.store.dispatch(new DeleteUser(...args));\r\n  }\r\n\r\n  dispatchCreateUser(...args: ConstructorParameters<typeof CreateUser>) {\r\n    return this.store.dispatch(new CreateUser(...args));\r\n  }\r\n\r\n  dispatchUpdateUser(...args: ConstructorParameters<typeof UpdateUser>) {\r\n    return this.store.dispatch(new UpdateUser(...args));\r\n  }\r\n\r\n  dispatchGetUserRoles(...args: ConstructorParameters<typeof GetUserRoles>) {\r\n    return this.store.dispatch(new GetUserRoles(...args));\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { RestService, Rest, ABP } from '@abp/ng.core';\r\nimport { Identity } from '../models/identity';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class IdentityService {\r\n  constructor(private rest: RestService) {}\r\n\r\n  getRoles(params = {} as ABP.PageQueryParams): Observable<Identity.RoleResponse> {\r\n    const request: Rest.Request<null> = {\r\n      method: 'GET',\r\n      url: '/api/identity/roles',\r\n      params,\r\n    };\r\n\r\n    return this.rest.request<null, Identity.RoleResponse>(request);\r\n  }\r\n\r\n  getRoleById(id: string): Observable<Identity.RoleItem> {\r\n    const request: Rest.Request<null> = {\r\n      method: 'GET',\r\n      url: `/api/identity/roles/${id}`,\r\n    };\r\n\r\n    return this.rest.request<null, Identity.RoleItem>(request);\r\n  }\r\n\r\n  deleteRole(id: string): Observable<Identity.RoleItem> {\r\n    const request: Rest.Request<null> = {\r\n      method: 'DELETE',\r\n      url: `/api/identity/roles/${id}`,\r\n    };\r\n\r\n    return this.rest.request<null, Identity.RoleItem>(request);\r\n  }\r\n\r\n  createRole(body: Identity.RoleSaveRequest): Observable<Identity.RoleItem> {\r\n    const request: Rest.Request<Identity.RoleSaveRequest> = {\r\n      method: 'POST',\r\n      url: '/api/identity/roles',\r\n      body,\r\n    };\r\n\r\n    return this.rest.request<Identity.RoleSaveRequest, Identity.RoleItem>(request);\r\n  }\r\n\r\n  updateRole(body: Identity.RoleItem): Observable<Identity.RoleItem> {\r\n    const url = `/api/identity/roles/${body.id}`;\r\n    delete body.id;\r\n\r\n    const request: Rest.Request<Identity.RoleItem> = {\r\n      method: 'PUT',\r\n      url,\r\n      body,\r\n    };\r\n\r\n    return this.rest.request<Identity.RoleItem, Identity.RoleItem>(request);\r\n  }\r\n\r\n  getUsers(params = {} as ABP.PageQueryParams): Observable<Identity.UserResponse> {\r\n    const request: Rest.Request<null> = {\r\n      method: 'GET',\r\n      url: '/api/identity/users',\r\n      params,\r\n    };\r\n\r\n    return this.rest.request<null, Identity.UserResponse>(request);\r\n  }\r\n\r\n  getUserById(id: string): Observable<Identity.UserItem> {\r\n    const request: Rest.Request<null> = {\r\n      method: 'GET',\r\n      url: `/api/identity/users/${id}`,\r\n    };\r\n\r\n    return this.rest.request<null, Identity.UserItem>(request);\r\n  }\r\n\r\n  getUserRoles(id: string): Observable<Identity.RoleResponse> {\r\n    const request: Rest.Request<null> = {\r\n      method: 'GET',\r\n      url: `/api/identity/users/${id}/roles`,\r\n    };\r\n\r\n    return this.rest.request<null, Identity.RoleResponse>(request);\r\n  }\r\n\r\n  deleteUser(id: string): Observable<null> {\r\n    const request: Rest.Request<null> = {\r\n      method: 'DELETE',\r\n      url: `/api/identity/users/${id}`,\r\n    };\r\n\r\n    return this.rest.request<null, null>(request);\r\n  }\r\n\r\n  createUser(body: Identity.UserSaveRequest): Observable<Identity.UserItem> {\r\n    const request: Rest.Request<Identity.UserSaveRequest> = {\r\n      method: 'POST',\r\n      url: '/api/identity/users',\r\n      body,\r\n    };\r\n\r\n    return this.rest.request<Identity.UserSaveRequest, Identity.UserItem>(request);\r\n  }\r\n\r\n  updateUser(body: Identity.UserItem): Observable<Identity.UserItem> {\r\n    const url = `/api/identity/users/${body.id}`;\r\n    delete body.id;\r\n\r\n    const request: Rest.Request<Identity.UserItem> = {\r\n      method: 'PUT',\r\n      url,\r\n      body,\r\n    };\r\n\r\n    return this.rest.request<Identity.UserItem, Identity.UserItem>(request);\r\n  }\r\n}\r\n","import { Action, Selector, State, StateContext } from '@ngxs/store';\r\nimport { switchMap, tap, pluck } from 'rxjs/operators';\r\nimport {\r\n  CreateRole,\r\n  CreateUser,\r\n  DeleteRole,\r\n  DeleteUser,\r\n  GetRoleById,\r\n  GetRoles,\r\n  GetUserById,\r\n  GetUsers,\r\n  UpdateRole,\r\n  UpdateUser,\r\n  GetUserRoles,\r\n} from '../actions/identity.actions';\r\nimport { Identity } from '../models/identity';\r\nimport { IdentityService } from '../services/identity.service';\r\n\r\n@State<Identity.State>({\r\n  name: 'IdentityState',\r\n  defaults: { roles: {}, selectedRole: {}, users: {}, selectedUser: {} } as Identity.State,\r\n})\r\nexport class IdentityState {\r\n  @Selector()\r\n  static getRoles({ roles }: Identity.State): Identity.RoleItem[] {\r\n    return roles.items || [];\r\n  }\r\n\r\n  @Selector()\r\n  static getRolesTotalCount({ roles }: Identity.State): number {\r\n    return roles.totalCount || 0;\r\n  }\r\n\r\n  @Selector()\r\n  static getUsers({ users }: Identity.State): Identity.UserItem[] {\r\n    return users.items || [];\r\n  }\r\n\r\n  @Selector()\r\n  static getUsersTotalCount({ users }: Identity.State): number {\r\n    return users.totalCount || 0;\r\n  }\r\n\r\n  constructor(private identityService: IdentityService) {}\r\n\r\n  @Action(GetRoles)\r\n  getRoles({ patchState }: StateContext<Identity.State>, { payload }: GetRoles) {\r\n    return this.identityService.getRoles(payload).pipe(\r\n      tap(roles =>\r\n        patchState({\r\n          roles,\r\n        }),\r\n      ),\r\n    );\r\n  }\r\n\r\n  @Action(GetRoleById)\r\n  getRole({ patchState }: StateContext<Identity.State>, { payload }: GetRoleById) {\r\n    return this.identityService.getRoleById(payload).pipe(\r\n      tap(selectedRole =>\r\n        patchState({\r\n          selectedRole,\r\n        }),\r\n      ),\r\n    );\r\n  }\r\n\r\n  @Action(DeleteRole)\r\n  deleteRole(_, { payload }: GetRoleById) {\r\n    return this.identityService.deleteRole(payload);\r\n  }\r\n\r\n  @Action(CreateRole)\r\n  addRole(_, { payload }: CreateRole) {\r\n    return this.identityService.createRole(payload);\r\n  }\r\n\r\n  @Action(UpdateRole)\r\n  updateRole({ getState }: StateContext<Identity.State>, { payload }: UpdateRole) {\r\n    return this.identityService.updateRole({ ...getState().selectedRole, ...payload });\r\n  }\r\n\r\n  @Action(GetUsers)\r\n  getUsers({ patchState }: StateContext<Identity.State>, { payload }: GetUsers) {\r\n    return this.identityService.getUsers(payload).pipe(\r\n      tap(users =>\r\n        patchState({\r\n          users,\r\n        }),\r\n      ),\r\n    );\r\n  }\r\n\r\n  @Action(GetUserById)\r\n  getUser({ patchState }: StateContext<Identity.State>, { payload }: GetUserById) {\r\n    return this.identityService.getUserById(payload).pipe(\r\n      tap(selectedUser =>\r\n        patchState({\r\n          selectedUser,\r\n        }),\r\n      ),\r\n    );\r\n  }\r\n\r\n  @Action(DeleteUser)\r\n  deleteUser(_, { payload }: GetUserById) {\r\n    return this.identityService.deleteUser(payload);\r\n  }\r\n\r\n  @Action(CreateUser)\r\n  addUser(_, { payload }: CreateUser) {\r\n    return this.identityService.createUser(payload);\r\n  }\r\n\r\n  @Action(UpdateUser)\r\n  updateUser({ getState }: StateContext<Identity.State>, { payload }: UpdateUser) {\r\n    return this.identityService.updateUser({ ...getState().selectedUser, ...payload });\r\n  }\r\n\r\n  @Action(GetUserRoles)\r\n  getUserRoles({ patchState }: StateContext<Identity.State>, { payload }: GetUserRoles) {\r\n    return this.identityService.getUserRoles(payload).pipe(\r\n      pluck('items'),\r\n      tap(selectedUserRoles =>\r\n        patchState({\r\n          selectedUserRoles,\r\n        }),\r\n      ),\r\n    );\r\n  }\r\n}\r\n","/*\r\n * Public API Surface of identity\r\n */\r\n\r\nexport * from './lib/identity.module';\r\nexport * from './lib/actions/identity.actions';\r\nexport * from './lib/components';\r\nexport * from './lib/models/identity';\r\nexport * from './lib/services';\r\nexport * from './lib/states/identity.state';\r\n","import { PermissionManagement } from '../models/permission-management';\r\n\r\nexport class GetPermissions {\r\n  static readonly type = '[PermissionManagement] Get Permissions';\r\n  constructor(public payload: PermissionManagement.GrantedProvider) {}\r\n}\r\n\r\nexport class UpdatePermissions {\r\n  static readonly type = '[PermissionManagement] Update Permissions';\r\n  constructor(public payload: PermissionManagement.GrantedProvider & PermissionManagement.UpdateRequest) {}\r\n}\r\n","import { Component, EventEmitter, Input, Output, Renderer2, TrackByFunction } from '@angular/core';\r\nimport { Select, Store } from '@ngxs/store';\r\nimport { Observable } from 'rxjs';\r\nimport { finalize, map, pluck, take, tap } from 'rxjs/operators';\r\nimport { GetPermissions, UpdatePermissions } from '../actions/permission-management.actions';\r\nimport { PermissionManagement } from '../models/permission-management';\r\nimport { PermissionManagementState } from '../states/permission-management.state';\r\n\r\ntype PermissionWithMargin = PermissionManagement.Permission & {\r\n  margin: number;\r\n};\r\n\r\n@Component({\r\n  selector: 'abp-permission-management',\r\n  templateUrl: './permission-management.component.html',\r\n  exportAs: 'abpPermissionManagement',\r\n})\r\nexport class PermissionManagementComponent\r\n  implements\r\n    PermissionManagement.PermissionManagementComponentInputs,\r\n    PermissionManagement.PermissionManagementComponentOutputs {\r\n  @Input()\r\n  readonly providerName: string;\r\n\r\n  @Input()\r\n  readonly providerKey: string;\r\n\r\n  @Input()\r\n  readonly hideBadges = false;\r\n\r\n  protected _visible = false;\r\n\r\n  @Input()\r\n  get visible(): boolean {\r\n    return this._visible;\r\n  }\r\n\r\n  set visible(value: boolean) {\r\n    if (value === this._visible) return;\r\n\r\n    if (value) {\r\n      this.openModal().subscribe(() => {\r\n        this._visible = true;\r\n        this.visibleChange.emit(true);\r\n      });\r\n    } else {\r\n      this.selectedGroup = null;\r\n      this._visible = false;\r\n      this.visibleChange.emit(false);\r\n    }\r\n  }\r\n\r\n  @Output() readonly visibleChange = new EventEmitter<boolean>();\r\n\r\n  @Select(PermissionManagementState.getPermissionGroups)\r\n  groups$: Observable<PermissionManagement.Group[]>;\r\n\r\n  @Select(PermissionManagementState.getEntityDisplayName)\r\n  entityName$: Observable<string>;\r\n\r\n  selectedGroup: PermissionManagement.Group;\r\n\r\n  permissions: PermissionManagement.Permission[] = [];\r\n\r\n  selectThisTab = false;\r\n\r\n  selectAllTab = false;\r\n\r\n  modalBusy = false;\r\n\r\n  trackByFn: TrackByFunction<PermissionManagement.Group> = (_, item) => item.name;\r\n\r\n  get selectedGroupPermissions$(): Observable<PermissionWithMargin[]> {\r\n    return this.groups$.pipe(\r\n      map(groups =>\r\n        this.selectedGroup\r\n          ? groups.find(group => group.name === this.selectedGroup.name).permissions\r\n          : [],\r\n      ),\r\n      map<PermissionManagement.Permission[], PermissionWithMargin[]>(permissions =>\r\n        permissions.map(\r\n          permission =>\r\n            (({\r\n              ...permission,\r\n              margin: findMargin(permissions, permission),\r\n              isGranted: this.permissions.find(per => per.name === permission.name).isGranted,\r\n            } as any) as PermissionWithMargin),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  constructor(private store: Store, private renderer: Renderer2) {}\r\n\r\n  getChecked(name: string) {\r\n    return (this.permissions.find(per => per.name === name) || { isGranted: false }).isGranted;\r\n  }\r\n\r\n  isGrantedByOtherProviderName(grantedProviders: PermissionManagement.GrantedProvider[]): boolean {\r\n    if (grantedProviders.length) {\r\n      return grantedProviders.findIndex(p => p.providerName !== this.providerName) > -1;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  onClickCheckbox(clickedPermission: PermissionManagement.Permission, value) {\r\n    if (\r\n      clickedPermission.isGranted &&\r\n      this.isGrantedByOtherProviderName(clickedPermission.grantedProviders)\r\n    )\r\n      return;\r\n\r\n    setTimeout(() => {\r\n      this.permissions = this.permissions.map(per => {\r\n        if (clickedPermission.name === per.name) {\r\n          return { ...per, isGranted: !per.isGranted };\r\n        } else if (clickedPermission.name === per.parentName && clickedPermission.isGranted) {\r\n          return { ...per, isGranted: false };\r\n        } else if (clickedPermission.parentName === per.name && !clickedPermission.isGranted) {\r\n          return { ...per, isGranted: true };\r\n        }\r\n\r\n        return per;\r\n      });\r\n\r\n      this.setTabCheckboxState();\r\n      this.setGrantCheckboxState();\r\n    }, 0);\r\n  }\r\n\r\n  setTabCheckboxState() {\r\n    this.selectedGroupPermissions$.pipe(take(1)).subscribe(permissions => {\r\n      const selectedPermissions = permissions.filter(per => per.isGranted);\r\n      const element = document.querySelector('#select-all-in-this-tabs') as any;\r\n\r\n      if (selectedPermissions.length === permissions.length) {\r\n        element.indeterminate = false;\r\n        this.selectThisTab = true;\r\n      } else if (selectedPermissions.length === 0) {\r\n        element.indeterminate = false;\r\n        this.selectThisTab = false;\r\n      } else {\r\n        element.indeterminate = true;\r\n      }\r\n    });\r\n  }\r\n\r\n  setGrantCheckboxState() {\r\n    const selectedAllPermissions = this.permissions.filter(per => per.isGranted);\r\n    const checkboxElement = document.querySelector('#select-all-in-all-tabs') as any;\r\n\r\n    if (selectedAllPermissions.length === this.permissions.length) {\r\n      checkboxElement.indeterminate = false;\r\n      this.selectAllTab = true;\r\n    } else if (selectedAllPermissions.length === 0) {\r\n      checkboxElement.indeterminate = false;\r\n      this.selectAllTab = false;\r\n    } else {\r\n      checkboxElement.indeterminate = true;\r\n    }\r\n  }\r\n\r\n  onClickSelectThisTab() {\r\n    this.selectedGroupPermissions$.pipe(take(1)).subscribe(permissions => {\r\n      permissions.forEach(permission => {\r\n        if (permission.isGranted && this.isGrantedByOtherProviderName(permission.grantedProviders))\r\n          return;\r\n\r\n        const index = this.permissions.findIndex(per => per.name === permission.name);\r\n\r\n        this.permissions = [\r\n          ...this.permissions.slice(0, index),\r\n          { ...this.permissions[index], isGranted: !this.selectThisTab },\r\n          ...this.permissions.slice(index + 1),\r\n        ];\r\n      });\r\n    });\r\n\r\n    this.setGrantCheckboxState();\r\n  }\r\n\r\n  onClickSelectAll() {\r\n    this.permissions = this.permissions.map(permission => ({\r\n      ...permission,\r\n      isGranted:\r\n        this.isGrantedByOtherProviderName(permission.grantedProviders) || !this.selectAllTab,\r\n    }));\r\n\r\n    this.selectThisTab = !this.selectAllTab;\r\n  }\r\n\r\n  onChangeGroup(group: PermissionManagement.Group) {\r\n    this.selectedGroup = group;\r\n    this.setTabCheckboxState();\r\n  }\r\n\r\n  submit() {\r\n    this.modalBusy = true;\r\n    const unchangedPermissions = getPermissions(\r\n      this.store.selectSnapshot(PermissionManagementState.getPermissionGroups),\r\n    );\r\n\r\n    const changedPermissions: PermissionManagement.MinimumPermission[] = this.permissions\r\n      .filter(per =>\r\n        unchangedPermissions.find(unchanged => unchanged.name === per.name).isGranted ===\r\n        per.isGranted\r\n          ? false\r\n          : true,\r\n      )\r\n      .map(({ name, isGranted }) => ({ name, isGranted }));\r\n\r\n    if (changedPermissions.length) {\r\n      this.store\r\n        .dispatch(\r\n          new UpdatePermissions({\r\n            providerKey: this.providerKey,\r\n            providerName: this.providerName,\r\n            permissions: changedPermissions,\r\n          }),\r\n        )\r\n        .pipe(finalize(() => (this.modalBusy = false)))\r\n        .subscribe(() => {\r\n          this.visible = false;\r\n        });\r\n    } else {\r\n      this.modalBusy = false;\r\n      this.visible = false;\r\n    }\r\n  }\r\n\r\n  openModal() {\r\n    if (!this.providerKey || !this.providerName) {\r\n      throw new Error('Provider Key and Provider Name are required.');\r\n    }\r\n\r\n    return this.store\r\n      .dispatch(\r\n        new GetPermissions({\r\n          providerKey: this.providerKey,\r\n          providerName: this.providerName,\r\n        }),\r\n      )\r\n      .pipe(\r\n        pluck('PermissionManagementState', 'permissionRes'),\r\n        tap((permissionRes: PermissionManagement.Response) => {\r\n          this.selectedGroup = permissionRes.groups[0];\r\n          this.permissions = getPermissions(permissionRes.groups);\r\n        }),\r\n      );\r\n  }\r\n\r\n  initModal() {\r\n    this.setTabCheckboxState();\r\n    this.setGrantCheckboxState();\r\n  }\r\n}\r\n\r\nfunction findMargin(\r\n  permissions: PermissionManagement.Permission[],\r\n  permission: PermissionManagement.Permission,\r\n) {\r\n  const parentPermission = permissions.find(per => per.name === permission.parentName);\r\n\r\n  if (parentPermission && parentPermission.parentName) {\r\n    let margin = 20;\r\n    return (margin += findMargin(permissions, parentPermission));\r\n  }\r\n\r\n  return parentPermission ? 20 : 0;\r\n}\r\n\r\nfunction getPermissions(groups: PermissionManagement.Group[]): PermissionManagement.Permission[] {\r\n  return groups.reduce((acc, val) => [...acc, ...val.permissions], []);\r\n}\r\n","import { CoreModule } from '@abp/ng.core';\r\nimport { ThemeSharedModule } from '@abp/ng.theme.shared';\r\nimport { NgModule } from '@angular/core';\r\nimport { NgxsModule } from '@ngxs/store';\r\nimport { PermissionManagementComponent } from './components/permission-management.component';\r\nimport { PermissionManagementState } from './states/permission-management.state';\r\n\r\n@NgModule({\r\n  declarations: [PermissionManagementComponent],\r\n  imports: [CoreModule, ThemeSharedModule, NgxsModule.forFeature([PermissionManagementState])],\r\n  exports: [PermissionManagementComponent],\r\n})\r\nexport class PermissionManagementModule {}\r\n","import { Injectable } from '@angular/core';\r\nimport { Store } from '@ngxs/store';\r\nimport { PermissionManagementState } from '../states/permission-management.state';\r\nimport { PermissionManagement } from '../models';\r\nimport { GetPermissions, UpdatePermissions } from '../actions';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PermissionManagementStateService {\r\n  constructor(private store: Store) {}\r\n\r\n  getPermissionGroups() {\r\n    return this.store.selectSnapshot(PermissionManagementState.getPermissionGroups);\r\n  }\r\n  getEntityDisplayName() {\r\n    return this.store.selectSnapshot(PermissionManagementState.getEntityDisplayName);\r\n  }\r\n\r\n  dispatchGetPermissions(...args: ConstructorParameters<typeof GetPermissions>) {\r\n    return this.store.dispatch(new GetPermissions(...args));\r\n  }\r\n\r\n  dispatchUpdatePermissions(...args: ConstructorParameters<typeof UpdatePermissions>) {\r\n    return this.store.dispatch(new UpdatePermissions(...args));\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { RestService, Rest } from '@abp/ng.core';\r\nimport { Observable } from 'rxjs';\r\nimport { PermissionManagement } from '../models/permission-management';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PermissionManagementService {\r\n  constructor(private rest: RestService) {}\r\n\r\n  getPermissions(params: PermissionManagement.GrantedProvider): Observable<PermissionManagement.Response> {\r\n    const request: Rest.Request<PermissionManagement.GrantedProvider> = {\r\n      method: 'GET',\r\n      url: '/api/abp/permissions',\r\n      params,\r\n    };\r\n\r\n    return this.rest.request<PermissionManagement.GrantedProvider, PermissionManagement.Response>(request);\r\n  }\r\n\r\n  updatePermissions({\r\n    permissions,\r\n    providerKey,\r\n    providerName,\r\n  }: PermissionManagement.GrantedProvider & PermissionManagement.UpdateRequest): Observable<null> {\r\n    const request: Rest.Request<PermissionManagement.UpdateRequest> = {\r\n      method: 'PUT',\r\n      url: '/api/abp/permissions',\r\n      body: { permissions },\r\n      params: { providerKey, providerName },\r\n    };\r\n\r\n    return this.rest.request<PermissionManagement.UpdateRequest, null>(request);\r\n  }\r\n}\r\n","import { State, Action, StateContext, Selector } from '@ngxs/store';\r\nimport { GetPermissions, UpdatePermissions } from '../actions/permission-management.actions';\r\nimport { PermissionManagement } from '../models/permission-management';\r\nimport { PermissionManagementService } from '../services/permission-management.service';\r\nimport { tap } from 'rxjs/operators';\r\n\r\n@State<PermissionManagement.State>({\r\n  name: 'PermissionManagementState',\r\n  defaults: { permissionRes: {} } as PermissionManagement.State,\r\n})\r\nexport class PermissionManagementState {\r\n  @Selector()\r\n  static getPermissionGroups({ permissionRes }: PermissionManagement.State) {\r\n    return permissionRes.groups || [];\r\n  }\r\n\r\n  @Selector()\r\n  static getEntityDisplayName({ permissionRes }: PermissionManagement.State): string {\r\n    return permissionRes.entityDisplayName;\r\n  }\r\n\r\n  constructor(private permissionManagementService: PermissionManagementService) {}\r\n\r\n  @Action(GetPermissions)\r\n  permissionManagementGet({ patchState }: StateContext<PermissionManagement.State>, { payload }: GetPermissions) {\r\n    return this.permissionManagementService.getPermissions(payload).pipe(\r\n      tap(permissionResponse =>\r\n        patchState({\r\n          permissionRes: permissionResponse,\r\n        }),\r\n      ),\r\n    );\r\n  }\r\n\r\n  @Action(UpdatePermissions)\r\n  permissionManagementUpdate(_, { payload }: UpdatePermissions) {\r\n    return this.permissionManagementService.updatePermissions(payload);\r\n  }\r\n}\r\n","/*\r\n * Public API Surface of permission-management\r\n */\r\n\r\nexport * from './lib/permission-management.module';\r\nexport * from './lib/actions';\r\nexport * from './lib/components';\r\nexport * from './lib/models';\r\nexport * from './lib/services';\r\nexport * from './lib/states';\r\n","import { NgModule } from '@angular/core';\r\nimport { IdentityModule } from '@abp/ng.identity';\r\n\r\n@NgModule({\r\n  imports: [IdentityModule],\r\n})\r\nexport class IdentityWrapperModule {}\r\n"],"sourceRoot":"webpack:///"}