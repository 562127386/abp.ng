{"version":3,"sources":["C:/Users/YinChang/Documents/Works/GitHub/abp.ng/libs/account/ngx-admin/src/lib/account-ngx-admin-routing.module.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/libs/account/ngx-admin/src/lib/account-ngx-admin.module.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/libs/account/ngx-admin/src/lib/components/login/login.component.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/libs/account/ngx-admin/src/lib/components/register/register.component.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/libs/account/ngx-admin/src/lib/components/tenant-box/tenant-box.component.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/libs/account/src/lib/account.module.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/libs/account/ngx-admin/src/lib/components/login/login.component.html","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/libs/account/ngx-admin/src/lib/components/register/register.component.html","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/libs/account/ngx-admin/src/lib/components/tenant-box/tenant-box.component.html","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/account/src/lib/components/auth-wrapper/auth-wrapper.component.html","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/account/src/lib/components/change-password/change-password.component.html","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/account/src/lib/components/login/login.component.html","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/account/src/lib/components/manage-profile/manage-profile.component.html","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/account/src/lib/components/personal-settings/personal-settings.component.html","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/account/src/lib/components/register/register.component.html","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/account/src/lib/components/tenant-box/tenant-box.component.html","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/account/src/lib/account-routing.module.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/account/src/lib/account.module.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/account/src/lib/components/auth-wrapper/auth-wrapper.component.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/account/src/lib/components/change-password/change-password.component.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/account/src/lib/components/login/login.component.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/account/src/lib/components/manage-profile/manage-profile.component.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/account/src/lib/components/personal-settings/personal-settings.component.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/account/src/lib/components/register/register.component.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/account/src/lib/components/tenant-box/tenant-box.component.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/account/src/lib/services/account.service.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/account/src/lib/tokens/options.token.ts","src/app/lazy-libs/account-wrapper.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { DynamicLayoutComponent, ABP, eLayoutType } from '@abp/ng.core';\r\nimport { LayoutPassportComponent } from '@fs/ng-alain/basic';\r\nimport { NbAuthComponent, NbLoginComponent, NbRegisterComponent } from '@nebular/auth';\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { RegisterComponent } from './components/register/register.component';\r\nimport { AccountLayoutComponent } from '@fs/ngx-admin/basic';\r\n\r\nconst routes: Routes = [\r\n  { path: '', pathMatch: 'full', redirectTo: 'login' },\r\n  {\r\n    path: '',\r\n    component: DynamicLayoutComponent,\r\n    children: [{ path: 'login', component: LoginComponent }, { path: 'register', component: RegisterComponent }]\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AccountNgxAdminRoutingModule { }\r\n","import { AccountModule } from '@fs/account';\r\nimport { CoreModule } from '@abp/ng.core';\r\nimport { NgModule } from '@angular/core';\r\nimport { NgxAdminBasicModule } from '@fs/ngx-admin/basic';\r\nimport { AccountNgxAdminRoutingModule } from './account-ngx-admin-routing.module';\r\nimport { RegisterComponent } from './components/register/register.component';\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { TenantBoxComponent } from './components/tenant-box/tenant-box.component';\r\n\r\n@NgModule({\r\n  declarations: [LoginComponent, RegisterComponent, TenantBoxComponent],\r\n  imports: [\r\n    CoreModule,\r\n    NgxAdminBasicModule,\r\n    AccountNgxAdminRoutingModule,\r\n    AccountModule\r\n  ]\r\n})\r\nexport class AccountNgxAdminModule { }\r\n","import { LoginComponent as AbpLoginComponent, Options } from '@abp/ng.account';\r\nimport { ToasterService } from '@abp/ng.theme.shared';\r\nimport { Component, Inject, Optional } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { Store } from '@ngxs/store';\r\nimport { OAuthService } from 'angular-oauth2-oidc';\r\nimport { NbLoginComponent } from '@nebular/auth';\r\n\r\n@Component({\r\n    selector: 'ngx-admin-login',\r\n    templateUrl: './login.component.html'\r\n})\r\nexport class LoginComponent extends AbpLoginComponent  {\r\n\r\n    constructor(\r\n        _fb: FormBuilder,\r\n        _oauthService: OAuthService,\r\n        _store: Store,\r\n        _toasterService: ToasterService,\r\n        @Optional() @Inject('ACCOUNT_OPTIONS') _options: Options,\r\n    ) {\r\n        super(_fb, _oauthService, _store, _toasterService, _options);\r\n    }\r\n\r\n}\r\n","import { Component, OnDestroy } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\r\nimport { NzMessageService } from 'ng-zorro-antd';\r\nimport { _HttpClient } from '@delon/theme';\r\nimport { RegisterComponent as AbpRegisterComponent } from '@abp/ng.account';\r\nimport { AccountService } from '@abp/ng.account';\r\nimport { OAuthService } from 'angular-oauth2-oidc';\r\nimport { Store } from '@ngxs/store';\r\nimport { ToasterService } from '@abp/ng.theme.shared';\r\n\r\n@Component({\r\n  selector: 'ngx-admin-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: [],\r\n})\r\nexport class RegisterComponent extends AbpRegisterComponent {\r\n  constructor(\r\n    private _fb: FormBuilder,\r\n    private _accountService: AccountService,\r\n    private _oauthService: OAuthService,\r\n    private _store: Store,\r\n    private _toasterService: ToasterService,\r\n  ) {\r\n    super(_fb, _accountService, _oauthService, _store, _toasterService)\r\n  }\r\n}\r\n","import { TenantBoxComponent as AbpTenantBoxComponent } from '@abp/ng.account';\r\nimport { AccountService } from '@abp/ng.account';\r\nimport { ToasterService } from '@abp/ng.theme.shared';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Store } from '@ngxs/store';\r\n\r\n@Component({\r\n  selector: 'ngx-admin-tenant-box',\r\n  templateUrl: './tenant-box.component.html'\r\n})\r\nexport class TenantBoxComponent extends AbpTenantBoxComponent implements OnInit {\r\n  constructor(\r\n    private _store: Store,\r\n    private _toasterService: ToasterService,\r\n    private _accountService: AccountService\r\n  ) {\r\n    super(_store, _toasterService, _accountService);\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { AccountModule as AbpAccountModule } from '@abp/ng.account';\r\nimport { NgxValidateCoreModule } from '@ngx-validate/core';\r\n\r\n@NgModule({\r\n    imports: [AbpAccountModule],\r\n    exports: [AbpAccountModule, NgxValidateCoreModule]\r\n})\r\nexport class AccountModule {}\r\n","export default \"<ngx-admin-tenant-box></ngx-admin-tenant-box>\\r\\n\\r\\n<nb-card class=\\\"mt-3 shadow-sm rounded bg-light\\\">\\r\\n  <nb-card-body class=\\\"p-5\\\">\\r\\n    <h1 id=\\\"title\\\" class=\\\"title\\\">{{ 'AbpAccount::Login' | abpLocalization }}</h1>\\r\\n\\r\\n    <form (ngSubmit)=\\\"onSubmit()\\\" [formGroup]=\\\"form\\\" novalidate aria-labelledby=\\\"title\\\">\\r\\n\\r\\n      <div class=\\\"form-control-group\\\">\\r\\n        <label class=\\\"label\\\" for=\\\"login-input-user-name-or-email-address\\\">\\r\\n          {{\\r\\n          'AbpAccount::UserNameOrEmailAddress' | abpLocalization\\r\\n          }}\\r\\n        </label>\\r\\n        <input nbInput\\r\\n               fullWidth\\r\\n               id=\\\"login-input-user-name-or-email-address\\\"\\r\\n               fieldSize=\\\"large\\\"\\r\\n               placeholder=\\\"username\\\"\\r\\n               formControlName=\\\"username\\\"\\r\\n               autofocus>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"form-control-group\\\">\\r\\n        <span class=\\\"label-with-link\\\">\\r\\n          <label class=\\\"label\\\" for=\\\"login-input-password\\\">{{ 'AbpAccount::Password' | abpLocalization }}</label>\\r\\n        </span>\\r\\n        <input nbInput\\r\\n               fullWidth\\r\\n               formControlName=\\\"password\\\"\\r\\n               type=\\\"password\\\"\\r\\n               id=\\\"login-input-password\\\"\\r\\n               placeholder=\\\"Password\\\"\\r\\n               fieldSize=\\\"large\\\">\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"form-control-group accept-group\\\">\\r\\n        <nb-checkbox formControlName=\\\"remember\\\">{{ 'AbpAccount::RememberMe' | abpLocalization }}</nb-checkbox>\\r\\n      </div>\\r\\n\\r\\n      <button nbButton\\r\\n              fullWidth\\r\\n              status=\\\"primary\\\"\\r\\n              size=\\\"large\\\"\\r\\n              [disabled]=\\\"!form.valid\\\">\\r\\n        {{ 'AbpAccount::Login' | abpLocalization }}\\r\\n      </button>\\r\\n    </form>\\r\\n\\r\\n    <!-- <section *ngIf=\\\"socialLinks && socialLinks.length > 0\\\" class=\\\"links\\\" aria-label=\\\"Social sign in\\\">\\r\\n      or enter with:\\r\\n      <div class=\\\"socials\\\">\\r\\n        <ng-container *ngFor=\\\"let socialLink of socialLinks\\\">\\r\\n          <a *ngIf=\\\"socialLink.link\\\"\\r\\n             [routerLink]=\\\"socialLink.link\\\"\\r\\n             [attr.target]=\\\"socialLink.target\\\"\\r\\n             [attr.class]=\\\"socialLink.icon\\\"\\r\\n             [class.with-icon]=\\\"socialLink.icon\\\">\\r\\n            <nb-icon *ngIf=\\\"socialLink.icon; else title\\\" [icon]=\\\"socialLink.icon\\\"></nb-icon>\\r\\n            <ng-template #title>{{ socialLink.title }}</ng-template>\\r\\n          </a>\\r\\n          <a *ngIf=\\\"socialLink.url\\\"\\r\\n             [attr.href]=\\\"socialLink.url\\\"\\r\\n             [attr.target]=\\\"socialLink.target\\\"\\r\\n             [attr.class]=\\\"socialLink.icon\\\"\\r\\n             [class.with-icon]=\\\"socialLink.icon\\\">\\r\\n            <nb-icon *ngIf=\\\"socialLink.icon; else title\\\" [icon]=\\\"socialLink.icon\\\"></nb-icon>\\r\\n            <ng-template #title>{{ socialLink.title }}</ng-template>\\r\\n          </a>\\r\\n        </ng-container>\\r\\n      </div>\\r\\n    </section> -->\\r\\n\\r\\n    <section class=\\\"another-action\\\" aria-label=\\\"Register\\\">\\r\\n      {{ 'AbpAccount::AreYouANewUser' | abpLocalization }} <a class=\\\"text-link\\\" routerLink=\\\"/account/register\\\">{{ 'AbpAccount::Register' | abpLocalization }}</a>\\r\\n    </section>\\r\\n  </nb-card-body>\\r\\n</nb-card>\\r\\n\"","export default \"<ngx-admin-tenant-box></ngx-admin-tenant-box>\\r\\n<nb-card class=\\\"mt-3 shadow-sm rounded bg-light\\\">\\r\\n  <nb-card-body class=\\\"p-5\\\">\\r\\n    <h1 id=\\\"title\\\" class=\\\"title\\\">{{ 'AbpAccount::Register' | abpLocalization }}</h1>\\r\\n\\r\\n    <form (ngSubmit)=\\\"onSubmit()\\\" [formGroup]=\\\"form\\\" novalidate aria-labelledby=\\\"title\\\">\\r\\n\\r\\n      <div class=\\\"form-control-group\\\">\\r\\n        <label class=\\\"label\\\" for=\\\"input-user-name\\\">\\r\\n          {{\\r\\n          'AbpAccount::UserName' | abpLocalization\\r\\n          }}\\r\\n        </label>\\r\\n        <input nbInput\\r\\n               formControlName=\\\"username\\\"\\r\\n               id=\\\"input-user-name\\\"\\r\\n               placeholder=\\\"username\\\"\\r\\n               autofocus\\r\\n               fullWidth\\r\\n               fieldSize=\\\"large\\\">\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"form-control-group\\\">\\r\\n        <label class=\\\"label\\\" for=\\\"input-email-address\\\">{{ 'AbpAccount::EmailAddress' | abpLocalization }}</label>\\r\\n        <input nbInput\\r\\n               type=\\\"email\\\"\\r\\n               formControlName=\\\"email\\\"\\r\\n               id=\\\"input-email-address\\\"\\r\\n               placeholder=\\\"Email address\\\"\\r\\n               fullWidth\\r\\n               fieldSize=\\\"large\\\">\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"form-control-group\\\">\\r\\n        <label class=\\\"label\\\" for=\\\"input-password\\\">{{ 'AbpAccount::Password' | abpLocalization }}<</label>\\r\\n        <input nbInput\\r\\n               formControlName=\\\"password\\\"\\r\\n               type=\\\"password\\\"\\r\\n               id=\\\"input-password\\\"\\r\\n               name=\\\"password\\\"\\r\\n               placeholder=\\\"Password\\\"\\r\\n               fullWidth\\r\\n               fieldSize=\\\"large\\\">\\r\\n      </div>\\r\\n\\r\\n      <button nbButton\\r\\n              fullWidth\\r\\n              status=\\\"primary\\\"\\r\\n              size=\\\"large\\\"\\r\\n              [disabled]=\\\"!form.valid\\\">\\r\\n        {{ 'AbpAccount::Register' | abpLocalization }}\\r\\n      </button>\\r\\n    </form>\\r\\n\\r\\n    <section class=\\\"another-action\\\" aria-label=\\\"Sign in\\\">\\r\\n      {{ 'AbpAccount::AlreadyRegistered' | abpLocalization }} <a class=\\\"text-link\\\" routerLink=\\\"/account/login\\\">{{ 'AbpAccount::Login' | abpLocalization }}</a>\\r\\n    </section>\\r\\n\\r\\n  </nb-card-body>\\r\\n</nb-card>\\r\\n\\r\\n\"","export default \"<nb-card class=\\\"shadow-sm rounded mb-3 bg-light\\\">\\r\\n  <nb-card-body class=\\\"px-5\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col\\\">\\r\\n        <span style=\\\"font-size: 0.8em;\\\" class=\\\"text-uppercase text-muted\\\">{{\\r\\n          'AbpUiMultiTenancy::Tenant' | abpLocalization\\r\\n        }}</span\\r\\n        ><br />\\r\\n        <h6 class=\\\"m-0 d-inline-block\\\">\\r\\n          <span>\\r\\n            {{ tenantName || ('AbpUiMultiTenancy::NotSelected' | abpLocalization) }}\\r\\n          </span>\\r\\n        </h6>\\r\\n      </div>\\r\\n      <div class=\\\"col-auto\\\">\\r\\n        <a\\r\\n          id=\\\"AbpTenantSwitchLink\\\"\\r\\n          href=\\\"javascript:void(0);\\\"\\r\\n          class=\\\"btn btn-sm mt-3 btn-outline-primary\\\"\\r\\n          (click)=\\\"onSwitch()\\\"\\r\\n          >{{ 'AbpUiMultiTenancy::Switch' | abpLocalization }}</a\\r\\n        >\\r\\n      </div>\\r\\n    </div>\\r\\n  </nb-card-body>\\r\\n</nb-card>\\r\\n\\r\\n<abp-modal [(visible)]=\\\"isModalVisible\\\" size=\\\"md\\\">\\r\\n  <ng-template #abpHeader>\\r\\n    <h5>Switch Tenant</h5>\\r\\n  </ng-template>\\r\\n  <ng-template #abpBody>\\r\\n    <form (ngSubmit)=\\\"save()\\\">\\r\\n      <div class=\\\"mt-2\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label for=\\\"name\\\">{{ 'AbpUiMultiTenancy::Name' | abpLocalization }}</label>\\r\\n          <input [(ngModel)]=\\\"tenant.name\\\" type=\\\"text\\\" id=\\\"name\\\" name=\\\"tenant\\\" class=\\\"form-control\\\" autofocus />\\r\\n        </div>\\r\\n        <p>{{ 'AbpUiMultiTenancy::SwitchTenantHint' | abpLocalization }}</p>\\r\\n      </div>\\r\\n    </form>\\r\\n  </ng-template>\\r\\n  <ng-template #abpFooter>\\r\\n    <button #abpClose type=\\\"button\\\" class=\\\"btn btn-secondary\\\">\\r\\n      {{ 'AbpTenantManagement::Cancel' | abpLocalization }}\\r\\n    </button>\\r\\n    <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"save()\\\">\\r\\n      <i class=\\\"fa fa-check mr-1\\\"></i> <span>{{ 'AbpTenantManagement::Save' | abpLocalization }}</span>\\r\\n    </button>\\r\\n  </ng-template>\\r\\n</abp-modal>\\r\\n\"","export default \"<div class=\\\"row\\\">\\r\\n  <div class=\\\"mx-auto col col-md-5\\\">\\r\\n    <abp-tenant-box\\r\\n      *abpReplaceableTemplate=\\\"{ componentKey: 'Account.TenantBoxComponent' }\\\"\\r\\n    ></abp-tenant-box>\\r\\n\\r\\n    <div class=\\\"abp-account-container\\\">\\r\\n      <div class=\\\"card mt-3 shadow-sm rounded\\\">\\r\\n        <div class=\\\"card-body p-5\\\">\\r\\n          <ng-content *ngTemplateOutlet=\\\"mainContentRef\\\"></ng-content>\\r\\n        </div>\\r\\n        <ng-content *ngTemplateOutlet=\\\"cancelContentRef\\\"></ng-content>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","export default \"<form [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmit()\\\" [mapErrorsFn]=\\\"mapErrorsFn\\\" validateOnSubmit>\\r\\n  <div class=\\\"form-group\\\">\\r\\n    <label for=\\\"current-password\\\">{{\\r\\n      'AbpIdentity::DisplayName:CurrentPassword' | abpLocalization\\r\\n    }}</label\\r\\n    ><span> * </span\\r\\n    ><input\\r\\n      type=\\\"password\\\"\\r\\n      id=\\\"current-password\\\"\\r\\n      class=\\\"form-control\\\"\\r\\n      formControlName=\\\"password\\\"\\r\\n      autofocus\\r\\n      autocomplete=\\\"current-password\\\"\\r\\n    />\\r\\n  </div>\\r\\n  <div class=\\\"form-group\\\">\\r\\n    <label for=\\\"new-password\\\">{{ 'AbpIdentity::DisplayName:NewPassword' | abpLocalization }}</label\\r\\n    ><span> * </span\\r\\n    ><input\\r\\n      type=\\\"password\\\"\\r\\n      id=\\\"new-password\\\"\\r\\n      class=\\\"form-control\\\"\\r\\n      formControlName=\\\"newPassword\\\"\\r\\n      autocomplete=\\\"new-password\\\"\\r\\n    />\\r\\n  </div>\\r\\n  <div class=\\\"form-group\\\">\\r\\n    <label for=\\\"confirm-new-password\\\">{{\\r\\n      'AbpIdentity::DisplayName:NewPasswordConfirm' | abpLocalization\\r\\n    }}</label\\r\\n    ><span> * </span\\r\\n    ><input\\r\\n      type=\\\"password\\\"\\r\\n      id=\\\"confirm-new-password\\\"\\r\\n      class=\\\"form-control\\\"\\r\\n      formControlName=\\\"repeatNewPassword\\\"\\r\\n      autocomplete=\\\"new-password\\\"\\r\\n    />\\r\\n  </div>\\r\\n  <abp-button\\r\\n    iconClass=\\\"fa fa-check\\\"\\r\\n    buttonClass=\\\"btn btn-primary color-white\\\"\\r\\n    buttonType=\\\"submit\\\"\\r\\n    [loading]=\\\"inProgress\\\"\\r\\n    [disabled]=\\\"form?.invalid\\\"\\r\\n    >{{ 'AbpIdentity::Save' | abpLocalization }}</abp-button\\r\\n  >\\r\\n</form>\\r\\n\"","export default \"<abp-auth-wrapper\\r\\n  *abpReplaceableTemplate=\\\"{\\r\\n    componentKey: 'Account.AuthWrapperComponent',\\r\\n    inputs: {\\r\\n      mainContentRef: { value: mainContentRef },\\r\\n      cancelContentRef: { value: cancelContentRef }\\r\\n    }\\r\\n  }\\\"\\r\\n  [mainContentRef]=\\\"mainContentRef\\\"\\r\\n  [cancelContentRef]=\\\"cancelContentRef\\\"\\r\\n>\\r\\n</abp-auth-wrapper>\\r\\n<ng-template #mainContentRef>\\r\\n  <h4>{{ 'AbpAccount::Login' | abpLocalization }}</h4>\\r\\n  <strong>\\r\\n    {{ 'AbpAccount::AreYouANewUser' | abpLocalization }}\\r\\n    <a class=\\\"text-decoration-none\\\" routerLink=\\\"/account/register\\\">{{\\r\\n      'AbpAccount::Register' | abpLocalization\\r\\n    }}</a>\\r\\n  </strong>\\r\\n  <form [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmit()\\\" validateOnSubmit class=\\\"mt-4\\\">\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"login-input-user-name-or-email-address\\\">{{\\r\\n        'AbpAccount::UserNameOrEmailAddress' | abpLocalization\\r\\n      }}</label>\\r\\n      <input\\r\\n        class=\\\"form-control\\\"\\r\\n        type=\\\"text\\\"\\r\\n        id=\\\"login-input-user-name-or-email-address\\\"\\r\\n        formControlName=\\\"username\\\"\\r\\n        autocomplete=\\\"username\\\"\\r\\n        autofocus\\r\\n      />\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"login-input-password\\\">{{ 'AbpAccount::Password' | abpLocalization }}</label>\\r\\n      <input\\r\\n        class=\\\"form-control\\\"\\r\\n        type=\\\"password\\\"\\r\\n        id=\\\"login-input-password\\\"\\r\\n        formControlName=\\\"password\\\"\\r\\n        autocomplete=\\\"current-password\\\"\\r\\n      />\\r\\n    </div>\\r\\n    <div class=\\\"form-check\\\" validationTarget validationStyle>\\r\\n      <label class=\\\"form-check-label\\\" for=\\\"login-input-remember-me\\\">\\r\\n        <input\\r\\n          class=\\\"form-check-input\\\"\\r\\n          type=\\\"checkbox\\\"\\r\\n          id=\\\"login-input-remember-me\\\"\\r\\n          formControlName=\\\"remember\\\"\\r\\n        />\\r\\n        {{ 'AbpAccount::RememberMe' | abpLocalization }}\\r\\n      </label>\\r\\n    </div>\\r\\n    <abp-button\\r\\n      [loading]=\\\"inProgress\\\"\\r\\n      buttonType=\\\"submit\\\"\\r\\n      name=\\\"Action\\\"\\r\\n      buttonClass=\\\"btn-block btn-lg mt-3 btn btn-primary\\\"\\r\\n    >\\r\\n      {{ 'AbpAccount::Login' | abpLocalization }}\\r\\n    </abp-button>\\r\\n  </form>\\r\\n</ng-template>\\r\\n<ng-template #cancelContentRef>\\r\\n  <div class=\\\"card-footer text-center border-0\\\">\\r\\n    <a routerLink=\\\"/\\\">\\r\\n      <button type=\\\"button\\\" name=\\\"Action\\\" value=\\\"Cancel\\\" class=\\\"px-2 py-0 btn btn-link\\\">\\r\\n        {{ 'AbpAccount::Cancel' | abpLocalization }}\\r\\n      </button>\\r\\n    </a>\\r\\n  </div>\\r\\n</ng-template>\\r\\n\"","export default \"<div id=\\\"AbpContentToolbar\\\"></div>\\r\\n\\r\\n<div class=\\\"card border-0 shadow-sm\\\">\\r\\n  <div class=\\\"card-body\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-3\\\">\\r\\n        <ul class=\\\"nav flex-column nav-pills\\\" id=\\\"nav-tab\\\" role=\\\"tablist\\\">\\r\\n          <li class=\\\"nav-item\\\" (click)=\\\"selectedTab = 0\\\">\\r\\n            <a\\r\\n              class=\\\"nav-link\\\"\\r\\n              [ngClass]=\\\"{ active: selectedTab === 0 }\\\"\\r\\n              role=\\\"tab\\\"\\r\\n              href=\\\"javascript:void(0)\\\"\\r\\n              >{{ 'AbpUi::ChangePassword' | abpLocalization }}</a\\r\\n            >\\r\\n          </li>\\r\\n          <li class=\\\"nav-item\\\" (click)=\\\"selectedTab = 1\\\">\\r\\n            <a\\r\\n              class=\\\"nav-link\\\"\\r\\n              [ngClass]=\\\"{ active: selectedTab === 1 }\\\"\\r\\n              role=\\\"tab\\\"\\r\\n              href=\\\"javascript:void(0)\\\"\\r\\n              >{{ 'AbpAccount::PersonalSettings' | abpLocalization }}</a\\r\\n            >\\r\\n          </li>\\r\\n        </ul>\\r\\n      </div>\\r\\n      <div class=\\\"col-9\\\">\\r\\n        <div class=\\\"tab-content\\\" *ngIf=\\\"selectedTab === 0\\\" [@fadeIn]>\\r\\n          <div class=\\\"tab-pane active\\\" role=\\\"tabpanel\\\">\\r\\n            <h4>\\r\\n              {{ 'AbpIdentity::ChangePassword' | abpLocalization }}\\r\\n              <hr />\\r\\n            </h4>\\r\\n            <abp-change-password-form\\r\\n              *abpReplaceableTemplate=\\\"{ componentKey: 'Account.ChangePasswordComponent' }\\\"\\r\\n            ></abp-change-password-form>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"tab-content\\\" *ngIf=\\\"selectedTab === 1\\\" [@fadeIn]>\\r\\n          <div class=\\\"tab-pane active\\\" role=\\\"tabpanel\\\">\\r\\n            <h4>\\r\\n              {{ 'AbpIdentity::PersonalSettings' | abpLocalization }}\\r\\n              <hr />\\r\\n            </h4>\\r\\n            <abp-personal-settings-form\\r\\n              *abpReplaceableTemplate=\\\"{ componentKey: 'Account.PersonalSettingsComponent' }\\\"\\r\\n            ></abp-personal-settings-form>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","export default \"<form validateOnSubmit *ngIf=\\\"form\\\" [formGroup]=\\\"form\\\" (ngSubmit)=\\\"submit()\\\">\\r\\n  <div class=\\\"form-group\\\">\\r\\n    <label for=\\\"username\\\">{{ 'AbpIdentity::DisplayName:UserName' | abpLocalization }}</label\\r\\n    ><span> * </span\\r\\n    ><input\\r\\n      type=\\\"text\\\"\\r\\n      id=\\\"username\\\"\\r\\n      class=\\\"form-control\\\"\\r\\n      formControlName=\\\"userName\\\"\\r\\n      autofocus\\r\\n      (keydown.space)=\\\"$event.preventDefault()\\\"\\r\\n    />\\r\\n  </div>\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col col-md-6\\\">\\r\\n      <div class=\\\"form-group\\\">\\r\\n        <label for=\\\"name\\\">{{ 'AbpIdentity::DisplayName:Name' | abpLocalization }}</label\\r\\n        ><input type=\\\"text\\\" id=\\\"name\\\" class=\\\"form-control\\\" formControlName=\\\"name\\\" />\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"col col-md-6\\\">\\r\\n      <div class=\\\"form-group\\\">\\r\\n        <label for=\\\"surname\\\">{{ 'AbpIdentity::DisplayName:Surname' | abpLocalization }}</label\\r\\n        ><input type=\\\"text\\\" id=\\\"surname\\\" class=\\\"form-control\\\" formControlName=\\\"surname\\\" />\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\\"form-group\\\">\\r\\n    <label for=\\\"email-address\\\">{{ 'AbpIdentity::DisplayName:Email' | abpLocalization }}</label\\r\\n    ><span> * </span><input type=\\\"text\\\" id=\\\"email-address\\\" class=\\\"form-control\\\" formControlName=\\\"email\\\" />\\r\\n  </div>\\r\\n  <div class=\\\"form-group\\\">\\r\\n    <label for=\\\"phone-number\\\">{{ 'AbpIdentity::DisplayName:PhoneNumber' | abpLocalization }}</label\\r\\n    ><input type=\\\"text\\\" id=\\\"phone-number\\\" class=\\\"form-control\\\" formControlName=\\\"phoneNumber\\\" />\\r\\n  </div>\\r\\n  <abp-button\\r\\n    buttonType=\\\"submit\\\"\\r\\n    iconClass=\\\"fa fa-check\\\"\\r\\n    buttonClass=\\\"btn btn-primary color-white\\\"\\r\\n    [loading]=\\\"inProgress\\\"\\r\\n    [disabled]=\\\"form?.invalid || form?.pristine\\\"\\r\\n  >\\r\\n    {{ 'AbpIdentity::Save' | abpLocalization }}</abp-button\\r\\n  >\\r\\n</form>\\r\\n\"","export default \"<abp-auth-wrapper\\r\\n  *abpReplaceableTemplate=\\\"{\\r\\n    componentKey: 'Account.AuthWrapperComponent',\\r\\n    inputs: {\\r\\n      mainContentRef: { value: mainContentRef }\\r\\n    }\\r\\n  }\\\"\\r\\n  [mainContentRef]=\\\"mainContentRef\\\"\\r\\n>\\r\\n</abp-auth-wrapper>\\r\\n<ng-template #mainContentRef>\\r\\n  <h4>{{ 'AbpAccount::Register' | abpLocalization }}</h4>\\r\\n  <strong>\\r\\n    {{ 'AbpAccount::AlreadyRegistered' | abpLocalization }}\\r\\n    <a class=\\\"text-decoration-none\\\" routerLink=\\\"/account/login\\\">{{\\r\\n      'AbpAccount::Login' | abpLocalization\\r\\n    }}</a>\\r\\n  </strong>\\r\\n  <form [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmit()\\\" validateOnSubmit class=\\\"mt-4\\\">\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"input-user-name\\\">{{ 'AbpAccount::UserName' | abpLocalization }}</label\\r\\n      ><span> * </span\\r\\n      ><input\\r\\n        autofocus\\r\\n        type=\\\"text\\\"\\r\\n        id=\\\"input-user-name\\\"\\r\\n        class=\\\"form-control\\\"\\r\\n        formControlName=\\\"username\\\"\\r\\n        autocomplete=\\\"username\\\"\\r\\n      />\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"input-email-address\\\">{{ 'AbpAccount::EmailAddress' | abpLocalization }}</label\\r\\n      ><span> * </span\\r\\n      ><input type=\\\"email\\\" id=\\\"input-email-address\\\" class=\\\"form-control\\\" formControlName=\\\"email\\\" />\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"input-password\\\">{{ 'AbpAccount::Password' | abpLocalization }}</label\\r\\n      ><span> * </span\\r\\n      ><input\\r\\n        type=\\\"password\\\"\\r\\n        id=\\\"input-password\\\"\\r\\n        class=\\\"form-control\\\"\\r\\n        formControlName=\\\"password\\\"\\r\\n        autocomplete=\\\"current-password\\\"\\r\\n      />\\r\\n    </div>\\r\\n    <abp-button\\r\\n      [loading]=\\\"inProgress\\\"\\r\\n      buttonType=\\\"submit\\\"\\r\\n      name=\\\"Action\\\"\\r\\n      buttonClass=\\\"btn-block btn-lg mt-3 btn btn-primary\\\"\\r\\n    >\\r\\n      {{ 'AbpAccount::Register' | abpLocalization }}\\r\\n    </abp-button>\\r\\n  </form>\\r\\n</ng-template>\\r\\n\"","export default \"<div class=\\\"card shadow-sm rounded mb-3\\\">\\r\\n  <div class=\\\"card-body px-5\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col\\\">\\r\\n        <span style=\\\"font-size: 0.8em;\\\" class=\\\"text-uppercase text-muted\\\">{{\\r\\n          'AbpUiMultiTenancy::Tenant' | abpLocalization\\r\\n        }}</span\\r\\n        ><br />\\r\\n        <h6 class=\\\"m-0 d-inline-block\\\">\\r\\n          <span>\\r\\n            {{ tenantName || ('AbpUiMultiTenancy::NotSelected' | abpLocalization) }}\\r\\n          </span>\\r\\n        </h6>\\r\\n      </div>\\r\\n      <div class=\\\"col-auto\\\">\\r\\n        <a\\r\\n          id=\\\"AbpTenantSwitchLink\\\"\\r\\n          href=\\\"javascript:void(0);\\\"\\r\\n          class=\\\"btn btn-sm mt-3 btn-outline-primary\\\"\\r\\n          (click)=\\\"onSwitch()\\\"\\r\\n          >{{ 'AbpUiMultiTenancy::Switch' | abpLocalization }}</a\\r\\n        >\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<abp-modal size=\\\"md\\\" [(visible)]=\\\"isModalVisible\\\" [busy]=\\\"inProgress\\\">\\r\\n  <ng-template #abpHeader>\\r\\n    <h5>Switch Tenant</h5>\\r\\n  </ng-template>\\r\\n  <ng-template #abpBody>\\r\\n    <form (ngSubmit)=\\\"save()\\\">\\r\\n      <div class=\\\"mt-2\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label for=\\\"name\\\">{{ 'AbpUiMultiTenancy::Name' | abpLocalization }}</label>\\r\\n          <input [(ngModel)]=\\\"tenant.name\\\" type=\\\"text\\\" id=\\\"name\\\" name=\\\"tenant\\\" class=\\\"form-control\\\" autofocus />\\r\\n        </div>\\r\\n        <p>{{ 'AbpUiMultiTenancy::SwitchTenantHint' | abpLocalization }}</p>\\r\\n      </div>\\r\\n    </form>\\r\\n  </ng-template>\\r\\n  <ng-template #abpFooter>\\r\\n    <button #abpClose type=\\\"button\\\" class=\\\"btn btn-secondary\\\">\\r\\n      {{ 'AbpTenantManagement::Cancel' | abpLocalization }}\\r\\n    </button>\\r\\n    <abp-button buttonType=\\\"button\\\" buttonClass=\\\"btn btn-primary\\\" (click)=\\\"save()\\\">\\r\\n      <i class=\\\"fa fa-check mr-1\\\"></i> <span>{{ 'AbpTenantManagement::Save' | abpLocalization }}</span>\\r\\n    </abp-button>\\r\\n  </ng-template>\\r\\n</abp-modal>\\r\\n\"","import {\r\n  DynamicLayoutComponent,\r\n  AuthGuard,\r\n  ReplaceableComponents,\r\n  ReplaceableRouteContainerComponent,\r\n} from '@abp/ng.core';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { ManageProfileComponent } from './components/manage-profile/manage-profile.component';\r\nimport { RegisterComponent } from './components/register/register.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '', pathMatch: 'full', redirectTo: 'login' },\r\n  {\r\n    path: '',\r\n    component: DynamicLayoutComponent,\r\n    children: [\r\n      {\r\n        path: 'login',\r\n        component: ReplaceableRouteContainerComponent,\r\n        data: {\r\n          replaceableComponent: {\r\n            key: 'Account.LoginComponent',\r\n            defaultComponent: LoginComponent,\r\n          } as ReplaceableComponents.RouteData<LoginComponent>,\r\n        },\r\n      },\r\n      {\r\n        path: 'register',\r\n        component: ReplaceableRouteContainerComponent,\r\n        data: {\r\n          replaceableComponent: {\r\n            key: 'Account.RegisterComponent',\r\n            defaultComponent: RegisterComponent,\r\n          } as ReplaceableComponents.RouteData<RegisterComponent>,\r\n        },\r\n      },\r\n      {\r\n        path: 'manage-profile',\r\n        component: ReplaceableRouteContainerComponent,\r\n        canActivate: [AuthGuard],\r\n        data: {\r\n          replaceableComponent: {\r\n            key: 'Account.ManageProfileComponent',\r\n            defaultComponent: ManageProfileComponent,\r\n          } as ReplaceableComponents.RouteData<ManageProfileComponent>,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AccountRoutingModule {}\r\n","import { CoreModule } from '@abp/ng.core';\r\nimport { ThemeSharedModule } from '@abp/ng.theme.shared';\r\nimport { NgModule, Provider } from '@angular/core';\r\nimport { NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { NgxValidateCoreModule } from '@ngx-validate/core';\r\nimport { TableModule } from 'primeng/table';\r\nimport { AccountRoutingModule } from './account-routing.module';\r\nimport { ChangePasswordComponent } from './components/change-password/change-password.component';\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { ManageProfileComponent } from './components/manage-profile/manage-profile.component';\r\nimport { PersonalSettingsComponent } from './components/personal-settings/personal-settings.component';\r\nimport { RegisterComponent } from './components/register/register.component';\r\nimport { TenantBoxComponent } from './components/tenant-box/tenant-box.component';\r\nimport { Options } from './models/options';\r\nimport { ACCOUNT_OPTIONS, optionsFactory } from './tokens/options.token';\r\nimport { AuthWrapperComponent } from './components/auth-wrapper/auth-wrapper.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AuthWrapperComponent,\r\n    LoginComponent,\r\n    RegisterComponent,\r\n    TenantBoxComponent,\r\n    ChangePasswordComponent,\r\n    ManageProfileComponent,\r\n    PersonalSettingsComponent,\r\n  ],\r\n  imports: [\r\n    CoreModule,\r\n    AccountRoutingModule,\r\n    ThemeSharedModule,\r\n    TableModule,\r\n    NgbDropdownModule,\r\n    NgxValidateCoreModule,\r\n  ],\r\n  exports: [],\r\n})\r\nexport class AccountModule {}\r\n","import { Component, Input, TemplateRef } from '@angular/core';\r\nimport { Account } from '../../models/account';\r\n\r\n@Component({\r\n  selector: 'abp-auth-wrapper',\r\n  templateUrl: './auth-wrapper.component.html',\r\n  exportAs: 'abpAuthWrapper',\r\n})\r\nexport class AuthWrapperComponent\r\n  implements Account.AuthWrapperComponentInputs, Account.AuthWrapperComponentOutputs {\r\n  @Input()\r\n  readonly mainContentRef: TemplateRef<any>;\r\n\r\n  @Input()\r\n  readonly cancelContentRef: TemplateRef<any>;\r\n}\r\n","import { ChangePassword, ConfigState, ABP } from '@abp/ng.core';\r\nimport { ToasterService } from '@abp/ng.theme.shared';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { comparePasswords, Validation, PasswordRules, validatePassword } from '@ngx-validate/core';\r\nimport { Store } from '@ngxs/store';\r\nimport snq from 'snq';\r\nimport { finalize } from 'rxjs/operators';\r\nimport { Account } from '../../models/account';\r\n\r\nconst { minLength, required, maxLength } = Validators;\r\n\r\nconst PASSWORD_FIELDS = ['newPassword', 'repeatNewPassword'];\r\n\r\n@Component({\r\n  selector: 'abp-change-password-form',\r\n  templateUrl: './change-password.component.html',\r\n  exportAs: 'abpChangePasswordForm',\r\n})\r\nexport class ChangePasswordComponent\r\n  implements OnInit, Account.ChangePasswordComponentInputs, Account.ChangePasswordComponentOutputs {\r\n  form: FormGroup;\r\n\r\n  inProgress: boolean;\r\n\r\n  mapErrorsFn: Validation.MapErrorsFn = (errors, groupErrors, control) => {\r\n    if (PASSWORD_FIELDS.indexOf(control.name) < 0) return errors;\r\n\r\n    return errors.concat(groupErrors.filter(({ key }) => key === 'passwordMismatch'));\r\n  };\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private store: Store,\r\n    private toasterService: ToasterService,\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    const passwordRules: ABP.Dictionary<string> = this.store.selectSnapshot(\r\n      ConfigState.getSettings('Identity.Password'),\r\n    );\r\n    const passwordRulesArr = [] as PasswordRules;\r\n    let requiredLength = 1;\r\n\r\n    if ((passwordRules['Abp.Identity.Password.RequireDigit'] || '').toLowerCase() === 'true') {\r\n      passwordRulesArr.push('number');\r\n    }\r\n\r\n    if ((passwordRules['Abp.Identity.Password.RequireLowercase'] || '').toLowerCase() === 'true') {\r\n      passwordRulesArr.push('small');\r\n    }\r\n\r\n    if ((passwordRules['Abp.Identity.Password.RequireUppercase'] || '').toLowerCase() === 'true') {\r\n      passwordRulesArr.push('capital');\r\n    }\r\n\r\n    if (+(passwordRules['Abp.Identity.Password.RequiredUniqueChars'] || 0) > 0) {\r\n      passwordRulesArr.push('special');\r\n    }\r\n\r\n    if (Number.isInteger(+passwordRules['Abp.Identity.Password.RequiredLength'])) {\r\n      requiredLength = +passwordRules['Abp.Identity.Password.RequiredLength'];\r\n    }\r\n\r\n    this.form = this.fb.group(\r\n      {\r\n        password: ['', required],\r\n        newPassword: [\r\n          '',\r\n          {\r\n            validators: [\r\n              required,\r\n              validatePassword(passwordRulesArr),\r\n              minLength(requiredLength),\r\n              maxLength(32),\r\n            ],\r\n          },\r\n        ],\r\n        repeatNewPassword: [\r\n          '',\r\n          {\r\n            validators: [\r\n              required,\r\n              validatePassword(passwordRulesArr),\r\n              minLength(requiredLength),\r\n              maxLength(32),\r\n            ],\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        validators: [comparePasswords(PASSWORD_FIELDS)],\r\n      },\r\n    );\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.form.invalid) return;\r\n    this.inProgress = true;\r\n    this.store\r\n      .dispatch(\r\n        new ChangePassword({\r\n          currentPassword: this.form.get('password').value,\r\n          newPassword: this.form.get('newPassword').value,\r\n        }),\r\n      )\r\n      .pipe(finalize(() => (this.inProgress = false)))\r\n      .subscribe({\r\n        next: () => {\r\n          this.form.reset();\r\n          this.toasterService.success('AbpAccount::PasswordChangedMessage', 'Success', {\r\n            life: 5000,\r\n          });\r\n        },\r\n        error: err => {\r\n          this.toasterService.error(\r\n            snq(() => err.error.error.message, 'AbpAccount::DefaultErrorMessage'),\r\n            'Error',\r\n            {\r\n              life: 7000,\r\n            },\r\n          );\r\n        },\r\n      });\r\n  }\r\n}\r\n","import { GetAppConfiguration, ConfigState, SessionState } from '@abp/ng.core';\r\nimport { Component, Inject, Optional } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Navigate } from '@ngxs/router-plugin';\r\nimport { Store } from '@ngxs/store';\r\nimport { OAuthService } from 'angular-oauth2-oidc';\r\nimport { from, throwError } from 'rxjs';\r\nimport { Options } from '../../models/options';\r\nimport { ToasterService } from '@abp/ng.theme.shared';\r\nimport { catchError, finalize, switchMap, tap } from 'rxjs/operators';\r\nimport snq from 'snq';\r\nimport { HttpHeaders } from '@angular/common/http';\r\n\r\nconst { maxLength, minLength, required } = Validators;\r\n\r\n@Component({\r\n  selector: 'abp-login',\r\n  templateUrl: './login.component.html',\r\n})\r\nexport class LoginComponent {\r\n  form: FormGroup;\r\n\r\n  inProgress: boolean;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private oauthService: OAuthService,\r\n    private store: Store,\r\n    private toasterService: ToasterService,\r\n    @Optional() @Inject('ACCOUNT_OPTIONS') private options: Options,\r\n  ) {\r\n    this.oauthService.configure(this.store.selectSnapshot(ConfigState.getOne('environment')).oAuthConfig);\r\n    this.oauthService.loadDiscoveryDocument();\r\n\r\n    this.form = this.fb.group({\r\n      username: ['', [required, maxLength(255)]],\r\n      password: ['', [required, maxLength(32)]],\r\n      remember: [false],\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.form.invalid) return;\r\n    // this.oauthService.setStorage(this.form.value.remember ? localStorage : sessionStorage);\r\n\r\n    this.inProgress = true;\r\n    const tenant = this.store.selectSnapshot(SessionState.getTenant);\r\n    from(\r\n      this.oauthService.fetchTokenUsingPasswordFlow(\r\n        this.form.get('username').value,\r\n        this.form.get('password').value,\r\n        new HttpHeaders({ ...(tenant && tenant.id && { __tenant: tenant.id }) }),\r\n      ),\r\n    )\r\n      .pipe(\r\n        switchMap(() => this.store.dispatch(new GetAppConfiguration())),\r\n        tap(() => {\r\n          const redirectUrl = snq(() => window.history.state).redirectUrl || (this.options || {}).redirectUrl || '/';\r\n          this.store.dispatch(new Navigate([redirectUrl]));\r\n        }),\r\n        catchError(err => {\r\n          this.toasterService.error(\r\n            snq(() => err.error.error_description) ||\r\n              snq(() => err.error.error.message, 'AbpAccount::DefaultErrorMessage'),\r\n            'Error',\r\n            { life: 7000 },\r\n          );\r\n          return throwError(err);\r\n        }),\r\n        finalize(() => (this.inProgress = false)),\r\n      )\r\n      .subscribe();\r\n  }\r\n}\r\n","import { fadeIn } from '@abp/ng.theme.shared';\r\nimport { transition, trigger, useAnimation } from '@angular/animations';\r\nimport { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'abp-manage-profile',\r\n  templateUrl: './manage-profile.component.html',\r\n  animations: [trigger('fadeIn', [transition(':enter', useAnimation(fadeIn))])],\r\n})\r\nexport class ManageProfileComponent {\r\n  selectedTab = 0;\r\n}\r\n","import { GetProfile, Profile, ProfileState, UpdateProfile } from '@abp/ng.core';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Select, Store } from '@ngxs/store';\r\nimport { Observable } from 'rxjs';\r\nimport { take, withLatestFrom, finalize } from 'rxjs/operators';\r\nimport { ToasterService } from '@abp/ng.theme.shared';\r\nimport { Account } from '../../models/account';\r\n\r\nconst { maxLength, required, email } = Validators;\r\n\r\n@Component({\r\n  selector: 'abp-personal-settings-form',\r\n  templateUrl: './personal-settings.component.html',\r\n  exportAs: 'abpPersonalSettingsForm',\r\n})\r\nexport class PersonalSettingsComponent\r\n  implements\r\n    OnInit,\r\n    Account.PersonalSettingsComponentInputs,\r\n    Account.PersonalSettingsComponentOutputs {\r\n  @Select(ProfileState.getProfile)\r\n  profile$: Observable<Profile.Response>;\r\n\r\n  form: FormGroup;\r\n\r\n  inProgress: boolean;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private store: Store,\r\n    private toasterService: ToasterService,\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.buildForm();\r\n  }\r\n\r\n  buildForm() {\r\n    this.store\r\n      .dispatch(new GetProfile())\r\n      .pipe(withLatestFrom(this.profile$), take(1))\r\n      .subscribe(([, profile]) => {\r\n        this.form = this.fb.group({\r\n          userName: [profile.userName, [required, maxLength(256)]],\r\n          email: [profile.email, [required, email, maxLength(256)]],\r\n          name: [profile.name || '', [maxLength(64)]],\r\n          surname: [profile.surname || '', [maxLength(64)]],\r\n          phoneNumber: [profile.phoneNumber || '', [maxLength(16)]],\r\n        });\r\n      });\r\n  }\r\n\r\n  submit() {\r\n    if (this.form.invalid) return;\r\n    this.inProgress = true;\r\n    this.store\r\n      .dispatch(new UpdateProfile(this.form.value))\r\n      .pipe(finalize(() => (this.inProgress = false)))\r\n      .subscribe(() => {\r\n        this.toasterService.success('AbpAccount::PersonalSettingsSaved', 'Success', { life: 5000 });\r\n      });\r\n  }\r\n}\r\n","import { ConfigState, GetAppConfiguration, ABP, SessionState } from '@abp/ng.core';\r\nimport { ToasterService } from '@abp/ng.theme.shared';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Navigate } from '@ngxs/router-plugin';\r\nimport { Store } from '@ngxs/store';\r\nimport { OAuthService } from 'angular-oauth2-oidc';\r\nimport { from, throwError } from 'rxjs';\r\nimport { catchError, finalize, switchMap, take, tap } from 'rxjs/operators';\r\nimport snq from 'snq';\r\nimport { RegisterRequest } from '../../models';\r\nimport { AccountService } from '../../services/account.service';\r\nimport { PasswordRules, validatePassword } from '@ngx-validate/core';\r\nimport { HttpHeaders } from '@angular/common/http';\r\nconst { maxLength, minLength, required, email } = Validators;\r\n\r\n@Component({\r\n  selector: 'abp-register',\r\n  templateUrl: './register.component.html',\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  form: FormGroup;\r\n\r\n  inProgress: boolean;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private accountService: AccountService,\r\n    private oauthService: OAuthService,\r\n    private store: Store,\r\n    private toasterService: ToasterService,\r\n  ) {\r\n    this.oauthService.configure(\r\n      this.store.selectSnapshot(ConfigState.getOne('environment')).oAuthConfig,\r\n    );\r\n    this.oauthService.loadDiscoveryDocument();\r\n  }\r\n\r\n  ngOnInit() {\r\n    const passwordRules: ABP.Dictionary<string> = this.store.selectSnapshot(\r\n      ConfigState.getSettings('Identity.Password'),\r\n    );\r\n    const passwordRulesArr = [] as PasswordRules;\r\n    let requiredLength = 1;\r\n\r\n    if ((passwordRules['Abp.Identity.Password.RequireDigit'] || '').toLowerCase() === 'true') {\r\n      passwordRulesArr.push('number');\r\n    }\r\n\r\n    if ((passwordRules['Abp.Identity.Password.RequireLowercase'] || '').toLowerCase() === 'true') {\r\n      passwordRulesArr.push('small');\r\n    }\r\n\r\n    if ((passwordRules['Abp.Identity.Password.RequireUppercase'] || '').toLowerCase() === 'true') {\r\n      passwordRulesArr.push('capital');\r\n    }\r\n\r\n    if (+(passwordRules['Abp.Identity.Password.RequiredUniqueChars'] || 0) > 0) {\r\n      passwordRulesArr.push('special');\r\n    }\r\n\r\n    if (Number.isInteger(+passwordRules['Abp.Identity.Password.RequiredLength'])) {\r\n      requiredLength = +passwordRules['Abp.Identity.Password.RequiredLength'];\r\n    }\r\n\r\n    this.form = this.fb.group({\r\n      username: ['', [required, maxLength(255)]],\r\n      password: [\r\n        '',\r\n        [required, validatePassword(passwordRulesArr), minLength(requiredLength), maxLength(32)],\r\n      ],\r\n      email: ['', [required, email]],\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.form.invalid) return;\r\n\r\n    this.inProgress = true;\r\n\r\n    const newUser = {\r\n      userName: this.form.get('username').value,\r\n      password: this.form.get('password').value,\r\n      emailAddress: this.form.get('email').value,\r\n      appName: 'Angular',\r\n    } as RegisterRequest;\r\n\r\n    const tenant = this.store.selectSnapshot(SessionState.getTenant);\r\n\r\n    this.accountService\r\n      .register(newUser)\r\n      .pipe(\r\n        switchMap(() =>\r\n          from(\r\n            this.oauthService.fetchTokenUsingPasswordFlow(\r\n              newUser.userName,\r\n              newUser.password,\r\n              new HttpHeaders({\r\n                ...(tenant && tenant.id && { __tenant: tenant.id }),\r\n              }),\r\n            ),\r\n          ),\r\n        ),\r\n        switchMap(() => this.store.dispatch(new GetAppConfiguration())),\r\n        tap(() => this.store.dispatch(new Navigate(['/']))),\r\n        take(1),\r\n        catchError(err => {\r\n          this.toasterService.error(\r\n            snq(() => err.error.error_description) ||\r\n              snq(() => err.error.error.message, 'AbpAccount::DefaultErrorMessage'),\r\n            'Error',\r\n            { life: 7000 },\r\n          );\r\n          return throwError(err);\r\n        }),\r\n        finalize(() => (this.inProgress = false)),\r\n      )\r\n      .subscribe();\r\n  }\r\n}\r\n","import { ABP, SetTenant, SessionState } from '@abp/ng.core';\r\nimport { ToasterService } from '@abp/ng.theme.shared';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Store } from '@ngxs/store';\r\nimport { throwError } from 'rxjs';\r\nimport { catchError, take, finalize } from 'rxjs/operators';\r\nimport snq from 'snq';\r\nimport { AccountService } from '../../services/account.service';\r\nimport { Account } from '../../models/account';\r\n\r\n@Component({\r\n  selector: 'abp-tenant-box',\r\n  templateUrl: './tenant-box.component.html',\r\n})\r\nexport class TenantBoxComponent\r\n  implements OnInit, Account.TenantBoxComponentInputs, Account.TenantBoxComponentOutputs {\r\n  tenant = {} as ABP.BasicItem;\r\n\r\n  tenantName: string;\r\n\r\n  isModalVisible: boolean;\r\n\r\n  inProgress: boolean;\r\n\r\n  constructor(\r\n    private store: Store,\r\n    private toasterService: ToasterService,\r\n    private accountService: AccountService,\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.tenant = this.store.selectSnapshot(SessionState.getTenant) || ({} as ABP.BasicItem);\r\n    this.tenantName = this.tenant.name || '';\r\n  }\r\n\r\n  onSwitch() {\r\n    this.isModalVisible = true;\r\n  }\r\n\r\n  save() {\r\n    if (this.tenant.name && !this.inProgress) {\r\n      this.inProgress = true;\r\n      this.accountService\r\n        .findTenant(this.tenant.name)\r\n        .pipe(\r\n          finalize(() => (this.inProgress = false)),\r\n          take(1),\r\n          catchError(err => {\r\n            this.toasterService.error(\r\n              snq(() => err.error.error_description, 'AbpUi::DefaultErrorMessage'),\r\n              'AbpUi::Error',\r\n            );\r\n            return throwError(err);\r\n          }),\r\n        )\r\n        .subscribe(({ success, tenantId }) => {\r\n          if (success) {\r\n            this.tenant = {\r\n              id: tenantId,\r\n              name: this.tenant.name,\r\n            };\r\n            this.tenantName = this.tenant.name;\r\n            this.isModalVisible = false;\r\n          } else {\r\n            this.toasterService.error(\r\n              'AbpUiMultiTenancy::GivenTenantIsNotAvailable',\r\n              'AbpUi::Error',\r\n              {\r\n                messageLocalizationParams: [this.tenant.name],\r\n              },\r\n            );\r\n            this.tenant = {} as ABP.BasicItem;\r\n          }\r\n          this.store.dispatch(new SetTenant(success ? this.tenant : null));\r\n        });\r\n    } else {\r\n      this.store.dispatch(new SetTenant(null));\r\n      this.tenantName = null;\r\n      this.isModalVisible = false;\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { RestService, Rest } from '@abp/ng.core';\r\nimport { RegisterResponse, RegisterRequest, TenantIdResponse } from '../models';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AccountService {\r\n  constructor(private rest: RestService) {}\r\n\r\n  findTenant(tenantName: string): Observable<TenantIdResponse> {\r\n    const request: Rest.Request<null> = {\r\n      method: 'GET',\r\n      url: `/api/abp/multi-tenancy/tenants/by-name/${tenantName}`,\r\n    };\r\n\r\n    return this.rest.request<null, TenantIdResponse>(request);\r\n  }\r\n\r\n  register(body: RegisterRequest): Observable<RegisterResponse> {\r\n    const request: Rest.Request<RegisterRequest> = {\r\n      method: 'POST',\r\n      url: '/api/account/register',\r\n      body,\r\n    };\r\n\r\n    return this.rest.request<RegisterRequest, RegisterResponse>(request, { skipHandleError: true });\r\n  }\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\nimport { Options } from '../models/options';\r\n\r\nexport function optionsFactory(options: Options) {\r\n  return {\r\n    redirectUrl: '/',\r\n    ...options,\r\n  };\r\n}\r\n\r\nexport const ACCOUNT_OPTIONS = new InjectionToken('ACCOUNT_OPTIONS');\r\n","import { NgModule } from '@angular/core';\r\nimport { AccountModule } from '@abp/ng.account';\r\nimport { AccountNgxAdminModule } from '@fs/account/ngx-admin';\r\n\r\n@NgModule({\r\n    imports: [AccountNgxAdminModule],\r\n})\r\nexport class AccountWrapperModule { }\r\n"],"sourceRoot":"webpack:///"}