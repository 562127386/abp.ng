{"version":3,"sources":["C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/setting-management/src/lib/components/setting-management.component.html","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/setting-management/src/lib/actions/setting-management.actions.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/setting-management/src/lib/components/setting-management.component.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/setting-management/src/lib/setting-management-routing.module.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/setting-management/src/lib/setting-management.module.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/setting-management/src/lib/states/setting-management.state.ts","src/app/lazy-libs/setting-management-wrapper.module.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<div class=\\\"row entry-row\\\">\\r\\n  <div class=\\\"col-auto\\\">\\r\\n    <h1 class=\\\"content-header-title\\\">{{ 'AbpSettingManagement::Settings' | abpLocalization }}</h1>\\r\\n  </div>\\r\\n  <div id=\\\"breadcrumb\\\" class=\\\"col-md-auto pl-md-0\\\">\\r\\n    <abp-breadcrumb></abp-breadcrumb>\\r\\n  </div>\\r\\n  <div class=\\\"col\\\">\\r\\n    <div class=\\\"text-lg-right pt-2\\\" id=\\\"AbpContentToolbar\\\"></div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<div id=\\\"SettingManagementWrapper\\\">\\r\\n  <div class=\\\"card\\\">\\r\\n    <div class=\\\"card-body\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-12 col-md-3\\\">\\r\\n          <ul class=\\\"nav flex-column nav-pills\\\" id=\\\"nav-tab\\\" role=\\\"tablist\\\">\\r\\n            <li\\r\\n              *abpFor=\\\"let setting of settings; trackBy: trackByFn\\\"\\r\\n              (click)=\\\"selected = setting\\\"\\r\\n              class=\\\"nav-item pointer\\\"\\r\\n              [abpPermission]=\\\"setting.requiredPolicy\\\"\\r\\n            >\\r\\n              <a\\r\\n                class=\\\"nav-link\\\"\\r\\n                [id]=\\\"setting.name + '-tab'\\\"\\r\\n                role=\\\"tab\\\"\\r\\n                [class.active]=\\\"setting.name === selected.name\\\"\\r\\n                >{{ setting.name | abpLocalization }}</a\\r\\n              >\\r\\n            </li>\\r\\n          </ul>\\r\\n        </div>\\r\\n        <div class=\\\"col-12 col-md-9\\\">\\r\\n          <div *ngIf=\\\"settings.length\\\" class=\\\"tab-content\\\">\\r\\n            <div class=\\\"tab-pane fade show active\\\" [id]=\\\"selected.name + '-tab'\\\" role=\\\"tabpanel\\\">\\r\\n              <ng-container *ngComponentOutlet=\\\"selected.component\\\"></ng-container>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","import { SettingTab } from '@abp/ng.theme.shared';\r\n\r\nexport class SetSelectedSettingTab {\r\n  static readonly type = '[SettingManagement] Set Selected Tab';\r\n  constructor(public payload: SettingTab) {}\r\n}\r\n","import { Component, TrackByFunction, OnInit } from '@angular/core';\r\nimport { SettingTab, getSettingTabs } from '@abp/ng.theme.shared';\r\nimport { Router } from '@angular/router';\r\nimport { Store } from '@ngxs/store';\r\nimport { ConfigState } from '@abp/ng.core';\r\nimport { SettingManagementState } from '../states/setting-management.state';\r\nimport { SetSelectedSettingTab } from '../actions/setting-management.actions';\r\nimport { RouterState } from '@ngxs/router-plugin';\r\n\r\n@Component({\r\n  selector: 'abp-setting-management',\r\n  templateUrl: './setting-management.component.html',\r\n})\r\nexport class SettingManagementComponent implements OnInit {\r\n  settings: SettingTab[] = [];\r\n\r\n  set selected(value: SettingTab) {\r\n    this.store.dispatch(new SetSelectedSettingTab(value));\r\n  }\r\n  get selected(): SettingTab {\r\n    const value = this.store.selectSnapshot(SettingManagementState.getSelectedTab);\r\n\r\n    if ((!value || !value.component) && this.settings.length) {\r\n      return this.settings[0];\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  trackByFn: TrackByFunction<SettingTab> = (_, item) => item.name;\r\n\r\n  constructor(private router: Router, private store: Store) {}\r\n\r\n  ngOnInit() {\r\n    this.settings = getSettingTabs()\r\n      .filter(setting => this.store.selectSnapshot(ConfigState.getGrantedPolicy(setting.requiredPolicy)))\r\n      .sort((a, b) => a.order - b.order);\r\n\r\n    if (!this.selected && this.settings.length) {\r\n      this.selected = this.settings[0];\r\n    }\r\n  }\r\n}\r\n","import {\r\n  DynamicLayoutComponent,\r\n  ReplaceableComponents,\r\n  ReplaceableRouteContainerComponent,\r\n} from '@abp/ng.core';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { SettingManagementComponent } from './components/setting-management.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: DynamicLayoutComponent,\r\n    children: [\r\n      {\r\n        path: '',\r\n        component: ReplaceableRouteContainerComponent,\r\n        data: {\r\n          requiredPolicy: 'AbpAccount.SettingManagement',\r\n          replaceableComponent: {\r\n            key: 'SettingManagement.SettingManagementComponent',\r\n            defaultComponent: SettingManagementComponent,\r\n          } as ReplaceableComponents.RouteData,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class SettingManagementRoutingModule {}\r\n","import { CoreModule } from '@abp/ng.core';\r\nimport { ThemeSharedModule } from '@abp/ng.theme.shared';\r\nimport { NgModule } from '@angular/core';\r\nimport { SettingManagementRoutingModule } from './setting-management-routing.module';\r\nimport { SettingManagementComponent } from './components/setting-management.component';\r\nimport { NgxsModule } from '@ngxs/store';\r\nimport { SettingManagementState } from './states/setting-management.state';\r\n\r\n@NgModule({\r\n  declarations: [SettingManagementComponent],\r\n  imports: [\r\n    SettingManagementRoutingModule,\r\n    CoreModule,\r\n    ThemeSharedModule,\r\n    NgxsModule.forFeature([SettingManagementState]),\r\n  ],\r\n})\r\nexport class SettingManagementModule {}\r\n","import { Action, Selector, State, StateContext } from '@ngxs/store';\r\nimport { SetSelectedSettingTab } from '../actions/setting-management.actions';\r\nimport { SettingManagement } from '../models/setting-management';\r\n\r\n@State<SettingManagement.State>({\r\n  name: 'SettingManagementState',\r\n  defaults: { selectedTab: {} } as SettingManagement.State,\r\n})\r\nexport class SettingManagementState {\r\n  @Selector()\r\n  static getSelectedTab({ selectedTab }: SettingManagement.State) {\r\n    return selectedTab;\r\n  }\r\n\r\n  @Action(SetSelectedSettingTab)\r\n  settingManagementAction({ patchState }: StateContext<SettingManagement.State>, { payload }: SetSelectedSettingTab) {\r\n    patchState({\r\n      selectedTab: payload,\r\n    });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { SettingManagementModule } from '@abp/ng.setting-management';\r\n\r\n@NgModule({\r\n  imports: [SettingManagementModule],\r\n})\r\nexport class SettingManagementWrapperModule {}\r\n"],"sourceRoot":"webpack:///"}