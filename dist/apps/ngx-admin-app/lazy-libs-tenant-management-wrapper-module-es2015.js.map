{"version":3,"sources":["C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/feature-management/src/lib/components/feature-management/feature-management.component.html","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/tenant-management/src/lib/components/tenants/tenants.component.html","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/feature-management/src/lib/actions/feature-management.actions.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/feature-management/src/lib/actions/index.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/feature-management/src/lib/components/feature-management/feature-management.component.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/feature-management/src/lib/components/index.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/feature-management/src/lib/feature-management.module.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/feature-management/src/lib/services/feature-management.service.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/feature-management/src/lib/states/feature-management.state.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/feature-management/src/lib/states/index.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/feature-management/src/public-api.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/tenant-management/src/lib/actions/index.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/tenant-management/src/lib/actions/tenant-management.actions.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/tenant-management/src/lib/components/index.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/tenant-management/src/lib/components/tenants/tenants.component.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/tenant-management/src/lib/services/index.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/tenant-management/src/lib/services/tenant-management-state.service.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/tenant-management/src/lib/services/tenant-management.service.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/tenant-management/src/lib/states/index.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/tenant-management/src/lib/states/tenant-management.state.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/tenant-management/src/lib/tenant-management-routing.module.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/tenant-management/src/lib/tenant-management.module.ts","C:/Users/YinChang/Documents/Works/GitHub/abp.ng/packages/tenant-management/src/public-api.ts","./src/app/lazy-libs/tenant-management-wrapper.module.ts"],"names":[],"mappings":"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","file":"lazy-libs-tenant-management-wrapper-module-es2015.js","sourcesContent":["export default \"<abp-modal size=\\\"md\\\" [(visible)]=\\\"visible\\\" [busy]=\\\"modalBusy\\\">\\r\\n  <ng-template #abpHeader>\\r\\n    <h3>{{ 'AbpFeatureManagement::Features' | abpLocalization }}</h3>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpBody>\\r\\n    <form *ngIf=\\\"form\\\" (ngSubmit)=\\\"save()\\\" [formGroup]=\\\"form\\\" validateOnSubmit>\\r\\n      <div\\r\\n        class=\\\"row my-3\\\"\\r\\n        *ngFor=\\\"let feature of features$ | async; let i = index\\\"\\r\\n        [ngSwitch]=\\\"feature.valueType.name\\\"\\r\\n      >\\r\\n        <div class=\\\"col-4\\\">{{ feature.name }}</div>\\r\\n        <div class=\\\"col-8\\\" *ngSwitchCase=\\\"'ToggleStringValueType'\\\">\\r\\n          <input type=\\\"checkbox\\\" name=\\\"feature.name\\\" [formControlName]=\\\"i\\\" />\\r\\n        </div>\\r\\n        <div class=\\\"col-8\\\" *ngSwitchCase=\\\"'FreeTextStringValueType'\\\">\\r\\n          <input type=\\\"text\\\" name=\\\"feature.name\\\" [formControlName]=\\\"i\\\" />\\r\\n        </div>\\r\\n      </div>\\r\\n      <div *ngIf=\\\"!(features$ | async)?.length\\\">\\r\\n        {{ 'AbpFeatureManagement::NoFeatureFoundMessage' | abpLocalization }}\\r\\n      </div>\\r\\n    </form>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpFooter>\\r\\n    <ng-container *ngIf=\\\"(features$ | async)?.length\\\">\\r\\n      <button #abpClose type=\\\"button\\\" class=\\\"btn btn-secondary\\\">\\r\\n        {{ 'AbpFeatureManagement::Cancel' | abpLocalization }}\\r\\n      </button>\\r\\n      <abp-button iconClass=\\\"fa fa-check\\\" [disabled]=\\\"form?.invalid || modalBusy\\\" (click)=\\\"save()\\\">\\r\\n        {{ 'AbpFeatureManagement::Save' | abpLocalization }}\\r\\n      </abp-button>\\r\\n    </ng-container>\\r\\n  </ng-template>\\r\\n</abp-modal>\\r\\n\"","export default \"<div id=\\\"wrapper\\\" class=\\\"card\\\">\\r\\n  <div class=\\\"card-header\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col col-md-6\\\">\\r\\n        <h5 class=\\\"card-title\\\">{{ 'AbpTenantManagement::Tenants' | abpLocalization }}</h5>\\r\\n      </div>\\r\\n      <div class=\\\"text-right col col-md-6\\\">\\r\\n        <button\\r\\n          *abpPermission=\\\"'AbpTenantManagement.Tenants.Create'\\\"\\r\\n          id=\\\"create-tenants\\\"\\r\\n          class=\\\"btn btn-primary\\\"\\r\\n          type=\\\"button\\\"\\r\\n          (click)=\\\"addTenant()\\\"\\r\\n        >\\r\\n          <i class=\\\"fa fa-plus mr-1\\\"></i>\\r\\n          <span>{{ 'AbpTenantManagement::NewTenant' | abpLocalization }}</span>\\r\\n        </button>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\\"card-body\\\">\\r\\n    <div id=\\\"data-tables-table-filter\\\" class=\\\"data-tables-filter\\\">\\r\\n      <label\\r\\n        ><input\\r\\n          type=\\\"search\\\"\\r\\n          class=\\\"form-control form-control-sm\\\"\\r\\n          [placeholder]=\\\"'AbpUi::PagerSearch' | abpLocalization\\\"\\r\\n          (input.debounce)=\\\"onSearch($event.target.value)\\\"\\r\\n      /></label>\\r\\n    </div>\\r\\n    <p-table\\r\\n      *ngIf=\\\"[150, 0] as columnWidths\\\"\\r\\n      [value]=\\\"data$ | async\\\"\\r\\n      [abpTableSort]=\\\"{ key: sortKey, order: sortOrder }\\\"\\r\\n      [lazy]=\\\"true\\\"\\r\\n      [lazyLoadOnInit]=\\\"false\\\"\\r\\n      [paginator]=\\\"true\\\"\\r\\n      [rows]=\\\"10\\\"\\r\\n      [totalRecords]=\\\"totalCount$ | async\\\"\\r\\n      [loading]=\\\"loading\\\"\\r\\n      [resizableColumns]=\\\"true\\\"\\r\\n      [scrollable]=\\\"true\\\"\\r\\n      (onLazyLoad)=\\\"onPageChange($event)\\\"\\r\\n    >\\r\\n      <ng-template pTemplate=\\\"colgroup\\\">\\r\\n        <colgroup>\\r\\n          <col *ngFor=\\\"let width of columnWidths\\\" [ngStyle]=\\\"{ 'width.px': width || undefined }\\\" />\\r\\n        </colgroup>\\r\\n      </ng-template>\\r\\n      <ng-template pTemplate=\\\"emptymessage\\\" let-columns>\\r\\n        <tr\\r\\n          abp-table-empty-message\\r\\n          [attr.colspan]=\\\"columnWidths.length\\\"\\r\\n          localizationResource=\\\"AbpTenantManagement\\\"\\r\\n          localizationProp=\\\"NoDataAvailableInDatatable\\\"\\r\\n        ></tr>\\r\\n      </ng-template>\\r\\n      <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n        <tr>\\r\\n          <th>{{ 'AbpTenantManagement::Actions' | abpLocalization }}</th>\\r\\n          <th pResizableColumn (click)=\\\"sortOrderIcon.sort('name')\\\">\\r\\n            {{ 'AbpTenantManagement::TenantName' | abpLocalization }}\\r\\n            <abp-sort-order-icon\\r\\n              #sortOrderIcon\\r\\n              sortKey=\\\"name\\\"\\r\\n              [(selectedSortKey)]=\\\"sortKey\\\"\\r\\n              [(order)]=\\\"sortOrder\\\"\\r\\n            >\\r\\n            </abp-sort-order-icon>\\r\\n          </th>\\r\\n        </tr>\\r\\n      </ng-template>\\r\\n      <ng-template pTemplate=\\\"body\\\" let-data>\\r\\n        <tr>\\r\\n          <td class=\\\"text-center\\\">\\r\\n            <div ngbDropdown container=\\\"body\\\" class=\\\"d-inline-block\\\">\\r\\n              <button\\r\\n                class=\\\"btn btn-primary btn-sm dropdown-toggle\\\"\\r\\n                data-toggle=\\\"dropdown\\\"\\r\\n                aria-haspopup=\\\"true\\\"\\r\\n                ngbDropdownToggle\\r\\n              >\\r\\n                <i class=\\\"fa fa-cog mr-1\\\"></i>{{ 'AbpTenantManagement::Actions' | abpLocalization }}\\r\\n              </button>\\r\\n              <div ngbDropdownMenu>\\r\\n                <button\\r\\n                  *abpPermission=\\\"'AbpTenantManagement.Tenants.Update'\\\"\\r\\n                  ngbDropdownItem\\r\\n                  (click)=\\\"editTenant(data.id)\\\"\\r\\n                >\\r\\n                  {{ 'AbpTenantManagement::Edit' | abpLocalization }}\\r\\n                </button>\\r\\n                <button\\r\\n                  *abpPermission=\\\"'AbpTenantManagement.Tenants.ManageConnectionStrings'\\\"\\r\\n                  ngbDropdownItem\\r\\n                  (click)=\\\"onEditConnectionString(data.id)\\\"\\r\\n                >\\r\\n                  {{ 'AbpTenantManagement::Permission:ManageConnectionStrings' | abpLocalization }}\\r\\n                </button>\\r\\n                <button\\r\\n                  *abpPermission=\\\"'AbpTenantManagement.Tenants.ManageFeatures'\\\"\\r\\n                  ngbDropdownItem\\r\\n                  (click)=\\\"providerKey = data.id; visibleFeatures = true\\\"\\r\\n                >\\r\\n                  {{ 'AbpTenantManagement::Permission:ManageFeatures' | abpLocalization }}\\r\\n                </button>\\r\\n                <button\\r\\n                  *abpPermission=\\\"'AbpTenantManagement.Tenants.Delete'\\\"\\r\\n                  ngbDropdownItem\\r\\n                  (click)=\\\"delete(data.id, data.name)\\\"\\r\\n                >\\r\\n                  {{ 'AbpTenantManagement::Delete' | abpLocalization }}\\r\\n                </button>\\r\\n              </div>\\r\\n            </div>\\r\\n          </td>\\r\\n          <td>{{ data.name }}</td>\\r\\n        </tr>\\r\\n      </ng-template>\\r\\n    </p-table>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<abp-modal size=\\\"md\\\" [(visible)]=\\\"isModalVisible\\\" [busy]=\\\"modalBusy\\\">\\r\\n  <ng-template #abpHeader>\\r\\n    <h3>{{ selectedModalContent.title | abpLocalization }}</h3>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpBody>\\r\\n    <ng-container *ngTemplateOutlet=\\\"selectedModalContent?.template\\\"></ng-container>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpFooter>\\r\\n    <button #abpClose type=\\\"button\\\" class=\\\"btn btn-secondary\\\">\\r\\n      {{ 'AbpTenantManagement::Cancel' | abpLocalization }}\\r\\n    </button>\\r\\n    <abp-button iconClass=\\\"fa fa-check\\\" (click)=\\\"save()\\\" [disabled]=\\\"isDisabledSaveButton\\\">{{\\r\\n      'AbpIdentity::Save' | abpLocalization\\r\\n    }}</abp-button>\\r\\n  </ng-template>\\r\\n</abp-modal>\\r\\n\\r\\n<ng-template #tenantModalTemplate>\\r\\n  <form [formGroup]=\\\"tenantForm\\\" (ngSubmit)=\\\"save()\\\" validateOnSubmit>\\r\\n    <div class=\\\"mt-2\\\">\\r\\n      <div class=\\\"form-group\\\">\\r\\n        <label for=\\\"name\\\">{{ 'AbpTenantManagement::TenantName' | abpLocalization }}</label>\\r\\n        <input type=\\\"text\\\" id=\\\"name\\\" class=\\\"form-control\\\" formControlName=\\\"name\\\" autofocus />\\r\\n      </div>\\r\\n    </div>\\r\\n  </form>\\r\\n</ng-template>\\r\\n\\r\\n<ng-template #connectionStringModalTemplate>\\r\\n  <form [formGroup]=\\\"defaultConnectionStringForm\\\" (ngSubmit)=\\\"save()\\\" validateOnSubmit>\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <div class=\\\"custom-checkbox custom-control mb-2\\\">\\r\\n        <input\\r\\n          id=\\\"useSharedDatabase\\\"\\r\\n          type=\\\"checkbox\\\"\\r\\n          class=\\\"custom-control-input\\\"\\r\\n          formControlName=\\\"useSharedDatabase\\\"\\r\\n          autofocus\\r\\n          (ngModelChange)=\\\"onSharedDatabaseChange($event)\\\"\\r\\n        />\\r\\n        <label for=\\\"useSharedDatabase\\\" class=\\\"custom-control-label\\\">{{\\r\\n          'AbpTenantManagement::DisplayName:UseSharedDatabase' | abpLocalization\\r\\n        }}</label>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\" *ngIf=\\\"!useSharedDatabase\\\">\\r\\n      <label for=\\\"defaultConnectionString\\\">{{\\r\\n        'AbpTenantManagement::DisplayName:DefaultConnectionString' | abpLocalization\\r\\n      }}</label>\\r\\n      <input\\r\\n        type=\\\"text\\\"\\r\\n        id=\\\"defaultConnectionString\\\"\\r\\n        class=\\\"form-control\\\"\\r\\n        formControlName=\\\"defaultConnectionString\\\"\\r\\n      />\\r\\n    </div>\\r\\n  </form>\\r\\n</ng-template>\\r\\n\\r\\n<abp-feature-management\\r\\n  *abpReplaceableTemplate=\\\"{\\r\\n    inputs: {\\r\\n      providerName: { value: 'T' },\\r\\n      providerKey: { value: providerKey },\\r\\n      visible: { value: visibleFeatures, twoWay: true }\\r\\n    },\\r\\n    outputs: { visibleChange: onVisibleFeaturesChange },\\r\\n    componentKey: 'FeatureManagement.FeatureManagementComponent'\\r\\n  }\\\"\\r\\n  [(visible)]=\\\"visibleFeatures\\\"\\r\\n  providerName=\\\"T\\\"\\r\\n  [providerKey]=\\\"providerKey\\\"\\r\\n>\\r\\n</abp-feature-management>\\r\\n\"","import { FeatureManagement } from '../models';\r\n\r\nexport class GetFeatures {\r\n  static readonly type = '[FeatureManagement] Get Features';\r\n  constructor(public payload: FeatureManagement.Provider) {}\r\n}\r\n\r\nexport class UpdateFeatures {\r\n  static readonly type = '[FeatureManagement] Update Features';\r\n  constructor(public payload: FeatureManagement.Provider & FeatureManagement.Features) {}\r\n}\r\n","export * from './feature-management.actions';\r\n","import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\r\nimport { Select, Store } from '@ngxs/store';\r\nimport { Observable } from 'rxjs';\r\nimport { GetFeatures, UpdateFeatures } from '../../actions';\r\nimport { FeatureManagement } from '../../models/feature-management';\r\nimport { FeatureManagementState } from '../../states';\r\nimport { FormGroup, FormControl } from '@angular/forms';\r\nimport { pluck, finalize } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'abp-feature-management',\r\n  templateUrl: './feature-management.component.html',\r\n  exportAs: 'abpFeatureManagement',\r\n})\r\nexport class FeatureManagementComponent\r\n  implements\r\n    FeatureManagement.FeatureManagementComponentInputs,\r\n    FeatureManagement.FeatureManagementComponentOutputs {\r\n  @Input()\r\n  providerKey: string;\r\n\r\n  @Input()\r\n  providerName: string;\r\n\r\n  protected _visible;\r\n\r\n  @Input()\r\n  get visible(): boolean {\r\n    return this._visible;\r\n  }\r\n\r\n  set visible(value: boolean) {\r\n    this._visible = value;\r\n    this.visibleChange.emit(value);\r\n\r\n    if (value) this.openModal();\r\n  }\r\n\r\n  @Output() readonly visibleChange = new EventEmitter<boolean>();\r\n\r\n  @Select(FeatureManagementState.getFeatures)\r\n  features$: Observable<FeatureManagement.Feature[]>;\r\n\r\n  modalBusy = false;\r\n\r\n  form: FormGroup;\r\n\r\n  constructor(private store: Store) {}\r\n\r\n  openModal() {\r\n    if (!this.providerKey || !this.providerName) {\r\n      throw new Error('Provider Key and Provider Name are required.');\r\n    }\r\n\r\n    this.getFeatures();\r\n  }\r\n\r\n  getFeatures() {\r\n    this.store\r\n      .dispatch(\r\n        new GetFeatures({\r\n          providerKey: this.providerKey,\r\n          providerName: this.providerName,\r\n        }),\r\n      )\r\n      .pipe(pluck('FeatureManagementState', 'features'))\r\n      .subscribe(features => {\r\n        this.buildForm(features);\r\n      });\r\n  }\r\n\r\n  buildForm(features) {\r\n    const formGroupObj = {};\r\n\r\n    for (let i = 0; i < features.length; i++) {\r\n      formGroupObj[i] = new FormControl(features[i].value === 'false' ? null : features[i].value);\r\n    }\r\n\r\n    this.form = new FormGroup(formGroupObj);\r\n  }\r\n\r\n  save() {\r\n    if (this.modalBusy) return;\r\n\r\n    this.modalBusy = true;\r\n\r\n    let features = this.store.selectSnapshot(FeatureManagementState.getFeatures);\r\n\r\n    features = features.map((feature, i) => ({\r\n      name: feature.name,\r\n      value: !this.form.value[i] || this.form.value[i] === 'false' ? null : this.form.value[i],\r\n    }));\r\n\r\n    this.store\r\n      .dispatch(\r\n        new UpdateFeatures({\r\n          providerKey: this.providerKey,\r\n          providerName: this.providerName,\r\n          features,\r\n        }),\r\n      )\r\n      .pipe(finalize(() => (this.modalBusy = false)))\r\n      .subscribe(() => {\r\n        this.visible = false;\r\n      });\r\n  }\r\n}\r\n","export * from './feature-management/feature-management.component';\r\n","import { CoreModule } from '@abp/ng.core';\r\nimport { ThemeSharedModule } from '@abp/ng.theme.shared';\r\nimport { NgModule } from '@angular/core';\r\nimport { FeatureManagementComponent } from './components/feature-management/feature-management.component';\r\nimport { NgxsModule } from '@ngxs/store';\r\nimport { FeatureManagementState } from './states/feature-management.state';\r\n\r\n@NgModule({\r\n  declarations: [FeatureManagementComponent],\r\n  imports: [CoreModule, ThemeSharedModule, NgxsModule.forFeature([FeatureManagementState])],\r\n  exports: [FeatureManagementComponent],\r\n})\r\nexport class FeatureManagementModule {}\r\n","import { Injectable } from '@angular/core';\r\nimport { RestService, Rest } from '@abp/ng.core';\r\nimport { Store } from '@ngxs/store';\r\nimport { Observable } from 'rxjs';\r\nimport { FeatureManagement } from '../models';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class FeatureManagementService {\r\n  constructor(private rest: RestService, private store: Store) {}\r\n\r\n  getFeatures(params: FeatureManagement.Provider): Observable<FeatureManagement.Features> {\r\n    const request: Rest.Request<null> = {\r\n      method: 'GET',\r\n      url: '/api/abp/features',\r\n      params,\r\n    };\r\n    return this.rest.request<FeatureManagement.Provider, FeatureManagement.Features>(request);\r\n  }\r\n\r\n  updateFeatures({\r\n    features,\r\n    providerKey,\r\n    providerName,\r\n  }: FeatureManagement.Provider & FeatureManagement.Features): Observable<null> {\r\n    const request: Rest.Request<FeatureManagement.Features> = {\r\n      method: 'PUT',\r\n      url: '/api/abp/features',\r\n      body: { features },\r\n      params: { providerKey, providerName },\r\n    };\r\n    return this.rest.request<FeatureManagement.Features, null>(request);\r\n  }\r\n}\r\n","import { Action, Selector, State, StateContext } from '@ngxs/store';\r\nimport { tap } from 'rxjs/operators';\r\nimport { GetFeatures, UpdateFeatures } from '../actions/feature-management.actions';\r\nimport { FeatureManagement } from '../models/feature-management';\r\nimport { FeatureManagementService } from '../services/feature-management.service';\r\n\r\n@State<FeatureManagement.State>({\r\n  name: 'FeatureManagementState',\r\n  defaults: { features: {} } as FeatureManagement.State,\r\n})\r\nexport class FeatureManagementState {\r\n  @Selector()\r\n  static getFeatures({ features }: FeatureManagement.State) {\r\n    return features || [];\r\n  }\r\n\r\n  constructor(private featureManagementService: FeatureManagementService) {}\r\n\r\n  @Action(GetFeatures)\r\n  getFeatures({ patchState }: StateContext<FeatureManagement.State>, { payload }: GetFeatures) {\r\n    return this.featureManagementService.getFeatures(payload).pipe(\r\n      tap(({ features }) =>\r\n        patchState({\r\n          features,\r\n        }),\r\n      ),\r\n    );\r\n  }\r\n\r\n  @Action(UpdateFeatures)\r\n  updateFeatures(_, { payload }: UpdateFeatures) {\r\n    return this.featureManagementService.updateFeatures(payload);\r\n  }\r\n}\r\n","export * from './feature-management.state';\r\n","export * from './lib/feature-management.module';\r\nexport * from './lib/components';\r\n","export * from './tenant-management.actions';\r\n","import { TenantManagement } from '../models/tenant-management';\r\nimport { ABP } from '@abp/ng.core';\r\n\r\nexport class GetTenants {\r\n  static readonly type = '[TenantManagement] Get Tenant';\r\n  constructor(public payload?: ABP.PageQueryParams) {}\r\n}\r\n\r\nexport class GetTenantById {\r\n  static readonly type = '[TenantManagement] Get Tenant By Id';\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class CreateTenant {\r\n  static readonly type = '[TenantManagement] Create Tenant';\r\n  constructor(public payload: TenantManagement.AddRequest) {}\r\n}\r\n\r\nexport class UpdateTenant {\r\n  static readonly type = '[TenantManagement] Update Tenant';\r\n  constructor(public payload: TenantManagement.UpdateRequest) {}\r\n}\r\n\r\nexport class DeleteTenant {\r\n  static readonly type = '[TenantManagement] Delete Tenant';\r\n  constructor(public payload: string) {}\r\n}\r\n","export * from './tenants/tenants.component';\r\n","import { ABP } from '@abp/ng.core';\r\nimport { ConfirmationService, Toaster } from '@abp/ng.theme.shared';\r\nimport { Component, OnInit, TemplateRef, ViewChild, ChangeDetectorRef } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Select, Store } from '@ngxs/store';\r\nimport { Observable } from 'rxjs';\r\nimport { finalize, pluck, switchMap, take } from 'rxjs/operators';\r\nimport {\r\n  CreateTenant,\r\n  DeleteTenant,\r\n  GetTenantById,\r\n  GetTenants,\r\n  UpdateTenant,\r\n} from '../../actions/tenant-management.actions';\r\nimport { TenantManagementService } from '../../services/tenant-management.service';\r\nimport { TenantManagementState } from '../../states/tenant-management.state';\r\n\r\ninterface SelectedModalContent {\r\n  type: 'saveConnStr' | 'saveTenant';\r\n  title: string;\r\n  template: TemplateRef<any>;\r\n}\r\n\r\n@Component({\r\n  selector: 'abp-tenants',\r\n  templateUrl: './tenants.component.html',\r\n})\r\nexport class TenantsComponent implements OnInit {\r\n  @Select(TenantManagementState.get)\r\n  data$: Observable<ABP.BasicItem[]>;\r\n\r\n  @Select(TenantManagementState.getTenantsTotalCount)\r\n  totalCount$: Observable<number>;\r\n\r\n  selected: ABP.BasicItem;\r\n\r\n  tenantForm: FormGroup;\r\n\r\n  defaultConnectionStringForm: FormGroup;\r\n\r\n  defaultConnectionString: string;\r\n\r\n  isModalVisible: boolean;\r\n\r\n  selectedModalContent = {} as SelectedModalContent;\r\n\r\n  visibleFeatures = false;\r\n\r\n  providerKey: string;\r\n\r\n  _useSharedDatabase: boolean;\r\n\r\n  pageQuery: ABP.PageQueryParams = {};\r\n\r\n  loading = false;\r\n\r\n  modalBusy = false;\r\n\r\n  sortOrder = '';\r\n\r\n  sortKey = '';\r\n\r\n  get useSharedDatabase(): boolean {\r\n    return this.defaultConnectionStringForm.get('useSharedDatabase').value;\r\n  }\r\n\r\n  get connectionString(): string {\r\n    return this.defaultConnectionStringForm.get('defaultConnectionString').value;\r\n  }\r\n\r\n  @ViewChild('tenantModalTemplate', { static: false })\r\n  tenantModalTemplate: TemplateRef<any>;\r\n\r\n  @ViewChild('connectionStringModalTemplate', { static: false })\r\n  connectionStringModalTemplate: TemplateRef<any>;\r\n\r\n  get isDisabledSaveButton(): boolean {\r\n    if (!this.selectedModalContent) return false;\r\n\r\n    if (\r\n      this.selectedModalContent.type === 'saveConnStr' &&\r\n      this.defaultConnectionStringForm &&\r\n      this.defaultConnectionStringForm.invalid\r\n    ) {\r\n      return true;\r\n    } else if (\r\n      this.selectedModalContent.type === 'saveTenant' &&\r\n      this.tenantForm &&\r\n      this.tenantForm.invalid\r\n    ) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  onVisibleFeaturesChange = (value: boolean) => {\r\n    this.visibleFeatures = value;\r\n  };\r\n\r\n  constructor(\r\n    private confirmationService: ConfirmationService,\r\n    private tenantService: TenantManagementService,\r\n    private fb: FormBuilder,\r\n    private store: Store,\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.get();\r\n  }\r\n\r\n  onSearch(value) {\r\n    this.pageQuery.filter = value;\r\n    this.get();\r\n  }\r\n\r\n  private createTenantForm() {\r\n    this.tenantForm = this.fb.group({\r\n      name: [this.selected.name || '', [Validators.required, Validators.maxLength(256)]],\r\n    });\r\n  }\r\n\r\n  private createDefaultConnectionStringForm() {\r\n    this.defaultConnectionStringForm = this.fb.group({\r\n      useSharedDatabase: this._useSharedDatabase,\r\n      defaultConnectionString: [this.defaultConnectionString || ''],\r\n    });\r\n  }\r\n\r\n  openModal(title: string, template: TemplateRef<any>, type: 'saveConnStr' | 'saveTenant') {\r\n    this.selectedModalContent = {\r\n      title,\r\n      template,\r\n      type,\r\n    };\r\n\r\n    this.isModalVisible = true;\r\n  }\r\n\r\n  onEditConnectionString(id: string) {\r\n    this.store\r\n      .dispatch(new GetTenantById(id))\r\n      .pipe(\r\n        pluck('TenantManagementState', 'selectedItem'),\r\n        switchMap(selected => {\r\n          this.selected = selected;\r\n          return this.tenantService.getDefaultConnectionString(id);\r\n        }),\r\n      )\r\n      .subscribe(fetchedConnectionString => {\r\n        this._useSharedDatabase = fetchedConnectionString ? false : true;\r\n        this.defaultConnectionString = fetchedConnectionString ? fetchedConnectionString : '';\r\n        this.createDefaultConnectionStringForm();\r\n        this.openModal(\r\n          'AbpTenantManagement::ConnectionStrings',\r\n          this.connectionStringModalTemplate,\r\n          'saveConnStr',\r\n        );\r\n      });\r\n  }\r\n\r\n  addTenant() {\r\n    this.selected = {} as ABP.BasicItem;\r\n    this.createTenantForm();\r\n    this.openModal('AbpTenantManagement::NewTenant', this.tenantModalTemplate, 'saveTenant');\r\n  }\r\n\r\n  editTenant(id: string) {\r\n    this.store\r\n      .dispatch(new GetTenantById(id))\r\n      .pipe(pluck('TenantManagementState', 'selectedItem'))\r\n      .subscribe(selected => {\r\n        this.selected = selected;\r\n        this.createTenantForm();\r\n        this.openModal('AbpTenantManagement::Edit', this.tenantModalTemplate, 'saveTenant');\r\n      });\r\n  }\r\n\r\n  save() {\r\n    const { type } = this.selectedModalContent;\r\n    if (!type) return;\r\n    if (type === 'saveTenant') this.saveTenant();\r\n    else if (type === 'saveConnStr') this.saveConnectionString();\r\n  }\r\n\r\n  saveConnectionString() {\r\n    if (this.modalBusy) return;\r\n\r\n    this.modalBusy = true;\r\n    if (this.useSharedDatabase || (!this.useSharedDatabase && !this.connectionString)) {\r\n      this.tenantService\r\n        .deleteDefaultConnectionString(this.selected.id)\r\n        .pipe(\r\n          take(1),\r\n          finalize(() => (this.modalBusy = false)),\r\n        )\r\n        .subscribe(() => {\r\n          this.isModalVisible = false;\r\n        });\r\n    } else {\r\n      this.tenantService\r\n        .updateDefaultConnectionString({\r\n          id: this.selected.id,\r\n          defaultConnectionString: this.connectionString,\r\n        })\r\n        .pipe(\r\n          take(1),\r\n          finalize(() => (this.modalBusy = false)),\r\n        )\r\n        .subscribe(() => {\r\n          this.isModalVisible = false;\r\n        });\r\n    }\r\n  }\r\n\r\n  saveTenant() {\r\n    if (!this.tenantForm.valid || this.modalBusy) return;\r\n    this.modalBusy = true;\r\n\r\n    this.store\r\n      .dispatch(\r\n        this.selected.id\r\n          ? new UpdateTenant({ ...this.selected, ...this.tenantForm.value, id: this.selected.id })\r\n          : new CreateTenant(this.tenantForm.value),\r\n      )\r\n      .pipe(finalize(() => (this.modalBusy = false)))\r\n      .subscribe(() => {\r\n        this.isModalVisible = false;\r\n        this.get();\r\n      });\r\n  }\r\n\r\n  delete(id: string, name: string) {\r\n    this.confirmationService\r\n      .warn(\r\n        'AbpTenantManagement::TenantDeletionConfirmationMessage',\r\n        'AbpTenantManagement::AreYouSure',\r\n        {\r\n          messageLocalizationParams: [name],\r\n        },\r\n      )\r\n      .subscribe((status: Toaster.Status) => {\r\n        if (status === Toaster.Status.confirm) {\r\n          this.store.dispatch(new DeleteTenant(id)).subscribe(() => this.get());\r\n        }\r\n      });\r\n  }\r\n\r\n  onPageChange(data) {\r\n    this.pageQuery.skipCount = data.first;\r\n    this.pageQuery.maxResultCount = data.rows;\r\n\r\n    this.get();\r\n  }\r\n\r\n  get() {\r\n    this.loading = true;\r\n    this.store\r\n      .dispatch(new GetTenants(this.pageQuery))\r\n      .pipe(finalize(() => (this.loading = false)))\r\n      .subscribe();\r\n  }\r\n\r\n  onSharedDatabaseChange(value: boolean) {\r\n    if (!value) {\r\n      setTimeout(() => {\r\n        const defaultConnectionString = document.getElementById(\r\n          'defaultConnectionString',\r\n        ) as HTMLInputElement;\r\n        if (defaultConnectionString) {\r\n          defaultConnectionString.focus();\r\n        }\r\n      }, 0);\r\n    }\r\n  }\r\n}\r\n","export * from './tenant-management.service';\r\nexport * from './tenant-management-state.service';\r\n","import { Injectable } from '@angular/core';\r\nimport { Store } from '@ngxs/store';\r\nimport { TenantManagementState } from '../states/tenant-management.state';\r\nimport { ABP } from '@abp/ng.core';\r\nimport { GetTenants, GetTenantById, CreateTenant, UpdateTenant, DeleteTenant } from '../actions';\r\nimport { TenantManagement } from '../models';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TenantManagementStateService {\r\n  constructor(private store: Store) {}\r\n\r\n  get() {\r\n    return this.store.selectSnapshot(TenantManagementState.get);\r\n  }\r\n\r\n  getTenantsTotalCount() {\r\n    return this.store.selectSnapshot(TenantManagementState.getTenantsTotalCount);\r\n  }\r\n\r\n  dispatchGetTenants(...args: ConstructorParameters<typeof GetTenants>) {\r\n    return this.store.dispatch(new GetTenants(...args));\r\n  }\r\n\r\n  dispatchGetTenantById(...args: ConstructorParameters<typeof GetTenantById>) {\r\n    return this.store.dispatch(new GetTenantById(...args));\r\n  }\r\n\r\n  dispatchCreateTenant(...args: ConstructorParameters<typeof CreateTenant>) {\r\n    return this.store.dispatch(new CreateTenant(...args));\r\n  }\r\n\r\n  dispatchUpdateTenant(...args: ConstructorParameters<typeof UpdateTenant>) {\r\n    return this.store.dispatch(new UpdateTenant(...args));\r\n  }\r\n\r\n  dispatchDeleteTenant(...args: ConstructorParameters<typeof DeleteTenant>) {\r\n    return this.store.dispatch(new DeleteTenant(...args));\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { RestService, Rest, ABP } from '@abp/ng.core';\r\nimport { TenantManagement } from '../models/tenant-management';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TenantManagementService {\r\n  constructor(private rest: RestService) {}\r\n\r\n  getTenant(params = {} as ABP.PageQueryParams): Observable<TenantManagement.Response> {\r\n    const request: Rest.Request<null> = {\r\n      method: 'GET',\r\n      url: '/api/multi-tenancy/tenants',\r\n      params\r\n    };\r\n\r\n    return this.rest.request<null, TenantManagement.Response>(request);\r\n  }\r\n\r\n  getTenantById(id: string): Observable<ABP.BasicItem> {\r\n    const request: Rest.Request<null> = {\r\n      method: 'GET',\r\n      url: `/api/multi-tenancy/tenants/${id}`\r\n    };\r\n\r\n    return this.rest.request<null, ABP.BasicItem>(request);\r\n  }\r\n\r\n  deleteTenant(id: string): Observable<null> {\r\n    const request: Rest.Request<null> = {\r\n      method: 'DELETE',\r\n      url: `/api/multi-tenancy/tenants/${id}`\r\n    };\r\n\r\n    return this.rest.request<null, null>(request);\r\n  }\r\n\r\n  createTenant(body: TenantManagement.AddRequest): Observable<ABP.BasicItem> {\r\n    const request: Rest.Request<TenantManagement.AddRequest> = {\r\n      method: 'POST',\r\n      url: '/api/multi-tenancy/tenants',\r\n      body\r\n    };\r\n\r\n    return this.rest.request<TenantManagement.AddRequest, ABP.BasicItem>(request);\r\n  }\r\n\r\n  updateTenant(body: TenantManagement.UpdateRequest): Observable<ABP.BasicItem> {\r\n    const url = `/api/multi-tenancy/tenants/${body.id}`;\r\n    delete body.id;\r\n\r\n    const request: Rest.Request<TenantManagement.UpdateRequest> = {\r\n      method: 'PUT',\r\n      url,\r\n      body\r\n    };\r\n\r\n    return this.rest.request<TenantManagement.AddRequest, ABP.BasicItem>(request);\r\n  }\r\n\r\n  getDefaultConnectionString(id: string): Observable<string> {\r\n    const url = `/api/multi-tenancy/tenants/${id}/default-connection-string`;\r\n\r\n    const request: Rest.Request<TenantManagement.DefaultConnectionStringRequest> = {\r\n      method: 'GET',\r\n      responseType: Rest.ResponseType.Text,\r\n      url\r\n    };\r\n    return this.rest.request<TenantManagement.DefaultConnectionStringRequest, string>(request);\r\n  }\r\n\r\n  updateDefaultConnectionString(payload: TenantManagement.DefaultConnectionStringRequest): Observable<any> {\r\n    const url = `/api/multi-tenancy/tenants/${payload.id}/default-connection-string`;\r\n\r\n    const request: Rest.Request<TenantManagement.DefaultConnectionStringRequest> = {\r\n      method: 'PUT',\r\n      url,\r\n      params: { defaultConnectionString: payload.defaultConnectionString }\r\n    };\r\n    return this.rest.request<TenantManagement.DefaultConnectionStringRequest, any>(request);\r\n  }\r\n\r\n  deleteDefaultConnectionString(id: string): Observable<string> {\r\n    const url = `/api/multi-tenancy/tenants/${id}/default-connection-string`;\r\n\r\n    const request: Rest.Request<TenantManagement.DefaultConnectionStringRequest> = {\r\n      method: 'DELETE',\r\n      url\r\n    };\r\n    return this.rest.request<TenantManagement.DefaultConnectionStringRequest, any>(request);\r\n  }\r\n}\r\n","export * from './tenant-management.state';\r\n","import { ABP } from '@abp/ng.core';\r\nimport { Action, Selector, State, StateContext } from '@ngxs/store';\r\nimport { tap } from 'rxjs/operators';\r\nimport {\r\n  CreateTenant,\r\n  DeleteTenant,\r\n  GetTenantById,\r\n  GetTenants,\r\n  UpdateTenant,\r\n} from '../actions/tenant-management.actions';\r\nimport { TenantManagement } from '../models/tenant-management';\r\nimport { TenantManagementService } from '../services/tenant-management.service';\r\n\r\n@State<TenantManagement.State>({\r\n  name: 'TenantManagementState',\r\n  defaults: { result: {}, selectedItem: {} } as TenantManagement.State,\r\n})\r\nexport class TenantManagementState {\r\n  @Selector()\r\n  static get({ result }: TenantManagement.State): ABP.BasicItem[] {\r\n    return result.items || [];\r\n  }\r\n\r\n  @Selector()\r\n  static getTenantsTotalCount({ result }: TenantManagement.State): number {\r\n    return result.totalCount;\r\n  }\r\n\r\n  constructor(private tenantManagementService: TenantManagementService) {}\r\n\r\n  @Action(GetTenants)\r\n  get({ patchState }: StateContext<TenantManagement.State>, { payload }: GetTenants) {\r\n    return this.tenantManagementService.getTenant(payload).pipe(\r\n      tap(result =>\r\n        patchState({\r\n          result,\r\n        }),\r\n      ),\r\n    );\r\n  }\r\n\r\n  @Action(GetTenantById)\r\n  getById({ patchState }: StateContext<TenantManagement.State>, { payload }: GetTenantById) {\r\n    return this.tenantManagementService.getTenantById(payload).pipe(\r\n      tap(selectedItem =>\r\n        patchState({\r\n          selectedItem,\r\n        }),\r\n      ),\r\n    );\r\n  }\r\n\r\n  @Action(DeleteTenant)\r\n  delete(_, { payload }: DeleteTenant) {\r\n    return this.tenantManagementService.deleteTenant(payload);\r\n  }\r\n\r\n  @Action(CreateTenant)\r\n  add(_, { payload }: CreateTenant) {\r\n    return this.tenantManagementService.createTenant(payload);\r\n  }\r\n\r\n  @Action(UpdateTenant)\r\n  update({ getState }: StateContext<TenantManagement.State>, { payload }: UpdateTenant) {\r\n    return this.tenantManagementService.updateTenant({ ...getState().selectedItem, ...payload });\r\n  }\r\n}\r\n","import {\r\n  AuthGuard,\r\n  DynamicLayoutComponent,\r\n  PermissionGuard,\r\n  ReplaceableComponents,\r\n  ReplaceableRouteContainerComponent,\r\n} from '@abp/ng.core';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { TenantsComponent } from './components/tenants/tenants.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '', redirectTo: 'tenants', pathMatch: 'full' },\r\n  {\r\n    path: '',\r\n    component: DynamicLayoutComponent,\r\n    canActivate: [AuthGuard, PermissionGuard],\r\n    children: [\r\n      {\r\n        path: 'tenants',\r\n        component: ReplaceableRouteContainerComponent,\r\n        data: {\r\n          requiredPolicy: 'AbpTenantManagement.Tenants',\r\n          replaceableComponent: {\r\n            key: 'TenantManagement.TenantsComponent',\r\n            defaultComponent: TenantsComponent,\r\n          } as ReplaceableComponents.RouteData<TenantsComponent>,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class TenantManagementRoutingModule {}\r\n","import { CoreModule } from '@abp/ng.core';\r\nimport { ThemeSharedModule } from '@abp/ng.theme.shared';\r\nimport { NgModule, Provider } from '@angular/core';\r\nimport { NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { NgxsModule } from '@ngxs/store';\r\nimport { TableModule } from 'primeng/table';\r\nimport { TenantsComponent } from './components/tenants/tenants.component';\r\nimport { TenantManagementState } from './states/tenant-management.state';\r\nimport { TenantManagementRoutingModule } from './tenant-management-routing.module';\r\nimport { FeatureManagementModule } from '@abp/ng.feature-management';\r\nimport { NgxValidateCoreModule } from '@ngx-validate/core';\r\n\r\n@NgModule({\r\n  declarations: [TenantsComponent],\r\n  imports: [\r\n    TenantManagementRoutingModule,\r\n    NgxsModule.forFeature([TenantManagementState]),\r\n    NgxValidateCoreModule,\r\n    CoreModule,\r\n    TableModule,\r\n    ThemeSharedModule,\r\n    NgbDropdownModule,\r\n    FeatureManagementModule,\r\n  ],\r\n})\r\nexport class TenantManagementModule {}\r\n","export * from './lib/tenant-management.module';\r\nexport * from './lib/actions';\r\nexport * from './lib/components';\r\nexport * from './lib/models';\r\nexport * from './lib/services';\r\nexport * from './lib/states';\r\n","import { NgModule } from '@angular/core';\r\nimport { TenantManagementModule } from '@abp/ng.tenant-management';\r\n\r\n@NgModule({\r\n  imports: [TenantManagementModule],\r\n})\r\nexport class TenantManagementWrapperModule {}\r\n"],"sourceRoot":"webpack:///"}