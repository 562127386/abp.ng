{"version":3,"file":"abp-ng.account.js","sources":["ng://@abp/ng.account/lib/components/login/login.component.ts","ng://@abp/ng.account/lib/components/manage-profile/manage-profile.component.ts","ng://@abp/ng.account/lib/services/account.service.ts","ng://@abp/ng.account/lib/components/register/register.component.ts","ng://@abp/ng.account/lib/account-routing.module.ts","ng://@abp/ng.account/lib/components/change-password/change-password.component.ts","ng://@abp/ng.account/lib/components/personal-settings/personal-settings.component.ts","ng://@abp/ng.account/lib/components/tenant-box/tenant-box.component.ts","ng://@abp/ng.account/lib/components/auth-wrapper/auth-wrapper.component.ts","ng://@abp/ng.account/lib/account.module.ts","ng://@abp/ng.account/lib/enums/components.ts","ng://@abp/ng.account/lib/tokens/options.token.ts","ng://@abp/ng.account/lib/models/account.ts","ng://@abp/ng.account/lib/models/options.ts","ng://@abp/ng.account/lib/models/user.ts","ng://@abp/ng.account/lib/models/tenant.ts"],"sourcesContent":["import { AuthService, SetRemember, ConfigState } from '@abp/ng.core';\r\nimport { ToasterService } from '@abp/ng.theme.shared';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Store } from '@ngxs/store';\r\nimport { OAuthService } from 'angular-oauth2-oidc';\r\nimport { throwError } from 'rxjs';\r\nimport { catchError, finalize } from 'rxjs/operators';\r\nimport snq from 'snq';\r\nimport { eAccountComponents } from '../../enums/components';\r\n\r\nconst { maxLength, minLength, required } = Validators;\r\n\r\n@Component({\r\n  selector: 'abp-login',\r\n  templateUrl: './login.component.html',\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  form: FormGroup;\r\n\r\n  inProgress: boolean;\r\n\r\n  isSelfRegistrationEnabled = true;\r\n\r\n  authWrapperKey = eAccountComponents.AuthWrapper;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private oauthService: OAuthService,\r\n    private store: Store,\r\n    private toasterService: ToasterService,\r\n    private authService: AuthService,\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.isSelfRegistrationEnabled =\r\n      (\r\n        (this.store.selectSnapshot(\r\n          ConfigState.getSetting('Abp.Account.IsSelfRegistrationEnabled'),\r\n        ) as string) || ''\r\n      ).toLowerCase() !== 'false';\r\n\r\n    this.form = this.fb.group({\r\n      username: ['', [required, maxLength(255)]],\r\n      password: ['', [required, maxLength(128)]],\r\n      remember: [false],\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.form.invalid) return;\r\n\r\n    this.inProgress = true;\r\n    this.authService\r\n      .login(this.form.get('username').value, this.form.get('password').value)\r\n      .pipe(\r\n        catchError(err => {\r\n          this.toasterService.error(\r\n            snq(() => err.error.error_description) ||\r\n              snq(() => err.error.error.message, 'AbpAccount::DefaultErrorMessage'),\r\n            'Error',\r\n            { life: 7000 },\r\n          );\r\n          return throwError(err);\r\n        }),\r\n        finalize(() => (this.inProgress = false)),\r\n      )\r\n      .subscribe(() => {\r\n        this.store.dispatch(new SetRemember(this.form.get('remember').value));\r\n      });\r\n  }\r\n}\r\n","import { fadeIn } from '@abp/ng.theme.shared';\r\nimport { transition, trigger, useAnimation } from '@angular/animations';\r\nimport { Component } from '@angular/core';\r\nimport { eAccountComponents } from '../../enums/components';\r\n\r\n@Component({\r\n  selector: 'abp-manage-profile',\r\n  templateUrl: './manage-profile.component.html',\r\n  animations: [trigger('fadeIn', [transition(':enter', useAnimation(fadeIn))])],\r\n})\r\nexport class ManageProfileComponent {\r\n  selectedTab = 0;\r\n\r\n  changePasswordKey = eAccountComponents.ChangePassword;\r\n\r\n  personalSettingsKey = eAccountComponents.PersonalSettings;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { RestService, Rest } from '@abp/ng.core';\r\nimport { RegisterResponse, RegisterRequest, TenantIdResponse } from '../models';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AccountService {\r\n  apiName = 'AbpAccount';\r\n\r\n  constructor(private rest: RestService) {}\r\n\r\n  findTenant(tenantName: string): Observable<TenantIdResponse> {\r\n    const request: Rest.Request<null> = {\r\n      method: 'GET',\r\n      url: `/api/abp/multi-tenancy/tenants/by-name/${tenantName}`,\r\n    };\r\n\r\n    return this.rest.request<null, TenantIdResponse>(request, { apiName: this.apiName });\r\n  }\r\n\r\n  register(body: RegisterRequest): Observable<RegisterResponse> {\r\n    const request: Rest.Request<RegisterRequest> = {\r\n      method: 'POST',\r\n      url: '/api/account/register',\r\n      body,\r\n    };\r\n\r\n    return this.rest.request<RegisterRequest, RegisterResponse>(request, {\r\n      skipHandleError: true,\r\n      apiName: this.apiName,\r\n    });\r\n  }\r\n}\r\n","import { AuthService, ConfigState } from '@abp/ng.core';\r\nimport { getPasswordValidators, ToasterService } from '@abp/ng.theme.shared';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Store } from '@ngxs/store';\r\nimport { OAuthService } from 'angular-oauth2-oidc';\r\nimport { throwError } from 'rxjs';\r\nimport { catchError, finalize, switchMap } from 'rxjs/operators';\r\nimport snq from 'snq';\r\nimport { RegisterRequest } from '../../models';\r\nimport { AccountService } from '../../services/account.service';\r\nimport { eAccountComponents } from '../../enums/components';\r\nconst { maxLength, required, email } = Validators;\r\n\r\n@Component({\r\n  selector: 'abp-register',\r\n  templateUrl: './register.component.html',\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  form: FormGroup;\r\n\r\n  inProgress: boolean;\r\n\r\n  isSelfRegistrationEnabled = true;\r\n\r\n  authWrapperKey = eAccountComponents.AuthWrapper;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private accountService: AccountService,\r\n    private oauthService: OAuthService,\r\n    private store: Store,\r\n    private toasterService: ToasterService,\r\n    private authService: AuthService,\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.isSelfRegistrationEnabled =\r\n      (\r\n        this.store.selectSnapshot(\r\n          ConfigState.getSetting('Abp.Account.IsSelfRegistrationEnabled'),\r\n        ) || ''\r\n      ).toLowerCase() !== 'false';\r\n    if (!this.isSelfRegistrationEnabled) {\r\n      this.toasterService.warn(\r\n        {\r\n          key: 'AbpAccount::SelfRegistrationDisabledMessage',\r\n          defaultValue: 'Self registration is disabled.',\r\n        },\r\n        null,\r\n        { life: 10000 },\r\n      );\r\n      return;\r\n    }\r\n\r\n    this.form = this.fb.group({\r\n      username: ['', [required, maxLength(255)]],\r\n      password: ['', [required, ...getPasswordValidators(this.store)]],\r\n      email: ['', [required, email]],\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.form.invalid) return;\r\n\r\n    this.inProgress = true;\r\n\r\n    const newUser = {\r\n      userName: this.form.get('username').value,\r\n      password: this.form.get('password').value,\r\n      emailAddress: this.form.get('email').value,\r\n      appName: 'Angular',\r\n    } as RegisterRequest;\r\n\r\n    this.accountService\r\n      .register(newUser)\r\n      .pipe(\r\n        switchMap(() => this.authService.login(newUser.userName, newUser.password)),\r\n        catchError(err => {\r\n          this.toasterService.error(\r\n            snq(() => err.error.error_description) ||\r\n              snq(() => err.error.error.message, 'AbpAccount::DefaultErrorMessage'),\r\n            'Error',\r\n            { life: 7000 },\r\n          );\r\n          return throwError(err);\r\n        }),\r\n        finalize(() => (this.inProgress = false)),\r\n      )\r\n      .subscribe();\r\n  }\r\n}\r\n","import {\r\n  DynamicLayoutComponent,\r\n  AuthGuard,\r\n  ReplaceableComponents,\r\n  ReplaceableRouteContainerComponent,\r\n} from '@abp/ng.core';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { ManageProfileComponent } from './components/manage-profile/manage-profile.component';\r\nimport { RegisterComponent } from './components/register/register.component';\r\nimport { eAccountComponents } from './enums/components';\r\n\r\nconst routes: Routes = [\r\n  { path: '', pathMatch: 'full', redirectTo: 'login' },\r\n  {\r\n    path: '',\r\n    component: DynamicLayoutComponent,\r\n    children: [\r\n      {\r\n        path: 'login',\r\n        component: ReplaceableRouteContainerComponent,\r\n        data: {\r\n          replaceableComponent: {\r\n            key: eAccountComponents.Login,\r\n            defaultComponent: LoginComponent,\r\n          } as ReplaceableComponents.RouteData<LoginComponent>,\r\n        },\r\n      },\r\n      {\r\n        path: 'register',\r\n        component: ReplaceableRouteContainerComponent,\r\n        data: {\r\n          replaceableComponent: {\r\n            key: eAccountComponents.Register,\r\n            defaultComponent: RegisterComponent,\r\n          } as ReplaceableComponents.RouteData<RegisterComponent>,\r\n        },\r\n      },\r\n      {\r\n        path: 'manage-profile',\r\n        component: ReplaceableRouteContainerComponent,\r\n        canActivate: [AuthGuard],\r\n        data: {\r\n          replaceableComponent: {\r\n            key: eAccountComponents.ManageProfile,\r\n            defaultComponent: ManageProfileComponent,\r\n          } as ReplaceableComponents.RouteData<ManageProfileComponent>,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AccountRoutingModule {}\r\n","import { ChangePassword } from '@abp/ng.core';\r\nimport { getPasswordValidators, ToasterService } from '@abp/ng.theme.shared';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { comparePasswords, Validation } from '@ngx-validate/core';\r\nimport { Store } from '@ngxs/store';\r\nimport { finalize } from 'rxjs/operators';\r\nimport snq from 'snq';\r\nimport { Account } from '../../models/account';\r\n\r\nconst { required } = Validators;\r\n\r\nconst PASSWORD_FIELDS = ['newPassword', 'repeatNewPassword'];\r\n\r\n@Component({\r\n  selector: 'abp-change-password-form',\r\n  templateUrl: './change-password.component.html',\r\n  exportAs: 'abpChangePasswordForm',\r\n})\r\nexport class ChangePasswordComponent\r\n  implements OnInit, Account.ChangePasswordComponentInputs, Account.ChangePasswordComponentOutputs {\r\n  form: FormGroup;\r\n\r\n  inProgress: boolean;\r\n\r\n  mapErrorsFn: Validation.MapErrorsFn = (errors, groupErrors, control) => {\r\n    if (PASSWORD_FIELDS.indexOf(String(control.name)) < 0) return errors;\r\n\r\n    return errors.concat(groupErrors.filter(({ key }) => key === 'passwordMismatch'));\r\n  };\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private store: Store,\r\n    private toasterService: ToasterService,\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    const passwordValidations = getPasswordValidators(this.store);\r\n\r\n    this.form = this.fb.group(\r\n      {\r\n        password: ['', required],\r\n        newPassword: [\r\n          '',\r\n          {\r\n            validators: [required, ...passwordValidations],\r\n          },\r\n        ],\r\n        repeatNewPassword: [\r\n          '',\r\n          {\r\n            validators: [required, ...passwordValidations],\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        validators: [comparePasswords(PASSWORD_FIELDS)],\r\n      },\r\n    );\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.form.invalid) return;\r\n    this.inProgress = true;\r\n    this.store\r\n      .dispatch(\r\n        new ChangePassword({\r\n          currentPassword: this.form.get('password').value,\r\n          newPassword: this.form.get('newPassword').value,\r\n        }),\r\n      )\r\n      .pipe(finalize(() => (this.inProgress = false)))\r\n      .subscribe({\r\n        next: () => {\r\n          this.form.reset();\r\n          this.toasterService.success('AbpAccount::PasswordChangedMessage', 'Success', {\r\n            life: 5000,\r\n          });\r\n        },\r\n        error: err => {\r\n          this.toasterService.error(\r\n            snq(() => err.error.error.message, 'AbpAccount::DefaultErrorMessage'),\r\n            'Error',\r\n            {\r\n              life: 7000,\r\n            },\r\n          );\r\n        },\r\n      });\r\n  }\r\n}\r\n","import { GetProfile, Profile, ProfileState, UpdateProfile } from '@abp/ng.core';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Select, Store } from '@ngxs/store';\r\nimport { Observable } from 'rxjs';\r\nimport { take, withLatestFrom, finalize } from 'rxjs/operators';\r\nimport { ToasterService } from '@abp/ng.theme.shared';\r\nimport { Account } from '../../models/account';\r\n\r\nconst { maxLength, required, email } = Validators;\r\n\r\n@Component({\r\n  selector: 'abp-personal-settings-form',\r\n  templateUrl: './personal-settings.component.html',\r\n  exportAs: 'abpPersonalSettingsForm',\r\n})\r\nexport class PersonalSettingsComponent\r\n  implements\r\n    OnInit,\r\n    Account.PersonalSettingsComponentInputs,\r\n    Account.PersonalSettingsComponentOutputs {\r\n  @Select(ProfileState.getProfile)\r\n  profile$: Observable<Profile.Response>;\r\n\r\n  form: FormGroup;\r\n\r\n  inProgress: boolean;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private store: Store,\r\n    private toasterService: ToasterService,\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.buildForm();\r\n  }\r\n\r\n  buildForm() {\r\n    this.store\r\n      .dispatch(new GetProfile())\r\n      .pipe(withLatestFrom(this.profile$), take(1))\r\n      .subscribe(([, profile]) => {\r\n        this.form = this.fb.group({\r\n          userName: [profile.userName, [required, maxLength(256)]],\r\n          email: [profile.email, [required, email, maxLength(256)]],\r\n          name: [profile.name || '', [maxLength(64)]],\r\n          surname: [profile.surname || '', [maxLength(64)]],\r\n          phoneNumber: [profile.phoneNumber || '', [maxLength(16)]],\r\n        });\r\n      });\r\n  }\r\n\r\n  submit() {\r\n    if (this.form.invalid) return;\r\n    this.inProgress = true;\r\n    this.store\r\n      .dispatch(new UpdateProfile(this.form.value))\r\n      .pipe(finalize(() => (this.inProgress = false)))\r\n      .subscribe(() => {\r\n        this.toasterService.success('AbpAccount::PersonalSettingsSaved', 'Success', { life: 5000 });\r\n      });\r\n  }\r\n}\r\n","import { ABP, SetTenant, SessionState, GetAppConfiguration } from '@abp/ng.core';\r\nimport { ToasterService } from '@abp/ng.theme.shared';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Store } from '@ngxs/store';\r\nimport { throwError } from 'rxjs';\r\nimport { catchError, take, finalize, switchMap } from 'rxjs/operators';\r\nimport snq from 'snq';\r\nimport { AccountService } from '../../services/account.service';\r\nimport { Account } from '../../models/account';\r\n\r\n@Component({\r\n  selector: 'abp-tenant-box',\r\n  templateUrl: './tenant-box.component.html',\r\n})\r\nexport class TenantBoxComponent\r\n  implements OnInit, Account.TenantBoxComponentInputs, Account.TenantBoxComponentOutputs {\r\n  tenant = {} as ABP.BasicItem;\r\n\r\n  tenantName: string;\r\n\r\n  isModalVisible: boolean;\r\n\r\n  inProgress: boolean;\r\n\r\n  constructor(\r\n    private store: Store,\r\n    private toasterService: ToasterService,\r\n    private accountService: AccountService,\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.tenant = this.store.selectSnapshot(SessionState.getTenant) || ({} as ABP.BasicItem);\r\n    this.tenantName = this.tenant.name || '';\r\n  }\r\n\r\n  onSwitch() {\r\n    this.isModalVisible = true;\r\n  }\r\n\r\n  save() {\r\n    if (this.tenant.name && !this.inProgress) {\r\n      this.inProgress = true;\r\n      this.accountService\r\n        .findTenant(this.tenant.name)\r\n        .pipe(\r\n          finalize(() => (this.inProgress = false)),\r\n          take(1),\r\n          catchError(err => {\r\n            this.toasterService.error(\r\n              snq(() => err.error.error_description, 'AbpUi::DefaultErrorMessage'),\r\n              'AbpUi::Error',\r\n            );\r\n            return throwError(err);\r\n          }),\r\n          switchMap(({ success, tenantId }) => {\r\n            if (success) {\r\n              this.tenant = {\r\n                id: tenantId,\r\n                name: this.tenant.name,\r\n              };\r\n              this.tenantName = this.tenant.name;\r\n              this.isModalVisible = false;\r\n            } else {\r\n              this.toasterService.error(\r\n                'AbpUiMultiTenancy::GivenTenantIsNotAvailable',\r\n                'AbpUi::Error',\r\n                {\r\n                  messageLocalizationParams: [this.tenant.name],\r\n                },\r\n              );\r\n              this.tenant = {} as ABP.BasicItem;\r\n              this.tenantName = '';\r\n            }\r\n            this.store.dispatch(new SetTenant(success ? this.tenant : null));\r\n            return this.store.dispatch(new GetAppConfiguration());\r\n          }),\r\n        )\r\n        .subscribe();\r\n    } else {\r\n      this.store.dispatch([new SetTenant(null), new GetAppConfiguration()]);\r\n      this.tenantName = null;\r\n      this.isModalVisible = false;\r\n    }\r\n  }\r\n}\r\n","import { ConfigState, takeUntilDestroy } from '@abp/ng.core';\r\nimport { Component, Input, OnDestroy, OnInit, TemplateRef } from '@angular/core';\r\nimport { Select, Store } from '@ngxs/store';\r\nimport { Observable } from 'rxjs';\r\nimport { Account } from '../../models/account';\r\nimport { eAccountComponents } from '../../enums/components';\r\n\r\n@Component({\r\n  selector: 'abp-auth-wrapper',\r\n  templateUrl: './auth-wrapper.component.html',\r\n  exportAs: 'abpAuthWrapper',\r\n})\r\nexport class AuthWrapperComponent\r\n  implements\r\n    Account.AuthWrapperComponentInputs,\r\n    Account.AuthWrapperComponentOutputs,\r\n    OnInit,\r\n    OnDestroy {\r\n  @Input()\r\n  readonly mainContentRef: TemplateRef<any>;\r\n\r\n  @Input()\r\n  readonly cancelContentRef: TemplateRef<any>;\r\n\r\n  @Select(ConfigState.getDeep('multiTenancy.isEnabled'))\r\n  isMultiTenancyEnabled$: Observable<boolean>;\r\n\r\n  enableLocalLogin = true;\r\n\r\n  tenantBoxKey = eAccountComponents.TenantBox;\r\n\r\n  constructor(private store: Store) {}\r\n\r\n  ngOnInit() {\r\n    this.store\r\n      .select(ConfigState.getSetting('Abp.Account.EnableLocalLogin'))\r\n      .pipe(takeUntilDestroy(this))\r\n      .subscribe(value => {\r\n        if (value) {\r\n          this.enableLocalLogin = value.toLowerCase() !== 'false';\r\n        }\r\n      });\r\n  }\r\n\r\n  ngOnDestroy() {}\r\n}\r\n","import { CoreModule } from '@abp/ng.core';\r\nimport { ThemeSharedModule } from '@abp/ng.theme.shared';\r\nimport { NgModule, Provider } from '@angular/core';\r\nimport { NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { NgxValidateCoreModule } from '@ngx-validate/core';\r\nimport { AccountRoutingModule } from './account-routing.module';\r\nimport { ChangePasswordComponent } from './components/change-password/change-password.component';\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { ManageProfileComponent } from './components/manage-profile/manage-profile.component';\r\nimport { PersonalSettingsComponent } from './components/personal-settings/personal-settings.component';\r\nimport { RegisterComponent } from './components/register/register.component';\r\nimport { TenantBoxComponent } from './components/tenant-box/tenant-box.component';\r\nimport { Options } from './models/options';\r\nimport { ACCOUNT_OPTIONS, optionsFactory } from './tokens/options.token';\r\nimport { AuthWrapperComponent } from './components/auth-wrapper/auth-wrapper.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AuthWrapperComponent,\r\n    LoginComponent,\r\n    RegisterComponent,\r\n    TenantBoxComponent,\r\n    ChangePasswordComponent,\r\n    ManageProfileComponent,\r\n    PersonalSettingsComponent,\r\n  ],\r\n  imports: [\r\n    CoreModule,\r\n    AccountRoutingModule,\r\n    ThemeSharedModule,\r\n    NgbDropdownModule,\r\n    NgxValidateCoreModule,\r\n  ],\r\n  exports: [],\r\n})\r\nexport class AccountModule {}\r\n","export const enum eAccountComponents {\r\n  Login = 'Account.LoginComponent',\r\n  Register = 'Account.RegisterComponent',\r\n  ManageProfile = 'Account.ManageProfileComponent',\r\n  TenantBox = 'Account.TenantBoxComponent',\r\n  AuthWrapper = 'Account.AuthWrapperComponent',\r\n  ChangePassword = 'Account.ChangePasswordComponent',\r\n  PersonalSettings = 'Account.PersonalSettingsComponent',\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\nimport { Options } from '../models/options';\r\n\r\nexport function optionsFactory(options: Options) {\r\n  return {\r\n    redirectUrl: '/',\r\n    ...options,\r\n  };\r\n}\r\n\r\nexport const ACCOUNT_OPTIONS = new InjectionToken('ACCOUNT_OPTIONS');\r\n","import { TemplateRef } from '@angular/core';\r\n\r\nexport namespace Account {\r\n  export interface AuthWrapperComponentInputs {\r\n    readonly mainContentRef: TemplateRef<any>;\r\n    readonly cancelContentRef?: TemplateRef<any>;\r\n  }\r\n\r\n  //tslint:disable\r\n  export interface AuthWrapperComponentOutputs {}\r\n  export interface TenantBoxComponentInputs {}\r\n  export interface TenantBoxComponentOutputs {}\r\n  export interface PersonalSettingsComponentInputs {}\r\n  export interface PersonalSettingsComponentOutputs {}\r\n  export interface ChangePasswordComponentInputs {}\r\n  export interface ChangePasswordComponentOutputs {}\r\n  // tslint:enable\r\n}\r\n","export interface Options {\r\n  redirectUrl?: string;\r\n}\r\n","export interface RegisterRequest {\r\n  userName: string;\r\n  emailAddress: string;\r\n  password: string;\r\n  appName?: string;\r\n}\r\n\r\nexport interface RegisterResponse {\r\n  tenantId: string;\r\n  userName: string;\r\n  name: string;\r\n  surname: string;\r\n  email: string;\r\n  emailConfirmed: boolean;\r\n  phoneNumber: string;\r\n  phoneNumberConfirmed: boolean;\r\n  twoFactorEnabled: boolean;\r\n  lockoutEnabled: boolean;\r\n  lockoutEnd: string;\r\n  concurrencyStamp: string;\r\n  isDeleted: boolean;\r\n  deleterId: string;\r\n  deletionTime: string;\r\n  lastModificationTime: string;\r\n  lastModifierId: string;\r\n  creationTime: string;\r\n  creatorId: string;\r\n  id: string;\r\n}\r\n","export interface TenantIdResponse {\r\n  success: boolean;\r\n  tenantId: string;\r\n}\r\n"],"names":["maxLength","required","email","tslib_1.__decorate"],"mappings":"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"}