!function(n,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@abp/ng.core"),require("@abp/ng.theme.shared"),require("@angular/core"),require("@ng-bootstrap/ng-bootstrap"),require("@ngx-validate/core"),require("primeng/table"),require("@angular/router"),require("@angular/forms"),require("@ngxs/router-plugin"),require("@ngxs/store"),require("angular-oauth2-oidc"),require("rxjs"),require("rxjs/operators"),require("snq"),require("@angular/common/http"),require("@angular/animations")):"function"==typeof define&&define.amd?define("@abp/ng.account",["exports","@abp/ng.core","@abp/ng.theme.shared","@angular/core","@ng-bootstrap/ng-bootstrap","@ngx-validate/core","primeng/table","@angular/router","@angular/forms","@ngxs/router-plugin","@ngxs/store","angular-oauth2-oidc","rxjs","rxjs/operators","snq","@angular/common/http","@angular/animations"],e):e(((n=n||self).abp=n.abp||{},n.abp.ng=n.abp.ng||{},n.abp.ng.account={}),n.ng_core,n.ng_theme_shared,n.ng.core,n.ngBootstrap,n.core$1,n.table,n.ng.router,n.ng.forms,n.routerPlugin,n.store,n.angularOauth2Oidc,n.rxjs,n.rxjs.operators,n.snq,n.ng.common.http,n.ng.animations)}(this,(function(n,e,r,t,o,a,i,s,p,c,l,u,d,m,b,f,g){"use strict";b=b&&b.hasOwnProperty("default")?b.default:b;var h=function(){return(h=Object.assign||function(n){for(var e,r=1,t=arguments.length;r<t;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}).apply(this,arguments)};function v(n,e,r,t){var o,a=arguments.length,i=a<3?e:null===t?t=Object.getOwnPropertyDescriptor(e,r):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(n,e,r,t);else for(var s=n.length-1;s>=0;s--)(o=n[s])&&(i=(a<3?o(i):a>3?o(e,r,i):o(e,r))||i);return a>3&&i&&Object.defineProperty(e,r,i),i}function y(n,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(n,e)}function w(n,e){var r="function"==typeof Symbol&&n[Symbol.iterator];if(!r)return n;var t,o,a=r.call(n),i=[];try{for(;(void 0===e||e-- >0)&&!(t=a.next()).done;)i.push(t.value)}catch(n){o={error:n}}finally{try{t&&!t.done&&(r=a.return)&&r.call(a)}finally{if(o)throw o.error}}return i}var A=p.Validators.maxLength,C=(p.Validators.minLength,p.Validators.required),S=function(){function n(n,r,t,o,a){this.fb=n,this.oauthService=r,this.store=t,this.toasterService=o,this.options=a,this.oauthService.configure(this.store.selectSnapshot(e.ConfigState.getOne("environment")).oAuthConfig),this.oauthService.loadDiscoveryDocument(),this.form=this.fb.group({username:["",[C,A(255)]],password:["",[C,A(32)]],remember:[!1]})}return n.prototype.onSubmit=function(){var n=this;if(!this.form.invalid){this.inProgress=!0;var r=this.store.selectSnapshot(e.SessionState.getTenant);d.from(this.oauthService.fetchTokenUsingPasswordFlow(this.form.get("username").value,this.form.get("password").value,new f.HttpHeaders(h({},r&&r.id&&{__tenant:r.id})))).pipe(m.switchMap((function(){return n.store.dispatch(new e.GetAppConfiguration)})),m.tap((function(){var e=b((function(){return window.history.state})).redirectUrl||(n.options||{}).redirectUrl||"/";n.store.dispatch(new c.Navigate([e]))})),m.catchError((function(e){return n.toasterService.error(b((function(){return e.error.error_description}))||b((function(){return e.error.error.message}),"AbpAccount::DefaultErrorMessage"),"Error",{life:7e3}),d.throwError(e)})),m.finalize((function(){return n.inProgress=!1}))).subscribe()}},n.decorators=[{type:t.Component,args:[{selector:"abp-login",template:'<abp-auth-wrapper\r\n  *abpReplaceableTemplate="{\r\n    componentKey: \'Account.AuthWrapperComponent\',\r\n    inputs: {\r\n      mainContentRef: { value: mainContentRef },\r\n      cancelContentRef: { value: cancelContentRef }\r\n    }\r\n  }"\r\n  [mainContentRef]="mainContentRef"\r\n  [cancelContentRef]="cancelContentRef"\r\n>\r\n</abp-auth-wrapper>\r\n<ng-template #mainContentRef>\r\n  <h4>{{ \'AbpAccount::Login\' | abpLocalization }}</h4>\r\n  <strong>\r\n    {{ \'AbpAccount::AreYouANewUser\' | abpLocalization }}\r\n    <a class="text-decoration-none" routerLink="/account/register">{{\r\n      \'AbpAccount::Register\' | abpLocalization\r\n    }}</a>\r\n  </strong>\r\n  <form [formGroup]="form" (ngSubmit)="onSubmit()" validateOnSubmit class="mt-4">\r\n    <div class="form-group">\r\n      <label for="login-input-user-name-or-email-address">{{\r\n        \'AbpAccount::UserNameOrEmailAddress\' | abpLocalization\r\n      }}</label>\r\n      <input\r\n        class="form-control"\r\n        type="text"\r\n        id="login-input-user-name-or-email-address"\r\n        formControlName="username"\r\n        autocomplete="username"\r\n        autofocus\r\n      />\r\n    </div>\r\n    <div class="form-group">\r\n      <label for="login-input-password">{{ \'AbpAccount::Password\' | abpLocalization }}</label>\r\n      <input\r\n        class="form-control"\r\n        type="password"\r\n        id="login-input-password"\r\n        formControlName="password"\r\n        autocomplete="current-password"\r\n      />\r\n    </div>\r\n    <div class="form-check" validationTarget validationStyle>\r\n      <label class="form-check-label" for="login-input-remember-me">\r\n        <input\r\n          class="form-check-input"\r\n          type="checkbox"\r\n          id="login-input-remember-me"\r\n          formControlName="remember"\r\n        />\r\n        {{ \'AbpAccount::RememberMe\' | abpLocalization }}\r\n      </label>\r\n    </div>\r\n    <abp-button\r\n      [loading]="inProgress"\r\n      buttonType="submit"\r\n      name="Action"\r\n      buttonClass="btn-block btn-lg mt-3 btn btn-primary"\r\n    >\r\n      {{ \'AbpAccount::Login\' | abpLocalization }}\r\n    </abp-button>\r\n  </form>\r\n</ng-template>\r\n<ng-template #cancelContentRef>\r\n  <div class="card-footer text-center border-0">\r\n    <a routerLink="/">\r\n      <button type="button" name="Action" value="Cancel" class="px-2 py-0 btn btn-link">\r\n        {{ \'AbpAccount::Cancel\' | abpLocalization }}\r\n      </button>\r\n    </a>\r\n  </div>\r\n</ng-template>\r\n'}]}],n.ctorParameters=function(){return[{type:p.FormBuilder},{type:u.OAuthService},{type:l.Store},{type:r.ToasterService},{type:void 0,decorators:[{type:t.Optional},{type:t.Inject,args:["ACCOUNT_OPTIONS"]}]}]},n}();var P=function(){function n(){this.selectedTab=0}return n.decorators=[{type:t.Component,args:[{selector:"abp-manage-profile",template:'<div id="AbpContentToolbar"></div>\r\n\r\n<div class="card border-0 shadow-sm">\r\n  <div class="card-body">\r\n    <div class="row">\r\n      <div class="col-3">\r\n        <ul class="nav flex-column nav-pills" id="nav-tab" role="tablist">\r\n          <li class="nav-item" (click)="selectedTab = 0">\r\n            <a\r\n              class="nav-link"\r\n              [ngClass]="{ active: selectedTab === 0 }"\r\n              role="tab"\r\n              href="javascript:void(0)"\r\n              >{{ \'AbpUi::ChangePassword\' | abpLocalization }}</a\r\n            >\r\n          </li>\r\n          <li class="nav-item" (click)="selectedTab = 1">\r\n            <a\r\n              class="nav-link"\r\n              [ngClass]="{ active: selectedTab === 1 }"\r\n              role="tab"\r\n              href="javascript:void(0)"\r\n              >{{ \'AbpAccount::PersonalSettings\' | abpLocalization }}</a\r\n            >\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div class="col-9">\r\n        <div class="tab-content" *ngIf="selectedTab === 0" [@fadeIn]>\r\n          <div class="tab-pane active" role="tabpanel">\r\n            <h4>\r\n              {{ \'AbpIdentity::ChangePassword\' | abpLocalization }}\r\n              <hr />\r\n            </h4>\r\n            <abp-change-password-form\r\n              *abpReplaceableTemplate="{ componentKey: \'Account.ChangePasswordComponent\' }"\r\n            ></abp-change-password-form>\r\n          </div>\r\n        </div>\r\n        <div class="tab-content" *ngIf="selectedTab === 1" [@fadeIn]>\r\n          <div class="tab-pane active" role="tabpanel">\r\n            <h4>\r\n              {{ \'AbpIdentity::PersonalSettings\' | abpLocalization }}\r\n              <hr />\r\n            </h4>\r\n            <abp-personal-settings-form\r\n              *abpReplaceableTemplate="{ componentKey: \'Account.PersonalSettingsComponent\' }"\r\n            ></abp-personal-settings-form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n',animations:[g.trigger("fadeIn",[g.transition(":enter",g.useAnimation(r.fadeIn))])]}]}],n}();var L=function(){function n(n){this.rest=n}return n.prototype.findTenant=function(n){var e={method:"GET",url:"/api/abp/multi-tenancy/tenants/by-name/"+n};return this.rest.request(e)},n.prototype.register=function(n){var e={method:"POST",url:"/api/account/register",body:n};return this.rest.request(e,{skipHandleError:!0})},n.decorators=[{type:t.Injectable,args:[{providedIn:"root"}]}],n.ctorParameters=function(){return[{type:e.RestService}]},n.ngInjectableDef=t.ɵɵdefineInjectable({factory:function(){return new n(t.ɵɵinject(e.RestService))},token:n,providedIn:"root"}),n}();var T=p.Validators.maxLength,N=p.Validators.minLength,R=p.Validators.required,I=p.Validators.email,x=function(){function n(n,r,t,o,a){this.fb=n,this.accountService=r,this.oauthService=t,this.store=o,this.toasterService=a,this.oauthService.configure(this.store.selectSnapshot(e.ConfigState.getOne("environment")).oAuthConfig),this.oauthService.loadDiscoveryDocument()}return n.prototype.ngOnInit=function(){var n=this.store.selectSnapshot(e.ConfigState.getSettings("Identity.Password")),r=[],t=1;"true"===(n["Abp.Identity.Password.RequireDigit"]||"").toLowerCase()&&r.push("number"),"true"===(n["Abp.Identity.Password.RequireLowercase"]||"").toLowerCase()&&r.push("small"),"true"===(n["Abp.Identity.Password.RequireUppercase"]||"").toLowerCase()&&r.push("capital"),+(n["Abp.Identity.Password.RequiredUniqueChars"]||0)>0&&r.push("special"),Number.isInteger(+n["Abp.Identity.Password.RequiredLength"])&&(t=+n["Abp.Identity.Password.RequiredLength"]),this.form=this.fb.group({username:["",[R,T(255)]],password:["",[R,a.validatePassword(r),N(t),T(32)]],email:["",[R,I]]})},n.prototype.onSubmit=function(){var n=this;if(!this.form.invalid){this.inProgress=!0;var r={userName:this.form.get("username").value,password:this.form.get("password").value,emailAddress:this.form.get("email").value,appName:"Angular"},t=this.store.selectSnapshot(e.SessionState.getTenant);this.accountService.register(r).pipe(m.switchMap((function(){return d.from(n.oauthService.fetchTokenUsingPasswordFlow(r.userName,r.password,new f.HttpHeaders(h({},t&&t.id&&{__tenant:t.id}))))})),m.switchMap((function(){return n.store.dispatch(new e.GetAppConfiguration)})),m.tap((function(){return n.store.dispatch(new c.Navigate(["/"]))})),m.take(1),m.catchError((function(e){return n.toasterService.error(b((function(){return e.error.error_description}))||b((function(){return e.error.error.message}),"AbpAccount::DefaultErrorMessage"),"Error",{life:7e3}),d.throwError(e)})),m.finalize((function(){return n.inProgress=!1}))).subscribe()}},n.decorators=[{type:t.Component,args:[{selector:"abp-register",template:'<abp-auth-wrapper\r\n  *abpReplaceableTemplate="{\r\n    componentKey: \'Account.AuthWrapperComponent\',\r\n    inputs: {\r\n      mainContentRef: { value: mainContentRef }\r\n    }\r\n  }"\r\n  [mainContentRef]="mainContentRef"\r\n>\r\n</abp-auth-wrapper>\r\n<ng-template #mainContentRef>\r\n  <h4>{{ \'AbpAccount::Register\' | abpLocalization }}</h4>\r\n  <strong>\r\n    {{ \'AbpAccount::AlreadyRegistered\' | abpLocalization }}\r\n    <a class="text-decoration-none" routerLink="/account/login">{{\r\n      \'AbpAccount::Login\' | abpLocalization\r\n    }}</a>\r\n  </strong>\r\n  <form [formGroup]="form" (ngSubmit)="onSubmit()" validateOnSubmit class="mt-4">\r\n    <div class="form-group">\r\n      <label for="input-user-name">{{ \'AbpAccount::UserName\' | abpLocalization }}</label\r\n      ><span> * </span\r\n      ><input\r\n        autofocus\r\n        type="text"\r\n        id="input-user-name"\r\n        class="form-control"\r\n        formControlName="username"\r\n        autocomplete="username"\r\n      />\r\n    </div>\r\n    <div class="form-group">\r\n      <label for="input-email-address">{{ \'AbpAccount::EmailAddress\' | abpLocalization }}</label\r\n      ><span> * </span\r\n      ><input type="email" id="input-email-address" class="form-control" formControlName="email" />\r\n    </div>\r\n    <div class="form-group">\r\n      <label for="input-password">{{ \'AbpAccount::Password\' | abpLocalization }}</label\r\n      ><span> * </span\r\n      ><input\r\n        type="password"\r\n        id="input-password"\r\n        class="form-control"\r\n        formControlName="password"\r\n        autocomplete="current-password"\r\n      />\r\n    </div>\r\n    <abp-button\r\n      [loading]="inProgress"\r\n      buttonType="submit"\r\n      name="Action"\r\n      buttonClass="btn-block btn-lg mt-3 btn btn-primary"\r\n    >\r\n      {{ \'AbpAccount::Register\' | abpLocalization }}\r\n    </abp-button>\r\n  </form>\r\n</ng-template>\r\n'}]}],n.ctorParameters=function(){return[{type:p.FormBuilder},{type:L},{type:u.OAuthService},{type:l.Store},{type:r.ToasterService}]},n}();var z={replaceableComponent:{key:"Account.LoginComponent",defaultComponent:S}},O={replaceableComponent:{key:"Account.RegisterComponent",defaultComponent:x}},q={replaceableComponent:{key:"Account.ManageProfileComponent",defaultComponent:P}},M=[{path:"",pathMatch:"full",redirectTo:"login"},{path:"",component:e.DynamicLayoutComponent,children:[{path:"login",component:e.ReplaceableRouteContainerComponent,data:z},{path:"register",component:e.ReplaceableRouteContainerComponent,data:O},{path:"manage-profile",component:e.ReplaceableRouteContainerComponent,canActivate:[e.AuthGuard],data:q}]}],k=function(){function n(){}return n.decorators=[{type:t.NgModule,args:[{imports:[s.RouterModule.forChild(M)],exports:[s.RouterModule]}]}],n}(),U=p.Validators.minLength,j=p.Validators.required,D=p.Validators.maxLength,E=["newPassword","repeatNewPassword"],F=function(){function n(n,e,r){this.fb=n,this.store=e,this.toasterService=r,this.mapErrorsFn=function(n,e,r){return E.indexOf(r.name)<0?n:n.concat(e.filter((function(n){return"passwordMismatch"===n.key})))}}return n.prototype.ngOnInit=function(){var n=this.store.selectSnapshot(e.ConfigState.getSettings("Identity.Password")),r=[],t=1;"true"===(n["Abp.Identity.Password.RequireDigit"]||"").toLowerCase()&&r.push("number"),"true"===(n["Abp.Identity.Password.RequireLowercase"]||"").toLowerCase()&&r.push("small"),"true"===(n["Abp.Identity.Password.RequireUppercase"]||"").toLowerCase()&&r.push("capital"),+(n["Abp.Identity.Password.RequiredUniqueChars"]||0)>0&&r.push("special"),Number.isInteger(+n["Abp.Identity.Password.RequiredLength"])&&(t=+n["Abp.Identity.Password.RequiredLength"]),this.form=this.fb.group({password:["",j],newPassword:["",{validators:[j,a.validatePassword(r),U(t),D(32)]}],repeatNewPassword:["",{validators:[j,a.validatePassword(r),U(t),D(32)]}]},{validators:[a.comparePasswords(E)]})},n.prototype.onSubmit=function(){var n=this;this.form.invalid||(this.inProgress=!0,this.store.dispatch(new e.ChangePassword({currentPassword:this.form.get("password").value,newPassword:this.form.get("newPassword").value})).pipe(m.finalize((function(){return n.inProgress=!1}))).subscribe({next:function(){n.form.reset(),n.toasterService.success("AbpAccount::PasswordChangedMessage","Success",{life:5e3})},error:function(e){n.toasterService.error(b((function(){return e.error.error.message}),"AbpAccount::DefaultErrorMessage"),"Error",{life:7e3})}}))},n.decorators=[{type:t.Component,args:[{selector:"abp-change-password-form",template:'<form [formGroup]="form" (ngSubmit)="onSubmit()" [mapErrorsFn]="mapErrorsFn" validateOnSubmit>\r\n  <div class="form-group">\r\n    <label for="current-password">{{\r\n      \'AbpIdentity::DisplayName:CurrentPassword\' | abpLocalization\r\n    }}</label\r\n    ><span> * </span\r\n    ><input\r\n      type="password"\r\n      id="current-password"\r\n      class="form-control"\r\n      formControlName="password"\r\n      autofocus\r\n      autocomplete="current-password"\r\n    />\r\n  </div>\r\n  <div class="form-group">\r\n    <label for="new-password">{{ \'AbpIdentity::DisplayName:NewPassword\' | abpLocalization }}</label\r\n    ><span> * </span\r\n    ><input\r\n      type="password"\r\n      id="new-password"\r\n      class="form-control"\r\n      formControlName="newPassword"\r\n      autocomplete="new-password"\r\n    />\r\n  </div>\r\n  <div class="form-group">\r\n    <label for="confirm-new-password">{{\r\n      \'AbpIdentity::DisplayName:NewPasswordConfirm\' | abpLocalization\r\n    }}</label\r\n    ><span> * </span\r\n    ><input\r\n      type="password"\r\n      id="confirm-new-password"\r\n      class="form-control"\r\n      formControlName="repeatNewPassword"\r\n      autocomplete="new-password"\r\n    />\r\n  </div>\r\n  <abp-button\r\n    iconClass="fa fa-check"\r\n    buttonClass="btn btn-primary color-white"\r\n    buttonType="submit"\r\n    [loading]="inProgress"\r\n    [disabled]="form?.invalid"\r\n    >{{ \'AbpIdentity::Save\' | abpLocalization }}</abp-button\r\n  >\r\n</form>\r\n',exportAs:"abpChangePasswordForm"}]}],n.ctorParameters=function(){return[{type:p.FormBuilder},{type:l.Store},{type:r.ToasterService}]},n}();var V=p.Validators.maxLength,_=p.Validators.required,B=p.Validators.email,G=function(){function n(n,e,r){this.fb=n,this.store=e,this.toasterService=r}return n.prototype.ngOnInit=function(){this.buildForm()},n.prototype.buildForm=function(){var n=this;this.store.dispatch(new e.GetProfile).pipe(m.withLatestFrom(this.profile$),m.take(1)).subscribe((function(e){var r=w(e,2)[1];n.form=n.fb.group({userName:[r.userName,[_,V(256)]],email:[r.email,[_,B,V(256)]],name:[r.name||"",[V(64)]],surname:[r.surname||"",[V(64)]],phoneNumber:[r.phoneNumber||"",[V(16)]]})}))},n.prototype.submit=function(){var n=this;this.form.invalid||(this.inProgress=!0,this.store.dispatch(new e.UpdateProfile(this.form.value)).pipe(m.finalize((function(){return n.inProgress=!1}))).subscribe((function(){n.toasterService.success("AbpAccount::PersonalSettingsSaved","Success",{life:5e3})})))},n.decorators=[{type:t.Component,args:[{selector:"abp-personal-settings-form",template:'<form validateOnSubmit *ngIf="form" [formGroup]="form" (ngSubmit)="submit()">\r\n  <div class="form-group">\r\n    <label for="username">{{ \'AbpIdentity::DisplayName:UserName\' | abpLocalization }}</label\r\n    ><span> * </span\r\n    ><input\r\n      type="text"\r\n      id="username"\r\n      class="form-control"\r\n      formControlName="userName"\r\n      autofocus\r\n      (keydown.space)="$event.preventDefault()"\r\n    />\r\n  </div>\r\n  <div class="row">\r\n    <div class="col col-md-6">\r\n      <div class="form-group">\r\n        <label for="name">{{ \'AbpIdentity::DisplayName:Name\' | abpLocalization }}</label\r\n        ><input type="text" id="name" class="form-control" formControlName="name" />\r\n      </div>\r\n    </div>\r\n    <div class="col col-md-6">\r\n      <div class="form-group">\r\n        <label for="surname">{{ \'AbpIdentity::DisplayName:Surname\' | abpLocalization }}</label\r\n        ><input type="text" id="surname" class="form-control" formControlName="surname" />\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class="form-group">\r\n    <label for="email-address">{{ \'AbpIdentity::DisplayName:Email\' | abpLocalization }}</label\r\n    ><span> * </span><input type="text" id="email-address" class="form-control" formControlName="email" />\r\n  </div>\r\n  <div class="form-group">\r\n    <label for="phone-number">{{ \'AbpIdentity::DisplayName:PhoneNumber\' | abpLocalization }}</label\r\n    ><input type="text" id="phone-number" class="form-control" formControlName="phoneNumber" />\r\n  </div>\r\n  <abp-button\r\n    buttonType="submit"\r\n    iconClass="fa fa-check"\r\n    buttonClass="btn btn-primary color-white"\r\n    [loading]="inProgress"\r\n    [disabled]="form?.invalid || form?.pristine"\r\n  >\r\n    {{ \'AbpIdentity::Save\' | abpLocalization }}</abp-button\r\n  >\r\n</form>\r\n',exportAs:"abpPersonalSettingsForm"}]}],n.ctorParameters=function(){return[{type:p.FormBuilder},{type:l.Store},{type:r.ToasterService}]},v([l.Select(e.ProfileState.getProfile),y("design:type",d.Observable)],n.prototype,"profile$",void 0),n}();var H=function(){function n(n,e,r){this.store=n,this.toasterService=e,this.accountService=r,this.tenant={}}return n.prototype.ngOnInit=function(){this.tenant=this.store.selectSnapshot(e.SessionState.getTenant)||{},this.tenantName=this.tenant.name||""},n.prototype.onSwitch=function(){this.isModalVisible=!0},n.prototype.save=function(){var n=this;this.tenant.name&&!this.inProgress?(this.inProgress=!0,this.accountService.findTenant(this.tenant.name).pipe(m.finalize((function(){return n.inProgress=!1})),m.take(1),m.catchError((function(e){return n.toasterService.error(b((function(){return e.error.error_description}),"AbpUi::DefaultErrorMessage"),"AbpUi::Error"),d.throwError(e)}))).subscribe((function(r){var t=r.success,o=r.tenantId;t?(n.tenant={id:o,name:n.tenant.name},n.tenantName=n.tenant.name,n.isModalVisible=!1):(n.toasterService.error("AbpUiMultiTenancy::GivenTenantIsNotAvailable","AbpUi::Error",{messageLocalizationParams:[n.tenant.name]}),n.tenant={}),n.store.dispatch(new e.SetTenant(t?n.tenant:null))}))):(this.store.dispatch(new e.SetTenant(null)),this.tenantName=null,this.isModalVisible=!1)},n.decorators=[{type:t.Component,args:[{selector:"abp-tenant-box",template:'<div class="card shadow-sm rounded mb-3">\r\n  <div class="card-body px-5">\r\n    <div class="row">\r\n      <div class="col">\r\n        <span style="font-size: 0.8em;" class="text-uppercase text-muted">{{\r\n          \'AbpUiMultiTenancy::Tenant\' | abpLocalization\r\n        }}</span\r\n        ><br />\r\n        <h6 class="m-0 d-inline-block">\r\n          <span>\r\n            {{ tenantName || (\'AbpUiMultiTenancy::NotSelected\' | abpLocalization) }}\r\n          </span>\r\n        </h6>\r\n      </div>\r\n      <div class="col-auto">\r\n        <a\r\n          id="AbpTenantSwitchLink"\r\n          href="javascript:void(0);"\r\n          class="btn btn-sm mt-3 btn-outline-primary"\r\n          (click)="onSwitch()"\r\n          >{{ \'AbpUiMultiTenancy::Switch\' | abpLocalization }}</a\r\n        >\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<abp-modal size="md" [(visible)]="isModalVisible" [busy]="inProgress">\r\n  <ng-template #abpHeader>\r\n    <h5>Switch Tenant</h5>\r\n  </ng-template>\r\n  <ng-template #abpBody>\r\n    <form (ngSubmit)="save()">\r\n      <div class="mt-2">\r\n        <div class="form-group">\r\n          <label for="name">{{ \'AbpUiMultiTenancy::Name\' | abpLocalization }}</label>\r\n          <input [(ngModel)]="tenant.name" type="text" id="name" name="tenant" class="form-control" autofocus />\r\n        </div>\r\n        <p>{{ \'AbpUiMultiTenancy::SwitchTenantHint\' | abpLocalization }}</p>\r\n      </div>\r\n    </form>\r\n  </ng-template>\r\n  <ng-template #abpFooter>\r\n    <button #abpClose type="button" class="btn btn-secondary">\r\n      {{ \'AbpTenantManagement::Cancel\' | abpLocalization }}\r\n    </button>\r\n    <abp-button buttonType="button" buttonClass="btn btn-primary" (click)="save()">\r\n      <i class="fa fa-check mr-1"></i> <span>{{ \'AbpTenantManagement::Save\' | abpLocalization }}</span>\r\n    </abp-button>\r\n  </ng-template>\r\n</abp-modal>\r\n'}]}],n.ctorParameters=function(){return[{type:l.Store},{type:r.ToasterService},{type:L}]},n}();var $=function(){function n(){}return n.decorators=[{type:t.Component,args:[{selector:"abp-auth-wrapper",template:'<div class="row">\r\n  <div class="mx-auto col col-md-5">\r\n    <abp-tenant-box\r\n      *abpReplaceableTemplate="{ componentKey: \'Account.TenantBoxComponent\' }"\r\n    ></abp-tenant-box>\r\n\r\n    <div class="abp-account-container">\r\n      <div\r\n        *ngIf="(enableLocalLogin$ | async) !== \'False\'; else disableLocalLoginTemplate"\r\n        class="card mt-3 shadow-sm rounded"\r\n      >\r\n        <div class="card-body p-5">\r\n          <ng-content *ngTemplateOutlet="mainContentRef"></ng-content>\r\n        </div>\r\n        <ng-content *ngTemplateOutlet="cancelContentRef"></ng-content>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #disableLocalLoginTemplate>\r\n  <div class="alert alert-warning">\r\n    <strong>{{ \'AbpAccount::InvalidLoginRequest\' | abpLocalization }}</strong>\r\n    {{ \'AbpAccount::ThereAreNoLoginSchemesConfiguredForThisClient\' | abpLocalization }}\r\n  </div>\r\n</ng-template>\r\n',exportAs:"abpAuthWrapper"}]}],n.propDecorators={mainContentRef:[{type:t.Input}],cancelContentRef:[{type:t.Input}]},v([l.Select(e.ConfigState.getSetting("Abp.Account.EnableLocalLogin")),y("design:type",d.Observable)],n.prototype,"enableLocalLogin$",void 0),n}();var K=function(){function n(){}return n.decorators=[{type:t.NgModule,args:[{declarations:[$,S,x,H,F,P,G],imports:[e.CoreModule,k,r.ThemeSharedModule,i.TableModule,o.NgbDropdownModule,a.NgxValidateCoreModule],exports:[]}]}],n}();var W,Y=new t.InjectionToken("ACCOUNT_OPTIONS");!function(n){function e(){}n.AuthWrapperComponentInputs=e,n.AuthWrapperComponentOutputs=function(){},n.TenantBoxComponentInputs=function(){},n.TenantBoxComponentOutputs=function(){},n.PersonalSettingsComponentInputs=function(){},n.PersonalSettingsComponentOutputs=function(){},n.ChangePasswordComponentInputs=function(){},n.ChangePasswordComponentOutputs=function(){}}(W||(W={})),n.ACCOUNT_OPTIONS=Y,n.AccountModule=K,n.AccountService=L,n.ChangePasswordComponent=F,n.LoginComponent=S,n.ManageProfileComponent=P,n.PersonalSettingsComponent=G,n.RegisterComponent=x,n.TenantBoxComponent=H,n.optionsFactory=function(n){return h({redirectUrl:"/"},n)},n.ɵa=$,n.ɵb=S,n.ɵd=x,n.ɵe=L,n.ɵf=H,n.ɵg=F,n.ɵh=P,n.ɵi=G,n.ɵj=k,Object.defineProperty(n,"__esModule",{value:!0})}));
//# sourceMappingURL=abp-ng.account.umd.min.js.map