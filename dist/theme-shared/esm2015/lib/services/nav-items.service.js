import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
let NavItemsService = class NavItemsService {
    constructor() {
        this._items$ = new BehaviorSubject([]);
    }
    get items() {
        return this._items$.value;
    }
    get items$() {
        return this._items$.asObservable();
    }
    addItems(items) {
        this._items$.next([...this.items, ...items].sort(sortItems));
    }
    removeItem(id) {
        const index = this.items.findIndex(item => item.id === id);
        if (index > -1) {
            this._items$.next([...this.items.slice(0, index), ...this.items.slice(index + 1)]);
        }
    }
    patchItem(id, item) {
        const index = this.items.findIndex(i => i.id === id);
        if (index > -1) {
            this._items$.next([
                ...this.items.slice(0, index),
                Object.assign(Object.assign({}, this.items[index]), item),
                ...this.items.slice(index + 1),
            ].sort(sortItems));
        }
    }
};
NavItemsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NavItemsService_Factory() { return new NavItemsService(); }, token: NavItemsService, providedIn: "root" });
NavItemsService = __decorate([
    Injectable({ providedIn: 'root' })
], NavItemsService);
export { NavItemsService };
function sortItems(a, b) {
    if (!a.order)
        return 1;
    if (!b.order)
        return -1;
    return a.order - b.order;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2LWl0ZW1zLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy90aGVtZS1zaGFyZWQvc3JjL2xpYi9zZXJ2aWNlcy9uYXYtaXRlbXMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsZUFBZSxFQUFjLE1BQU0sTUFBTSxDQUFDOztBQUluRCxJQUFhLGVBQWUsR0FBNUIsTUFBYSxlQUFlO0lBQTVCO1FBQ1UsWUFBTyxHQUFHLElBQUksZUFBZSxDQUFZLEVBQUUsQ0FBQyxDQUFDO0tBbUN0RDtJQWpDQyxJQUFJLEtBQUs7UUFDUCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO0lBQzVCLENBQUM7SUFFRCxJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDckMsQ0FBQztJQUVELFFBQVEsQ0FBQyxLQUFnQjtRQUN2QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFFRCxVQUFVLENBQUMsRUFBbUI7UUFDNUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBRTNELElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFO1lBQ2QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDcEY7SUFDSCxDQUFDO0lBRUQsU0FBUyxDQUFDLEVBQW1CLEVBQUUsSUFBa0M7UUFDL0QsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBRXJELElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFO1lBQ2QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQ2Y7Z0JBQ0UsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDO2dEQUN4QixJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFLLElBQUk7Z0JBQy9CLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQzthQUMvQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FDbEIsQ0FBQztTQUNIO0lBQ0gsQ0FBQztDQUNGLENBQUE7O0FBcENZLGVBQWU7SUFEM0IsVUFBVSxDQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxDQUFDO0dBQ3RCLGVBQWUsQ0FvQzNCO1NBcENZLGVBQWU7QUFzQzVCLFNBQVMsU0FBUyxDQUFDLENBQVUsRUFBRSxDQUFVO0lBQ3ZDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSztRQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3ZCLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSztRQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFFeEIsT0FBTyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUM7QUFDM0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IE5hdkl0ZW0gfSBmcm9tICcuLi9tb2RlbHMvbmF2LWl0ZW0nO1xyXG5cclxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcclxuZXhwb3J0IGNsYXNzIE5hdkl0ZW1zU2VydmljZSB7XHJcbiAgcHJpdmF0ZSBfaXRlbXMkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxOYXZJdGVtW10+KFtdKTtcclxuXHJcbiAgZ2V0IGl0ZW1zKCk6IE5hdkl0ZW1bXSB7XHJcbiAgICByZXR1cm4gdGhpcy5faXRlbXMkLnZhbHVlO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGl0ZW1zJCgpOiBPYnNlcnZhYmxlPE5hdkl0ZW1bXT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX2l0ZW1zJC5hc09ic2VydmFibGUoKTtcclxuICB9XHJcblxyXG4gIGFkZEl0ZW1zKGl0ZW1zOiBOYXZJdGVtW10pIHtcclxuICAgIHRoaXMuX2l0ZW1zJC5uZXh0KFsuLi50aGlzLml0ZW1zLCAuLi5pdGVtc10uc29ydChzb3J0SXRlbXMpKTtcclxuICB9XHJcblxyXG4gIHJlbW92ZUl0ZW0oaWQ6IHN0cmluZyB8IG51bWJlcikge1xyXG4gICAgY29uc3QgaW5kZXggPSB0aGlzLml0ZW1zLmZpbmRJbmRleChpdGVtID0+IGl0ZW0uaWQgPT09IGlkKTtcclxuXHJcbiAgICBpZiAoaW5kZXggPiAtMSkge1xyXG4gICAgICB0aGlzLl9pdGVtcyQubmV4dChbLi4udGhpcy5pdGVtcy5zbGljZSgwLCBpbmRleCksIC4uLnRoaXMuaXRlbXMuc2xpY2UoaW5kZXggKyAxKV0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcGF0Y2hJdGVtKGlkOiBzdHJpbmcgfCBudW1iZXIsIGl0ZW06IFBhcnRpYWw8T21pdDxOYXZJdGVtLCAnaWQnPj4pIHtcclxuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5pdGVtcy5maW5kSW5kZXgoaSA9PiBpLmlkID09PSBpZCk7XHJcblxyXG4gICAgaWYgKGluZGV4ID4gLTEpIHtcclxuICAgICAgdGhpcy5faXRlbXMkLm5leHQoXHJcbiAgICAgICAgW1xyXG4gICAgICAgICAgLi4udGhpcy5pdGVtcy5zbGljZSgwLCBpbmRleCksXHJcbiAgICAgICAgICB7IC4uLnRoaXMuaXRlbXNbaW5kZXhdLCAuLi5pdGVtIH0sXHJcbiAgICAgICAgICAuLi50aGlzLml0ZW1zLnNsaWNlKGluZGV4ICsgMSksXHJcbiAgICAgICAgXS5zb3J0KHNvcnRJdGVtcyksXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBzb3J0SXRlbXMoYTogTmF2SXRlbSwgYjogTmF2SXRlbSkge1xyXG4gIGlmICghYS5vcmRlcikgcmV0dXJuIDE7XHJcbiAgaWYgKCFiLm9yZGVyKSByZXR1cm4gLTE7XHJcblxyXG4gIHJldHVybiBhLm9yZGVyIC0gYi5vcmRlcjtcclxufVxyXG4iXX0=