import { LocalizationService } from '@abp/ng.core';
import { merge, of } from 'rxjs';
import { map } from 'rxjs/operators';
import { EXTRA_PROPERTIES_KEY } from '../constants/extra-properties';
export function createEnum(members) {
    const enumObject = {};
    members.forEach(({ name, value }) => {
        enumObject[(enumObject[name] = value)] = name;
    });
    return enumObject;
}
export function createEnumValueResolver(enumType, lookupEnum, propName) {
    return data => {
        const value = data.record[EXTRA_PROPERTIES_KEY][propName];
        const key = lookupEnum.transformed[value];
        const l10n = data.getInjected(LocalizationService);
        const localizeEnum = createEnumLocalizer(l10n, enumType, lookupEnum);
        return createLocalizationStream(l10n, localizeEnum(key));
    };
}
export function createEnumOptions(enumType, lookupEnum) {
    return data => {
        const l10n = data.getInjected(LocalizationService);
        const localizeEnum = createEnumLocalizer(l10n, enumType, lookupEnum);
        return createLocalizationStream(l10n, lookupEnum.fields.map(({ name, value }) => ({
            key: localizeEnum(name),
            value,
        })));
    };
}
function createLocalizationStream(l10n, mapTarget) {
    return merge(of(null), l10n.languageChange).pipe(map(() => mapTarget));
}
function createEnumLocalizer(l10n, enumType, lookupEnum) {
    const resource = lookupEnum.localizationResource;
    const shortType = getShortEnumType(enumType);
    return key => l10n.localizeWithFallbackSync([resource], ['Enum:' + shortType + '.' + key, shortType + '.' + key, key], key);
}
function getShortEnumType(enumType) {
    return enumType.split('.').pop();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW51bS51dGlsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvdGhlbWUtc2hhcmVkL2V4dGVuc2lvbnMvc3JjL2xpYi91dGlscy9lbnVtLnV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFPLG1CQUFtQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3hELE9BQU8sRUFBRSxLQUFLLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzdDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUlyRSxNQUFNLFVBQVUsVUFBVSxDQUFDLE9BQXNDO0lBQy9ELE1BQU0sVUFBVSxHQUFRLEVBQUUsQ0FBQztJQUUzQixPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRTtRQUNsQyxVQUFVLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDaEQsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLFVBQVUsQ0FBQztBQUNwQixDQUFDO0FBRUQsTUFBTSxVQUFVLHVCQUF1QixDQUNyQyxRQUFnQixFQUNoQixVQUFpQyxFQUNqQyxRQUFnQjtJQUVoQixPQUFPLElBQUksQ0FBQyxFQUFFO1FBQ1osTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzFELE1BQU0sR0FBRyxHQUFHLFVBQVUsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDMUMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBQ25ELE1BQU0sWUFBWSxHQUFHLG1CQUFtQixDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFFckUsT0FBTyx3QkFBd0IsQ0FBQyxJQUFJLEVBQUUsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDM0QsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sVUFBVSxpQkFBaUIsQ0FDL0IsUUFBZ0IsRUFDaEIsVUFBaUM7SUFFakMsT0FBTyxJQUFJLENBQUMsRUFBRTtRQUNaLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUNuRCxNQUFNLFlBQVksR0FBRyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBRXJFLE9BQU8sd0JBQXdCLENBQzdCLElBQUksRUFDSixVQUFVLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQzFDLEdBQUcsRUFBRSxZQUFZLENBQUMsSUFBSSxDQUFDO1lBQ3ZCLEtBQUs7U0FDTixDQUFDLENBQUMsQ0FDSixDQUFDO0lBQ0osQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVELFNBQVMsd0JBQXdCLENBQUMsSUFBeUIsRUFBRSxTQUFjO0lBQ3pFLE9BQU8sS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0FBQ3pFLENBQUM7QUFFRCxTQUFTLG1CQUFtQixDQUMxQixJQUF5QixFQUN6QixRQUFnQixFQUNoQixVQUFpQztJQUVqQyxNQUFNLFFBQVEsR0FBRyxVQUFVLENBQUMsb0JBQW9CLENBQUM7SUFDakQsTUFBTSxTQUFTLEdBQUcsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFN0MsT0FBTyxHQUFHLENBQUMsRUFBRSxDQUNYLElBQUksQ0FBQyx3QkFBd0IsQ0FDM0IsQ0FBQyxRQUFRLENBQUMsRUFDVixDQUFDLE9BQU8sR0FBRyxTQUFTLEdBQUcsR0FBRyxHQUFHLEdBQUcsRUFBRSxTQUFTLEdBQUcsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFDN0QsR0FBRyxDQUNKLENBQUM7QUFDTixDQUFDO0FBRUQsU0FBUyxnQkFBZ0IsQ0FBQyxRQUFnQjtJQUN4QyxPQUFPLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDbkMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFCUCwgTG9jYWxpemF0aW9uU2VydmljZSB9IGZyb20gJ0BhYnAvbmcuY29yZSc7XHJcbmltcG9ydCB7IG1lcmdlLCBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IEVYVFJBX1BST1BFUlRJRVNfS0VZIH0gZnJvbSAnLi4vY29uc3RhbnRzL2V4dHJhLXByb3BlcnRpZXMnO1xyXG5pbXBvcnQgeyBPYmplY3RFeHRlbnNpb25zIH0gZnJvbSAnLi4vbW9kZWxzL29iamVjdC1leHRlbnNpb25zJztcclxuaW1wb3J0IHsgUHJvcENhbGxiYWNrIH0gZnJvbSAnLi4vbW9kZWxzL3Byb3BzJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFbnVtKG1lbWJlcnM6IE9iamVjdEV4dGVuc2lvbnMuRW51bU1lbWJlcltdKSB7XHJcbiAgY29uc3QgZW51bU9iamVjdDogYW55ID0ge307XHJcblxyXG4gIG1lbWJlcnMuZm9yRWFjaCgoeyBuYW1lLCB2YWx1ZSB9KSA9PiB7XHJcbiAgICBlbnVtT2JqZWN0WyhlbnVtT2JqZWN0W25hbWVdID0gdmFsdWUpXSA9IG5hbWU7XHJcbiAgfSk7XHJcblxyXG4gIHJldHVybiBlbnVtT2JqZWN0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRW51bVZhbHVlUmVzb2x2ZXI8VCA9IGFueT4oXHJcbiAgZW51bVR5cGU6IHN0cmluZyxcclxuICBsb29rdXBFbnVtOiBPYmplY3RFeHRlbnNpb25zLkVudW0sXHJcbiAgcHJvcE5hbWU6IHN0cmluZyxcclxuKTogUHJvcENhbGxiYWNrPFQsIE9ic2VydmFibGU8c3RyaW5nPj4ge1xyXG4gIHJldHVybiBkYXRhID0+IHtcclxuICAgIGNvbnN0IHZhbHVlID0gZGF0YS5yZWNvcmRbRVhUUkFfUFJPUEVSVElFU19LRVldW3Byb3BOYW1lXTtcclxuICAgIGNvbnN0IGtleSA9IGxvb2t1cEVudW0udHJhbnNmb3JtZWRbdmFsdWVdO1xyXG4gICAgY29uc3QgbDEwbiA9IGRhdGEuZ2V0SW5qZWN0ZWQoTG9jYWxpemF0aW9uU2VydmljZSk7XHJcbiAgICBjb25zdCBsb2NhbGl6ZUVudW0gPSBjcmVhdGVFbnVtTG9jYWxpemVyKGwxMG4sIGVudW1UeXBlLCBsb29rdXBFbnVtKTtcclxuXHJcbiAgICByZXR1cm4gY3JlYXRlTG9jYWxpemF0aW9uU3RyZWFtKGwxMG4sIGxvY2FsaXplRW51bShrZXkpKTtcclxuICB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRW51bU9wdGlvbnM8VCA9IGFueT4oXHJcbiAgZW51bVR5cGU6IHN0cmluZyxcclxuICBsb29rdXBFbnVtOiBPYmplY3RFeHRlbnNpb25zLkVudW0sXHJcbik6IFByb3BDYWxsYmFjazxULCBPYnNlcnZhYmxlPEFCUC5PcHRpb248YW55PltdPj4ge1xyXG4gIHJldHVybiBkYXRhID0+IHtcclxuICAgIGNvbnN0IGwxMG4gPSBkYXRhLmdldEluamVjdGVkKExvY2FsaXphdGlvblNlcnZpY2UpO1xyXG4gICAgY29uc3QgbG9jYWxpemVFbnVtID0gY3JlYXRlRW51bUxvY2FsaXplcihsMTBuLCBlbnVtVHlwZSwgbG9va3VwRW51bSk7XHJcblxyXG4gICAgcmV0dXJuIGNyZWF0ZUxvY2FsaXphdGlvblN0cmVhbShcclxuICAgICAgbDEwbixcclxuICAgICAgbG9va3VwRW51bS5maWVsZHMubWFwKCh7IG5hbWUsIHZhbHVlIH0pID0+ICh7XHJcbiAgICAgICAga2V5OiBsb2NhbGl6ZUVudW0obmFtZSksXHJcbiAgICAgICAgdmFsdWUsXHJcbiAgICAgIH0pKSxcclxuICAgICk7XHJcbiAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlTG9jYWxpemF0aW9uU3RyZWFtKGwxMG46IExvY2FsaXphdGlvblNlcnZpY2UsIG1hcFRhcmdldDogYW55KSB7XHJcbiAgcmV0dXJuIG1lcmdlKG9mKG51bGwpLCBsMTBuLmxhbmd1YWdlQ2hhbmdlKS5waXBlKG1hcCgoKSA9PiBtYXBUYXJnZXQpKTtcclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlRW51bUxvY2FsaXplcihcclxuICBsMTBuOiBMb2NhbGl6YXRpb25TZXJ2aWNlLFxyXG4gIGVudW1UeXBlOiBzdHJpbmcsXHJcbiAgbG9va3VwRW51bTogT2JqZWN0RXh0ZW5zaW9ucy5FbnVtLFxyXG4pOiAoa2V5OiBzdHJpbmcpID0+IHN0cmluZyB7XHJcbiAgY29uc3QgcmVzb3VyY2UgPSBsb29rdXBFbnVtLmxvY2FsaXphdGlvblJlc291cmNlO1xyXG4gIGNvbnN0IHNob3J0VHlwZSA9IGdldFNob3J0RW51bVR5cGUoZW51bVR5cGUpO1xyXG5cclxuICByZXR1cm4ga2V5ID0+XHJcbiAgICBsMTBuLmxvY2FsaXplV2l0aEZhbGxiYWNrU3luYyhcclxuICAgICAgW3Jlc291cmNlXSxcclxuICAgICAgWydFbnVtOicgKyBzaG9ydFR5cGUgKyAnLicgKyBrZXksIHNob3J0VHlwZSArICcuJyArIGtleSwga2V5XSxcclxuICAgICAga2V5LFxyXG4gICAgKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0U2hvcnRFbnVtVHlwZShlbnVtVHlwZTogc3RyaW5nKTogc3RyaW5nIHtcclxuICByZXR1cm4gZW51bVR5cGUuc3BsaXQoJy4nKS5wb3AoKTtcclxufVxyXG4iXX0=