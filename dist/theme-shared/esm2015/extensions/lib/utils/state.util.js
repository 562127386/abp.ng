import { createSelector } from '@ngxs/store';
import { pipe, zip } from 'rxjs';
import { filter, map, switchMap, take } from 'rxjs/operators';
import { EntityProp } from '../models/entity-props';
import { FormProp } from '../models/form-props';
import { createEnum, createEnumOptions, createEnumValueResolver } from './enum.util';
import { createDisplayNameLocalizationPipeKeyGenerator } from './localization.util';
import { createExtraPropertyValueResolver } from './props.util';
import { getValidatorsFromProperty } from './validation.util';
const selectConfig = (state) => state.ConfigState;
const ɵ0 = selectConfig;
const ɵ1 = (config) => config.objectExtensions;
const selectObjectExtensions = createSelector([selectConfig], ɵ1);
const ɵ2 = (config) => config.localization;
const selectLocalization = createSelector([selectConfig], ɵ2);
const ɵ3 = (extensions) => Object.keys(extensions.enums).reduce((acc, key) => {
    const { fields, localizationResource } = extensions.enums[key];
    acc[key] = {
        fields,
        localizationResource,
        transformed: createEnum(fields),
    };
    return acc;
}, {});
const selectEnums = createSelector([selectObjectExtensions, selectLocalization], ɵ3);
const createObjectExtensionEntitiesSelector = (moduleKey) => createSelector([selectObjectExtensions], (extensions) => {
    if (!extensions)
        return null;
    return (extensions.modules[moduleKey] || {}).entities;
});
const ɵ4 = createObjectExtensionEntitiesSelector;
export function getObjectExtensionEntitiesFromStore(store, moduleKey) {
    return store.select(createObjectExtensionEntitiesSelector(moduleKey)).pipe(map(entities => (isUndefined(entities) ? {} : entities)), filter(Boolean), take(1));
}
export function mapEntitiesToContributors(store, resource) {
    return pipe(switchMap(entities => zip(store.select(selectLocalization), store.select(selectEnums)).pipe(map(([localization, enums]) => {
        const generateDisplayName = createDisplayNameLocalizationPipeKeyGenerator(localization);
        return Object.keys(entities).reduce((acc, key) => {
            acc.prop[key] = [];
            acc.createForm[key] = [];
            acc.editForm[key] = [];
            const entity = entities[key];
            if (!entity)
                return acc;
            const properties = entity.properties;
            if (!properties)
                return acc;
            const mapPropertiesToContributors = createPropertiesToContributorsMapper(generateDisplayName, resource, enums);
            return mapPropertiesToContributors(properties, acc, key);
        }, {
            prop: {},
            createForm: {},
            editForm: {},
        });
    }))), take(1));
}
function createPropertiesToContributorsMapper(generateDisplayName, resource, enums) {
    return (properties, contributors, key) => {
        const isExtra = true;
        Object.keys(properties).forEach((name) => {
            const property = properties[name];
            const type = getTypeFromProperty(property);
            const displayName = generateDisplayName(property.displayName, { name, resource });
            if (property.ui.onTable.isVisible) {
                const sortable = Boolean(property.ui.onTable.isSortable);
                const columnWidth = type === "boolean" /* Boolean */ ? 150 : 250;
                const valueResolver = type === "enum" /* Enum */
                    ? createEnumValueResolver(property.type, enums[property.type], name)
                    : createExtraPropertyValueResolver(name);
                const entityProp = new EntityProp({
                    type,
                    name,
                    displayName,
                    sortable,
                    columnWidth,
                    valueResolver,
                    isExtra,
                });
                const contributor = (propList) => propList.addTail(entityProp);
                contributors.prop[key].push(contributor);
            }
            const isOnCreateForm = property.ui.onCreateForm.isVisible;
            const isOnEditForm = property.ui.onEditForm.isVisible;
            if (isOnCreateForm || isOnEditForm) {
                const defaultValue = property.defaultValue;
                const validators = () => getValidatorsFromProperty(property);
                let options;
                if (type === "enum" /* Enum */)
                    options = createEnumOptions(name, enums[property.type]);
                const formProp = new FormProp({
                    type,
                    name,
                    displayName,
                    options,
                    defaultValue,
                    validators,
                    isExtra,
                });
                const formContributor = (propList) => propList.addTail(formProp);
                if (isOnCreateForm)
                    contributors.createForm[key].push(formContributor);
                if (isOnEditForm)
                    contributors.editForm[key].push(formContributor);
            }
        });
        return contributors;
    };
}
function getTypeFromProperty(property) {
    return property.typeSimple.replace(/\?$/, '');
}
function isUndefined(obj) {
    return typeof obj === 'undefined';
}
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4 };
//# sourceMappingURL=data:application/json;base64,