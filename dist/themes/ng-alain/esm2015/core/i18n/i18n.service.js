import { __decorate, __metadata } from "tslib";
// ËØ∑ÂèÇËÄÉÔºöhttps://ng-alain.com/docs/i18n
import { Platform } from '@angular/cdk/platform';
import { registerLocaleData } from '@angular/common';
import ngEn from '@angular/common/locales/en';
import ngZh from '@angular/common/locales/zh';
import ngZhTw from '@angular/common/locales/zh-Hant';
import { Injectable } from '@angular/core';
import { DelonLocaleService, en_US as delonEnUS, SettingsService, zh_CN as delonZhCn, zh_TW as delonZhTw, } from '@delon/theme';
import { TranslateService } from '@ngx-translate/core';
import { enUS as dfEn, zhCN as dfZhCn, zhTW as dfZhTw } from 'date-fns/locale';
import { en_US as zorroEnUS, NzI18nService, zh_CN as zorroZhCN, zh_TW as zorroZhTW } from 'ng-zorro-antd/i18n';
import { BehaviorSubject } from 'rxjs';
import { filter } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@delon/theme";
import * as i2 from "ng-zorro-antd/i18n";
import * as i3 from "@ngx-translate/core";
import * as i4 from "@angular/cdk/platform";
const DEFAULT = 'zh-CN';
const LANGS = {
    'zh-CN': {
        text: 'ÁÆÄ‰Ωì‰∏≠Êñá',
        ng: ngZh,
        zorro: zorroZhCN,
        date: dfZhCn,
        delon: delonZhCn,
        abbr: 'üá®üá≥',
    },
    'zh-TW': {
        text: 'ÁπÅ‰Ωì‰∏≠Êñá',
        ng: ngZhTw,
        zorro: zorroZhTW,
        date: dfZhTw,
        delon: delonZhTw,
        abbr: 'üá≠üá∞',
    },
    'en-US': {
        text: 'English',
        ng: ngEn,
        zorro: zorroEnUS,
        date: dfEn,
        delon: delonEnUS,
        abbr: 'üá¨üáß',
    },
};
let I18NService = class I18NService {
    constructor(settings, nzI18nService, delonLocaleService, translate, platform) {
        this.settings = settings;
        this.nzI18nService = nzI18nService;
        this.delonLocaleService = delonLocaleService;
        this.translate = translate;
        this.platform = platform;
        this._default = DEFAULT;
        this.change$ = new BehaviorSubject(null);
        this._langs = Object.keys(LANGS).map((code) => {
            const item = LANGS[code];
            return { code, text: item.text, abbr: item.abbr };
        });
        // `@ngx-translate/core` È¢ÑÂÖàÁü•ÈÅìÊîØÊåÅÂì™‰∫õËØ≠Ë®Ä
        const lans = this._langs.map((item) => item.code);
        translate.addLangs(lans);
        const defaultLan = this.getDefaultLang();
        if (lans.includes(defaultLan)) {
            this._default = defaultLan;
        }
        this.updateLangData(this._default);
    }
    getDefaultLang() {
        if (!this.platform.isBrowser) {
            return DEFAULT;
        }
        if (this.settings.layout.lang) {
            return this.settings.layout.lang;
        }
        return (navigator.languages ? navigator.languages[0] : null) || navigator.language;
    }
    updateLangData(lang) {
        const item = LANGS[lang];
        registerLocaleData(item.ng);
        this.nzI18nService.setLocale(item.zorro);
        this.nzI18nService.setDateLocale(item.date);
        this.delonLocaleService.setLocale(item.delon);
    }
    get change() {
        return this.change$.asObservable().pipe(filter((w) => w != null));
    }
    use(lang) {
        lang = lang || this.translate.getDefaultLang();
        if (this.currentLang === lang) {
            return;
        }
        this.updateLangData(lang);
        this.translate.use(lang).subscribe(() => this.change$.next(lang));
    }
    /** Ëé∑ÂèñËØ≠Ë®ÄÂàóË°® */
    getLangs() {
        return this._langs;
    }
    /** ÁøªËØë */
    fanyi(key, interpolateParams) {
        return this.translate.instant(key, interpolateParams);
    }
    /** ÈªòËÆ§ËØ≠Ë®Ä */
    get defaultLang() {
        return this._default;
    }
    /** ÂΩìÂâçËØ≠Ë®Ä */
    get currentLang() {
        return this.translate.currentLang || this.translate.getDefaultLang() || this._default;
    }
};
I18NService.…µprov = i0.…µ…µdefineInjectable({ factory: function I18NService_Factory() { return new I18NService(i0.…µ…µinject(i1.SettingsService), i0.…µ…µinject(i2.NzI18nService), i0.…µ…µinject(i1.DelonLocaleService), i0.…µ…µinject(i3.TranslateService), i0.…µ…µinject(i4.Platform)); }, token: I18NService, providedIn: "root" });
I18NService = __decorate([
    Injectable({ providedIn: 'root' }),
    __metadata("design:paramtypes", [SettingsService,
        NzI18nService,
        DelonLocaleService,
        TranslateService,
        Platform])
], I18NService);
export { I18NService };
//# sourceMappingURL=data:application/json;base64,