// tslint:disable: no-duplicate-imports
import { HttpClient } from '@angular/common/http';
import { APP_INITIALIZER, LOCALE_ID, NgModule } from '@angular/core';
// #region default language
// 参考：https://ng-alain.com/docs/i18n
import { default as ngLang } from '@angular/common/locales/zh';
import { DELON_LOCALE, zh_CN as delonLang } from '@delon/theme';
import { zhCN as dateLang } from 'date-fns/locale';
import { NZ_DATE_LOCALE, NZ_I18N, zh_CN as zorroLang } from 'ng-zorro-antd/i18n';
// register angular
import { registerLocaleData } from '@angular/common';
// #endregion
// #region i18n services
import { I18NService } from '@fs/ng-alain/core';
import { ALAIN_I18N_TOKEN } from '@delon/theme';
import { TranslateLoader, TranslateModule } from '@ngx-translate/core';
import { TranslateHttpLoader } from '@ngx-translate/http-loader';
// #endregion
// #region JSON Schema form (using @delon/form)
import { JsonSchemaModule } from '@fs/ng-alain/shared';
// #endregion
// #region Startup Service
import { StartupService } from '@fs/ng-alain/core';
// #endregion
import { CoreModule } from '@fs/ng-alain/core';
import { GlobalConfigModule } from './global-config.module';
//import { LayoutModule } from './layout/layout.module';
import { STWidgetModule } from '@fs/ng-alain/shared';
// #endregion
// #region global third module
import { ThemeSharedModule } from '@abp/ng.theme.shared';
import { ThemeBasicModule } from '@abp/ng.theme.basic';
import { NgAlainBasicModule } from '@fs/ng-alain/basic';
import * as i0 from "@angular/core";
import * as i1 from "./global-config.module";
import * as i2 from "@ngx-translate/core";
import * as i3 from "@abp/ng.theme.shared";
import * as i4 from "@abp/ng.theme.basic";
import * as i5 from "@fs/ng-alain/basic";
const LANG = {
    abbr: 'zh',
    ng: ngLang,
    zorro: zorroLang,
    date: dateLang,
    delon: delonLang,
};
registerLocaleData(LANG.ng, LANG.abbr);
const LANG_PROVIDES = [
    { provide: LOCALE_ID, useValue: LANG.abbr },
    { provide: NZ_I18N, useValue: LANG.zorro },
    { provide: NZ_DATE_LOCALE, useValue: LANG.date },
    { provide: DELON_LOCALE, useValue: LANG.delon },
];
// 加载i18n语言文件
export function I18nHttpLoaderFactory(http) {
    return new TranslateHttpLoader(http, `assets/tmp/i18n/`, '.json');
}
const I18NSERVICE_MODULES = [
    TranslateModule.forRoot({
        loader: {
            provide: TranslateLoader,
            useFactory: I18nHttpLoaderFactory,
            deps: [HttpClient],
        },
    }),
];
const I18NSERVICE_PROVIDES = [
    { provide: ALAIN_I18N_TOKEN, useClass: I18NService, multi: false }
];
// #endregion
// #region global third module
const GLOBAL_THIRD_MODULES = [];
const FORM_MODULES = [JsonSchemaModule];
// #endregion
// #region Http Interceptors
// import { HTTP_INTERCEPTORS } from '@angular/common/http';
// import { DefaultInterceptor } from '@fs/ng-alain/core';
// import { SimpleInterceptor } from '@delon/auth';
const INTERCEPTOR_PROVIDES = [
// { provide: HTTP_INTERCEPTORS, useClass: SimpleInterceptor, multi: true },
// { provide: HTTP_INTERCEPTORS, useClass: DefaultInterceptor, multi: true },
];
export function StartupServiceFactory(startupService) {
    return () => startupService.load();
}
const APPINIT_PROVIDES = [
    StartupService,
    {
        provide: APP_INITIALIZER,
        useFactory: StartupServiceFactory,
        deps: [StartupService],
        multi: true,
    },
];
const ABP_MODULES = [
    ThemeSharedModule.forRoot(),
    ThemeBasicModule.forRoot(),
    NgAlainBasicModule.forRoot()
];
// #endregion
export class NgAlainModule {
    static forRoot() {
        return {
            ngModule: NgAlainModule
        };
    }
}
NgAlainModule.ɵmod = i0.ɵɵdefineNgModule({ type: NgAlainModule });
NgAlainModule.ɵinj = i0.ɵɵdefineInjector({ factory: function NgAlainModule_Factory(t) { return new (t || NgAlainModule)(); }, providers: [...LANG_PROVIDES, ...INTERCEPTOR_PROVIDES, ...I18NSERVICE_PROVIDES, ...APPINIT_PROVIDES], imports: [[
            GlobalConfigModule.forRoot(),
            CoreModule,
            //LayoutModule,
            STWidgetModule,
            ...I18NSERVICE_MODULES,
            ...ABP_MODULES,
            ...GLOBAL_THIRD_MODULES,
            ...FORM_MODULES,
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(NgAlainModule, { imports: [i1.GlobalConfigModule, CoreModule,
        //LayoutModule,
        STWidgetModule, i2.TranslateModule, i3.ThemeSharedModule, i4.ThemeBasicModule, i5.NgAlainBasicModule, JsonSchemaModule] }); })();
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(NgAlainModule, [{
        type: NgModule,
        args: [{
                imports: [
                    GlobalConfigModule.forRoot(),
                    CoreModule,
                    //LayoutModule,
                    STWidgetModule,
                    ...I18NSERVICE_MODULES,
                    ...ABP_MODULES,
                    ...GLOBAL_THIRD_MODULES,
                    ...FORM_MODULES,
                ],
                providers: [...LANG_PROVIDES, ...INTERCEPTOR_PROVIDES, ...I18NSERVICE_PROVIDES, ...APPINIT_PROVIDES],
            }]
    }], null, null); })();
//# sourceMappingURL=data:application/json;base64,