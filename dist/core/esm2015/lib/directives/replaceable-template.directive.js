import { __decorate, __metadata } from "tslib";
import { ComponentFactoryResolver, Directive, Injector, Input, TemplateRef, ViewContainerRef, } from '@angular/core';
import { Store } from '@ngxs/store';
import { filter } from 'rxjs/operators';
import { ReplaceableComponentsState } from '../states/replaceable-components.state';
import { takeUntilDestroy } from '../utils/rxjs-utils';
import compare from 'just-compare';
import snq from 'snq';
let ReplaceableTemplateDirective = class ReplaceableTemplateDirective {
    constructor(injector, templateRef, cfRes, vcRef, store) {
        this.injector = injector;
        this.templateRef = templateRef;
        this.cfRes = cfRes;
        this.vcRef = vcRef;
        this.store = store;
        this.providedData = { inputs: {}, outputs: {} };
        this.context = {};
        this.defaultComponentSubscriptions = {};
        this.initialized = false;
        this.context = {
            initTemplate: ref => {
                this.resetDefaultComponent();
                this.defaultComponentRef = ref;
                this.setDefaultComponentInputs();
            },
        };
    }
    ngOnInit() {
        this.store
            .select(ReplaceableComponentsState.getComponent(this.data.componentKey))
            .pipe(filter((res = {}) => !this.initialized || !compare(res.component, this.externalComponent)), takeUntilDestroy(this))
            .subscribe((res = {}) => {
            this.vcRef.clear();
            this.externalComponent = res.component;
            if (this.defaultComponentRef) {
                this.resetDefaultComponent();
            }
            if (res.component) {
                this.setProvidedData();
                const customInjector = Injector.create({
                    providers: [{ provide: 'REPLACEABLE_DATA', useValue: this.providedData }],
                    parent: this.injector,
                });
                this.vcRef.createComponent(this.cfRes.resolveComponentFactory(res.component), 0, customInjector);
            }
            else {
                this.vcRef.createEmbeddedView(this.templateRef, this.context);
            }
            this.initialized = true;
        });
    }
    ngOnChanges(changes) {
        if (snq(() => changes.data.currentValue.inputs) && this.defaultComponentRef) {
            this.setDefaultComponentInputs();
        }
    }
    ngOnDestroy() { }
    setDefaultComponentInputs() {
        if (!this.defaultComponentRef || (!this.data.inputs && !this.data.outputs))
            return;
        if (this.data.inputs) {
            for (const key in this.data.inputs) {
                if (this.data.inputs.hasOwnProperty(key)) {
                    if (!compare(this.defaultComponentRef[key], this.data.inputs[key].value)) {
                        this.defaultComponentRef[key] = this.data.inputs[key].value;
                    }
                }
            }
        }
        if (this.data.outputs) {
            for (const key in this.data.outputs) {
                if (this.data.outputs.hasOwnProperty(key)) {
                    if (!this.defaultComponentSubscriptions[key]) {
                        this.defaultComponentSubscriptions[key] = this.defaultComponentRef[key].subscribe(value => {
                            this.data.outputs[key](value);
                        });
                    }
                }
            }
        }
    }
    setProvidedData() {
        this.providedData = Object.assign(Object.assign({}, this.data), { inputs: {} });
        if (!this.data.inputs)
            return;
        Object.defineProperties(this.providedData.inputs, Object.assign({}, Object.keys(this.data.inputs).reduce((acc, key) => (Object.assign(Object.assign({}, acc), { [key]: Object.assign({ enumerable: true, configurable: true, get: () => this.data.inputs[key].value }, (this.data.inputs[key].twoWay && {
                set: newValue => {
                    this.data.inputs[key].value = newValue;
                    this.data.outputs[`${key}Change`](newValue);
                },
            })) })), {})));
    }
    resetDefaultComponent() {
        Object.keys(this.defaultComponentSubscriptions).forEach(key => {
            this.defaultComponentSubscriptions[key].unsubscribe();
        });
        this.defaultComponentSubscriptions = {};
        this.defaultComponentRef = null;
    }
};
__decorate([
    Input('abpReplaceableTemplate'),
    __metadata("design:type", Object)
], ReplaceableTemplateDirective.prototype, "data", void 0);
ReplaceableTemplateDirective = __decorate([
    Directive({ selector: '[abpReplaceableTemplate]' }),
    __metadata("design:paramtypes", [Injector,
        TemplateRef,
        ComponentFactoryResolver,
        ViewContainerRef,
        Store])
], ReplaceableTemplateDirective);
export { ReplaceableTemplateDirective };
//# sourceMappingURL=data:application/json;base64,