!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@abp/ng.core"),require("@angular/core"),require("@ngxs/store"),require("@abp/ng.theme.shared"),require("@angular/forms"),require("rxjs"),require("rxjs/operators"),require("@angular/router"),require("@ngx-validate/core"),require("snq"),require("@ng-bootstrap/ng-bootstrap"),require("@abp/ng.permission-management"),require("primeng/table")):"function"==typeof define&&define.amd?define("@abp/ng.identity",["exports","@abp/ng.core","@angular/core","@ngxs/store","@abp/ng.theme.shared","@angular/forms","rxjs","rxjs/operators","@angular/router","@ngx-validate/core","snq","@ng-bootstrap/ng-bootstrap","@abp/ng.permission-management","primeng/table"],t):t(((e=e||self).abp=e.abp||{},e.abp.ng=e.abp.ng||{},e.abp.ng.identity={}),e.ng_core,e.ng.core,e.store,e.ng_theme_shared,e.ng.forms,e.rxjs,e.rxjs.operators,e.ng.router,e.core$1,e.snq,e.ngBootstrap,e.ng_permissionManagement,e.table)}(this,(function(e,t,r,n,o,i,a,s,l,p,d,c,u,b){"use strict";d=d&&d.hasOwnProperty("default")?d.default:d;var m=function(){return(m=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};function y(e,t,r,n){var o,i=arguments.length,a=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,r,a):o(t,r))||a);return i>3&&a&&Object.defineProperty(t,r,a),a}function g(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function f(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)a.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return a}function h(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(f(arguments[t]));return e}var v=function(){function e(e){this.payload=e}return e.type="[Identity] Get Roles",e}();var I=function(){function e(e){this.payload=e}return e.type="[Identity] Get Role By Id",e}();var R=function(){function e(e){this.payload=e}return e.type="[Identity] Delete Role",e}();var w=function(){function e(e){this.payload=e}return e.type="[Identity] Create Role",e}();var C=function(){function e(e){this.payload=e}return e.type="[Identity] Update Role",e}();var A=function(){function e(e){this.payload=e}return e.type="[Identity] Get Users",e}();var U=function(){function e(e){this.payload=e}return e.type="[Identity] Get User By Id",e}();var P=function(){function e(e){this.payload=e}return e.type="[Identity] Delete User",e}();var S=function(){function e(e){this.payload=e}return e.type="[Identity] Create User",e}();var L=function(){function e(e){this.payload=e}return e.type="[Identity] Update User",e}();var N=function(){function e(e){this.payload=e}return e.type="[Identity] Get User Roles",e}();var x=function(){function e(e){this.rest=e}return e.prototype.getRoles=function(e){void 0===e&&(e={});var t={method:"GET",url:"/api/identity/roles",params:e};return this.rest.request(t)},e.prototype.getRoleById=function(e){var t={method:"GET",url:"/api/identity/roles/"+e};return this.rest.request(t)},e.prototype.deleteRole=function(e){var t={method:"DELETE",url:"/api/identity/roles/"+e};return this.rest.request(t)},e.prototype.createRole=function(e){var t={method:"POST",url:"/api/identity/roles",body:e};return this.rest.request(t)},e.prototype.updateRole=function(e){var t="/api/identity/roles/"+e.id;delete e.id;var r={method:"PUT",url:t,body:e};return this.rest.request(r)},e.prototype.getUsers=function(e){void 0===e&&(e={});var t={method:"GET",url:"/api/identity/users",params:e};return this.rest.request(t)},e.prototype.getUserById=function(e){var t={method:"GET",url:"/api/identity/users/"+e};return this.rest.request(t)},e.prototype.getUserRoles=function(e){var t={method:"GET",url:"/api/identity/users/"+e+"/roles"};return this.rest.request(t)},e.prototype.deleteUser=function(e){var t={method:"DELETE",url:"/api/identity/users/"+e};return this.rest.request(t)},e.prototype.createUser=function(e){var t={method:"POST",url:"/api/identity/users",body:e};return this.rest.request(t)},e.prototype.updateUser=function(e){var t="/api/identity/users/"+e.id;delete e.id;var r={method:"PUT",url:t,body:e};return this.rest.request(r)},e.decorators=[{type:r.Injectable,args:[{providedIn:"root"}]}],e.ctorParameters=function(){return[{type:t.RestService}]},e.ngInjectableDef=r.ɵɵdefineInjectable({factory:function(){return new e(r.ɵɵinject(t.RestService))},token:e,providedIn:"root"}),e}();var k=function(){function e(e){this.identityService=e}return e.getRoles=function(e){return e.roles.items||[]},e.getRolesTotalCount=function(e){return e.roles.totalCount||0},e.getUsers=function(e){return e.users.items||[]},e.getUsersTotalCount=function(e){return e.users.totalCount||0},e.prototype.getRoles=function(e,t){var r=e.patchState,n=t.payload;return this.identityService.getRoles(n).pipe(s.tap((function(e){return r({roles:e})})))},e.prototype.getRole=function(e,t){var r=e.patchState,n=t.payload;return this.identityService.getRoleById(n).pipe(s.tap((function(e){return r({selectedRole:e})})))},e.prototype.deleteRole=function(e,t){var r=t.payload;return this.identityService.deleteRole(r)},e.prototype.addRole=function(e,t){var r=t.payload;return this.identityService.createRole(r)},e.prototype.updateRole=function(e,t){var r=e.getState,n=t.payload;return this.identityService.updateRole(m({},r().selectedRole,n))},e.prototype.getUsers=function(e,t){var r=e.patchState,n=t.payload;return this.identityService.getUsers(n).pipe(s.tap((function(e){return r({users:e})})))},e.prototype.getUser=function(e,t){var r=e.patchState,n=t.payload;return this.identityService.getUserById(n).pipe(s.tap((function(e){return r({selectedUser:e})})))},e.prototype.deleteUser=function(e,t){var r=t.payload;return this.identityService.deleteUser(r)},e.prototype.addUser=function(e,t){var r=t.payload;return this.identityService.createUser(r)},e.prototype.updateUser=function(e,t){var r=e.getState,n=t.payload;return this.identityService.updateUser(m({},r().selectedUser,n))},e.prototype.getUserRoles=function(e,t){var r=e.patchState,n=t.payload;return this.identityService.getUserRoles(n).pipe(s.pluck("items"),s.tap((function(e){return r({selectedUserRoles:e})})))},e.ctorParameters=function(){return[{type:x}]},y([n.Action(v),g("design:type",Function),g("design:paramtypes",[Object,v]),g("design:returntype",void 0)],e.prototype,"getRoles",null),y([n.Action(I),g("design:type",Function),g("design:paramtypes",[Object,I]),g("design:returntype",void 0)],e.prototype,"getRole",null),y([n.Action(R),g("design:type",Function),g("design:paramtypes",[Object,I]),g("design:returntype",void 0)],e.prototype,"deleteRole",null),y([n.Action(w),g("design:type",Function),g("design:paramtypes",[Object,w]),g("design:returntype",void 0)],e.prototype,"addRole",null),y([n.Action(C),g("design:type",Function),g("design:paramtypes",[Object,C]),g("design:returntype",void 0)],e.prototype,"updateRole",null),y([n.Action(A),g("design:type",Function),g("design:paramtypes",[Object,A]),g("design:returntype",void 0)],e.prototype,"getUsers",null),y([n.Action(U),g("design:type",Function),g("design:paramtypes",[Object,U]),g("design:returntype",void 0)],e.prototype,"getUser",null),y([n.Action(P),g("design:type",Function),g("design:paramtypes",[Object,U]),g("design:returntype",void 0)],e.prototype,"deleteUser",null),y([n.Action(S),g("design:type",Function),g("design:paramtypes",[Object,S]),g("design:returntype",void 0)],e.prototype,"addUser",null),y([n.Action(L),g("design:type",Function),g("design:paramtypes",[Object,L]),g("design:returntype",void 0)],e.prototype,"updateUser",null),y([n.Action(N),g("design:type",Function),g("design:paramtypes",[Object,N]),g("design:returntype",void 0)],e.prototype,"getUserRoles",null),y([n.Selector(),g("design:type",Function),g("design:paramtypes",[Object]),g("design:returntype",Array)],e,"getRoles",null),y([n.Selector(),g("design:type",Function),g("design:paramtypes",[Object]),g("design:returntype",Number)],e,"getRolesTotalCount",null),y([n.Selector(),g("design:type",Function),g("design:paramtypes",[Object]),g("design:returntype",Array)],e,"getUsers",null),y([n.Selector(),g("design:type",Function),g("design:paramtypes",[Object]),g("design:returntype",Number)],e,"getUsersTotalCount",null),e=y([n.State({name:"IdentityState",defaults:{roles:{},selectedRole:{},users:{},selectedUser:{}}}),g("design:paramtypes",[x])],e)}();var M=function(){function e(e,t,r){var n=this;this.confirmationService=e,this.fb=t,this.store=r,this.visiblePermissions=!1,this.pageQuery={maxResultCount:10},this.loading=!1,this.modalBusy=!1,this.sortOrder="",this.sortKey="",this.onVisiblePermissionChange=function(e){n.visiblePermissions=e}}return e.prototype.ngOnInit=function(){this.get()},e.prototype.buildForm=function(){this.form=this.fb.group({name:new i.FormControl({value:this.selected.name||"",disabled:this.selected.isStatic},[i.Validators.required,i.Validators.maxLength(256)]),isDefault:[this.selected.isDefault||!1],isPublic:[this.selected.isPublic||!1]})},e.prototype.openModal=function(){this.buildForm(),this.isModalVisible=!0},e.prototype.add=function(){this.selected={},this.openModal()},e.prototype.edit=function(e){var t=this;this.store.dispatch(new I(e)).pipe(s.pluck("IdentityState","selectedRole")).subscribe((function(e){t.selected=e,t.openModal()}))},e.prototype.save=function(){var e=this;this.form.valid&&(this.modalBusy=!0,this.store.dispatch(this.selected.id?new C(m({},this.selected,this.form.value,{id:this.selected.id})):new w(this.form.value)).pipe(s.finalize((function(){return e.modalBusy=!1}))).subscribe((function(){e.isModalVisible=!1,e.get()})))},e.prototype.delete=function(e,t){var r=this;this.confirmationService.warn("AbpIdentity::RoleDeletionConfirmationMessage","AbpIdentity::AreYouSure",{messageLocalizationParams:[t]}).subscribe((function(t){"confirm"===t&&r.store.dispatch(new R(e)).subscribe((function(){return r.get()}))}))},e.prototype.onPageChange=function(e){this.pageQuery.skipCount=(e-1)*this.pageQuery.maxResultCount,this.get()},e.prototype.get=function(){var e=this;this.loading=!0,this.store.dispatch(new v(this.pageQuery)).pipe(s.finalize((function(){return e.loading=!1}))).subscribe()},e.prototype.onClickSaveButton=function(){this.formRef.nativeElement.dispatchEvent(new Event("submit",{bubbles:!0,cancelable:!0}))},e.decorators=[{type:r.Component,args:[{selector:"abp-roles",template:'<div id="identity-roles-wrapper" class="card">\r\n  <div class="card-header">\r\n    <div class="row">\r\n      <div class="col col-md-6">\r\n        <h5 class="card-title">{{ \'AbpIdentity::Roles\' | abpLocalization }}</h5>\r\n      </div>\r\n      <div class="text-right col col-md-6">\r\n        <button\r\n          *abpPermission="\'AbpIdentity.Roles.Create\'"\r\n          id="create-role"\r\n          class="btn btn-primary"\r\n          type="button"\r\n          (click)="add()"\r\n        >\r\n          <i class="fa fa-plus mr-1"></i>\r\n          <span>{{ \'AbpIdentity::NewRole\' | abpLocalization }}</span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class="card-body">\r\n    <abp-table\r\n      *ngIf="[150, 0] as columnWidths"\r\n      [abpLoading]="loading"\r\n      [abpTableSort]="{ key: sortKey, order: sortOrder }"\r\n      [colgroupTemplate]="tableColGroup"\r\n      [headerTemplate]="tableHeader"\r\n      [bodyTemplate]="tableBody"\r\n      [value]="data$ | async"\r\n      [rows]="pageQuery.maxResultCount"\r\n      [totalRecords]="totalCount$ | async"\r\n      [scrollable]="true"\r\n      (pageChange)="onPageChange($event)"\r\n    >\r\n      <ng-template #tableColGroup>\r\n        <colgroup>\r\n          <col *ngFor="let width of columnWidths" [ngStyle]="{ \'width.px\': width || undefined }" />\r\n        </colgroup>\r\n      </ng-template>\r\n      <ng-template #tableHeader>\r\n        <tr>\r\n          <th>{{ \'AbpIdentity::Actions\' | abpLocalization }}</th>\r\n          <th (click)="sortOrderIcon.sort(\'name\')">\r\n            {{ \'AbpIdentity::RoleName\' | abpLocalization }}\r\n            <abp-sort-order-icon\r\n              #sortOrderIcon\r\n              sortKey="name"\r\n              [(selectedSortKey)]="sortKey"\r\n              [(order)]="sortOrder"\r\n            ></abp-sort-order-icon>\r\n          </th>\r\n        </tr>\r\n      </ng-template>\r\n      <ng-template #tableBody let-data>\r\n        <tr>\r\n          <td class="text-center">\r\n            <div ngbDropdown container="body" class="d-inline-block">\r\n              <button\r\n                class="btn btn-primary btn-sm dropdown-toggle"\r\n                data-toggle="dropdown"\r\n                aria-haspopup="true"\r\n                ngbDropdownToggle\r\n              >\r\n                <i class="fa fa-cog mr-1"></i>{{ \'AbpIdentity::Actions\' | abpLocalization }}\r\n              </button>\r\n              <div ngbDropdownMenu>\r\n                <button\r\n                  *abpPermission="\'AbpIdentity.Roles.Update\'"\r\n                  ngbDropdownItem\r\n                  (click)="edit(data.id)"\r\n                >\r\n                  {{ \'AbpIdentity::Edit\' | abpLocalization }}\r\n                </button>\r\n                <button\r\n                  *abpPermission="\'AbpIdentity.Roles.ManagePermissions\'"\r\n                  ngbDropdownItem\r\n                  (click)="providerKey = data.name; visiblePermissions = true"\r\n                >\r\n                  {{ \'AbpIdentity::Permissions\' | abpLocalization }}\r\n                </button>\r\n                <button\r\n                  *abpPermission="\'AbpIdentity.Roles.Delete\'"\r\n                  ngbDropdownItem\r\n                  (click)="delete(data.id, data.name)"\r\n                >\r\n                  {{ \'AbpIdentity::Delete\' | abpLocalization }}\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </td>\r\n          <td>\r\n            {{ data.name\r\n            }}<span *ngIf="data.isDefault" class="badge badge-pill badge-success ml-1">{{\r\n              \'AbpIdentity::DisplayName:IsDefault\' | abpLocalization\r\n            }}</span>\r\n            <span *ngIf="data.isPublic" class="badge badge-pill badge-info ml-1">{{\r\n              \'AbpIdentity::DisplayName:IsPublic\' | abpLocalization\r\n            }}</span>\r\n          </td>\r\n        </tr>\r\n      </ng-template>\r\n    </abp-table>\r\n  </div>\r\n</div>\r\n\r\n<abp-modal size="md" [(visible)]="isModalVisible" [busy]="modalBusy">\r\n  <ng-template #abpHeader>\r\n    <h3>{{ (selected?.id ? \'AbpIdentity::Edit\' : \'AbpIdentity::NewRole\') | abpLocalization }}</h3>\r\n  </ng-template>\r\n\r\n  <ng-template #abpBody>\r\n    <form #formRef [formGroup]="form" (ngSubmit)="save()" validateOnSubmit>\r\n      <div class="form-group">\r\n        <label for="role-name">{{ \'AbpIdentity::RoleName\' | abpLocalization }}</label\r\n        ><span> * </span>\r\n        <input autofocus type="text" id="role-name" class="form-control" formControlName="name" />\r\n      </div>\r\n\r\n      <div class="custom-checkbox custom-control mb-2">\r\n        <input\r\n          type="checkbox"\r\n          id="role-is-default"\r\n          class="custom-control-input"\r\n          formControlName="isDefault"\r\n        />\r\n        <label class="custom-control-label" for="role-is-default">{{\r\n          \'AbpIdentity::DisplayName:IsDefault\' | abpLocalization\r\n        }}</label>\r\n      </div>\r\n\r\n      <div class="custom-checkbox custom-control mb-2">\r\n        <input\r\n          type="checkbox"\r\n          id="role-is-public"\r\n          class="custom-control-input"\r\n          formControlName="isPublic"\r\n        />\r\n        <label class="custom-control-label" for="role-is-public">{{\r\n          \'AbpIdentity::DisplayName:IsPublic\' | abpLocalization\r\n        }}</label>\r\n      </div>\r\n    </form>\r\n  </ng-template>\r\n\r\n  <ng-template #abpFooter>\r\n    <button type="button" class="btn btn-secondary" #abpClose>\r\n      {{ \'AbpIdentity::Cancel\' | abpLocalization }}\r\n    </button>\r\n    <abp-button iconClass="fa fa-check" [disabled]="form?.invalid" (click)="onClickSaveButton()">{{\r\n      \'AbpIdentity::Save\' | abpLocalization\r\n    }}</abp-button>\r\n  </ng-template>\r\n</abp-modal>\r\n\r\n<abp-permission-management\r\n  #abpPermissionManagement="abpPermissionManagement"\r\n  *abpReplaceableTemplate="\r\n    {\r\n      inputs: {\r\n        providerName: { value: \'R\' },\r\n        providerKey: { value: providerKey },\r\n        visible: { value: visiblePermissions, twoWay: true },\r\n        hideBadges: { value: true }\r\n      },\r\n      outputs: { visibleChange: onVisiblePermissionChange },\r\n      componentKey: \'PermissionManagement.PermissionManagementComponent\'\r\n    };\r\n    let init = initTemplate\r\n  "\r\n  (abpInit)="init(abpPermissionManagement)"\r\n>\r\n</abp-permission-management>\r\n\r\n\x3c!-- <abp-permission-management\r\n  #abpPermissionManagement="abpPermissionManagement"\r\n  *abpReplaceableTemplate="{\r\n    inputs: {\r\n      providerName: { value: \'R\' },\r\n      providerKey: { value: providerKey },\r\n      visible: { value: visiblePermissions, twoWay: true },\r\n      hideBadges: { value: true }\r\n    },\r\n    outputs: { visibleChange: onVisiblePermissionChange },\r\n    componentKey: \'PermissionManagement.PermissionManagementComponent\'\r\n  }"\r\n  [(visible)]="visiblePermissions"\r\n  [providerKey]="providerKey"\r\n  [hideBadges]="true"\r\n  providerName="R"\r\n>\r\n</abp-permission-management> --\x3e\r\n'}]}],e.ctorParameters=function(){return[{type:o.ConfirmationService},{type:i.FormBuilder},{type:n.Store}]},e.propDecorators={formRef:[{type:r.ViewChild,args:["formRef",{static:!1,read:r.ElementRef}]}]},y([n.Select(k.getRoles),g("design:type",a.Observable)],e.prototype,"data$",void 0),y([n.Select(k.getRolesTotalCount),g("design:type",a.Observable)],e.prototype,"totalCount$",void 0),e}();var O=function(){function e(e,t,r){var n=this;this.confirmationService=e,this.fb=t,this.store=r,this.visiblePermissions=!1,this.pageQuery={maxResultCount:10},this.loading=!1,this.modalBusy=!1,this.sortOrder="",this.sortKey="",this.passwordRulesArr=[],this.requiredPasswordLength=1,this.trackByFn=function(e,t){return Object.keys(t)[0]||e},this.onVisiblePermissionChange=function(e){n.visiblePermissions=e}}return Object.defineProperty(e.prototype,"roleGroups",{get:function(){var e=this;return d((function(){return e.form.get("roleNames").controls}),[])},enumerable:!0,configurable:!0}),e.prototype.ngOnInit=function(){this.get();var e=this.store.selectSnapshot(t.ConfigState.getSettings("Identity.Password"));"true"===(e["Abp.Identity.Password.RequireDigit"]||"").toLowerCase()&&this.passwordRulesArr.push("number"),"true"===(e["Abp.Identity.Password.RequireLowercase"]||"").toLowerCase()&&this.passwordRulesArr.push("small"),"true"===(e["Abp.Identity.Password.RequireUppercase"]||"").toLowerCase()&&this.passwordRulesArr.push("capital"),+(e["Abp.Identity.Password.RequiredUniqueChars"]||0)>0&&this.passwordRulesArr.push("special"),Number.isInteger(+e["Abp.Identity.Password.RequiredLength"])&&(this.requiredPasswordLength=+e["Abp.Identity.Password.RequiredLength"])},e.prototype.onSearch=function(e){this.pageQuery.filter=e,this.get()},e.prototype.buildForm=function(){var e=this;this.store.dispatch(new v).subscribe((function(){e.roles=e.store.selectSnapshot(k.getRoles),e.form=e.fb.group({userName:[e.selected.userName||"",[i.Validators.required,i.Validators.maxLength(256)]],email:[e.selected.email||"",[i.Validators.required,i.Validators.email,i.Validators.maxLength(256)]],name:[e.selected.name||"",[i.Validators.maxLength(64)]],surname:[e.selected.surname||"",[i.Validators.maxLength(64)]],phoneNumber:[e.selected.phoneNumber||"",[i.Validators.maxLength(16)]],lockoutEnabled:[e.selected.lockoutEnabled||!e.selected.id],twoFactorEnabled:[e.selected.twoFactorEnabled||!e.selected.id],roleNames:e.fb.array(e.roles.map((function(t){var r;return e.fb.group(((r={})[t.name]=[!!d((function(){return e.selectedUserRoles.find((function(e){return e.id===t.id}))}))],r))})))});var t=[p.validatePassword(e.passwordRulesArr),i.Validators.minLength(e.requiredPasswordLength),i.Validators.maxLength(32)];e.form.addControl("password",new i.FormControl("",h(t))),e.selected.userName||(e.form.get("password").setValidators(h(t,[i.Validators.required])),e.form.get("password").updateValueAndValidity())}))},e.prototype.openModal=function(){this.buildForm(),this.isModalVisible=!0},e.prototype.add=function(){this.selected={},this.selectedUserRoles=[],this.openModal()},e.prototype.edit=function(e){var t=this;this.store.dispatch(new U(e)).pipe(s.switchMap((function(){return t.store.dispatch(new N(e))})),s.pluck("IdentityState"),s.take(1)).subscribe((function(e){t.selected=e.selectedUser,t.selectedUserRoles=e.selectedUserRoles,t.openModal()}))},e.prototype.save=function(){var e=this;if(this.form.valid&&!this.modalBusy){this.modalBusy=!0;var t=this.form.value.roleNames,r=d((function(){return t.filter((function(e){return!!e[Object.keys(e)[0]]})).map((function(e){return Object.keys(e)[0]}))}),[]);this.store.dispatch(this.selected.id?new L(m({},this.selected,this.form.value,{id:this.selected.id,roleNames:r})):new S(m({},this.form.value,{roleNames:r}))).pipe(s.finalize((function(){return e.modalBusy=!1}))).subscribe((function(){e.isModalVisible=!1,e.get()}))}},e.prototype.delete=function(e,t){var r=this;this.confirmationService.warn("AbpIdentity::UserDeletionConfirmationMessage","AbpIdentity::AreYouSure",{messageLocalizationParams:[t]}).subscribe((function(t){"confirm"===t&&r.store.dispatch(new P(e)).subscribe((function(){return r.get()}))}))},e.prototype.onPageChange=function(e){this.pageQuery.skipCount=(e-1)*this.pageQuery.maxResultCount,this.get()},e.prototype.get=function(){var e=this;this.loading=!0,this.store.dispatch(new A(this.pageQuery)).pipe(s.finalize((function(){return e.loading=!1}))).subscribe()},e.decorators=[{type:r.Component,args:[{selector:"abp-users",template:'<div id="identity-roles-wrapper" class="card">\r\n  <div class="card-header">\r\n    <div class="row">\r\n      <div class="col col-md-6">\r\n        <h5 class="card-title">{{ \'AbpIdentity::Users\' | abpLocalization }}</h5>\r\n      </div>\r\n      <div class="text-right col col-md-6">\r\n        <button\r\n          *abpPermission="\'AbpIdentity.Users.Create\'"\r\n          id="create-role"\r\n          class="btn btn-primary"\r\n          type="button"\r\n          (click)="add()"\r\n        >\r\n          <i class="fa fa-plus mr-1"></i>\r\n          <span>{{ \'AbpIdentity::NewUser\' | abpLocalization }}</span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class="card-body">\r\n    <div id="data-tables-table-filter" class="data-tables-filter">\r\n      <label\r\n        ><input\r\n          type="search"\r\n          class="form-control form-control-sm"\r\n          [placeholder]="\'AbpUi::PagerSearch\' | abpLocalization"\r\n          (input.debounce)="onSearch($event.target.value)"\r\n      /></label>\r\n    </div>\r\n    <abp-table\r\n      *ngIf="[150, 250, 250, 250] as columnWidths"\r\n      [abpLoading]="loading"\r\n      [abpTableSort]="{ key: sortKey, order: sortOrder }"\r\n      [colgroupTemplate]="tableColGroup"\r\n      [headerTemplate]="tableHeader"\r\n      [bodyTemplate]="tableBody"\r\n      [value]="data$ | async"\r\n      [rows]="pageQuery.maxResultCount"\r\n      [totalRecords]="totalCount$ | async"\r\n      [scrollable]="true"\r\n      (pageChange)="onPageChange($event)"\r\n    >\r\n      <ng-template #tableColGroup>\r\n        <colgroup>\r\n          <col *ngFor="let width of columnWidths" [ngStyle]="{ \'width.px\': width || undefined }" />\r\n        </colgroup>\r\n      </ng-template>\r\n      <ng-template #tableHeader>\r\n        <tr>\r\n          <th>{{ \'AbpIdentity::Actions\' | abpLocalization }}</th>\r\n          <th (click)="sortOrderIcon.sort(\'userName\')">\r\n            {{ \'AbpIdentity::UserName\' | abpLocalization }}\r\n            <abp-sort-order-icon\r\n              #sortOrderIcon\r\n              sortKey="userName"\r\n              [(selectedSortKey)]="sortKey"\r\n              [(order)]="sortOrder"\r\n            >\r\n            </abp-sort-order-icon>\r\n          </th>\r\n          <th (click)="sortOrderIcon.sort(\'email\')">\r\n            {{ \'AbpIdentity::EmailAddress\' | abpLocalization }}\r\n            <abp-sort-order-icon\r\n              sortKey="email"\r\n              [(selectedSortKey)]="sortKey"\r\n              [(order)]="sortOrder"\r\n            ></abp-sort-order-icon>\r\n          </th>\r\n          <th (click)="sortOrderIcon.sort(\'phoneNumber\')">\r\n            {{ \'AbpIdentity::PhoneNumber\' | abpLocalization }}\r\n            <abp-sort-order-icon\r\n              sortKey="phoneNumber"\r\n              [(selectedSortKey)]="sortKey"\r\n              [(order)]="sortOrder"\r\n            >\r\n            </abp-sort-order-icon>\r\n          </th>\r\n        </tr>\r\n      </ng-template>\r\n      <ng-template #tableBody let-data>\r\n        <tr>\r\n          <td class="text-center">\r\n            <div ngbDropdown container="body" class="d-inline-block">\r\n              <button\r\n                class="btn btn-primary btn-sm dropdown-toggle"\r\n                data-toggle="dropdown"\r\n                aria-haspopup="true"\r\n                ngbDropdownToggle\r\n              >\r\n                <i class="fa fa-cog mr-1"></i>{{ \'AbpIdentity::Actions\' | abpLocalization }}\r\n              </button>\r\n              <div ngbDropdownMenu>\r\n                <button\r\n                  *abpPermission="\'AbpIdentity.Users.Update\'"\r\n                  ngbDropdownItem\r\n                  (click)="edit(data.id)"\r\n                >\r\n                  {{ \'AbpIdentity::Edit\' | abpLocalization }}\r\n                </button>\r\n                <button\r\n                  *abpPermission="\'AbpIdentity.Users.ManagePermissions\'"\r\n                  ngbDropdownItem\r\n                  (click)="providerKey = data.id; visiblePermissions = true"\r\n                >\r\n                  {{ \'AbpIdentity::Permissions\' | abpLocalization }}\r\n                </button>\r\n                <button\r\n                  *abpPermission="\'AbpIdentity.Users.Delete\'"\r\n                  ngbDropdownItem\r\n                  (click)="delete(data.id, data.userName)"\r\n                >\r\n                  {{ \'AbpIdentity::Delete\' | abpLocalization }}\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </td>\r\n          <td>{{ data.userName }}</td>\r\n          <td>{{ data.email }}</td>\r\n          <td>{{ data.phoneNumber }}</td>\r\n        </tr>\r\n      </ng-template>\r\n    </abp-table>\r\n  </div>\r\n</div>\r\n\r\n<abp-modal [(visible)]="isModalVisible" [busy]="modalBusy" (disappear)="form = null">\r\n  <ng-template #abpHeader>\r\n    <h3>{{ (selected?.id ? \'AbpIdentity::Edit\' : \'AbpIdentity::NewUser\') | abpLocalization }}</h3>\r\n  </ng-template>\r\n\r\n  <ng-template #abpBody>\r\n    <ng-template #loaderRef\r\n      ><div class="text-center"><i class="fa fa-pulse fa-spinner"></i></div\r\n    ></ng-template>\r\n\r\n    <form *ngIf="form; else loaderRef" [formGroup]="form" (ngSubmit)="save()">\r\n      <ngb-tabset>\r\n        <ngb-tab [title]="\'AbpIdentity::UserInformations\' | abpLocalization">\r\n          <ng-template ngbTabContent>\r\n            <div class="mt-2 fade-in-top">\r\n              <div class="form-group">\r\n                <label for="user-name">{{ \'AbpIdentity::UserName\' | abpLocalization }}</label\r\n                ><span> * </span>\r\n                <input\r\n                  type="text"\r\n                  id="user-name"\r\n                  class="form-control"\r\n                  formControlName="userName"\r\n                  autofocus\r\n                />\r\n              </div>\r\n\r\n              <div class="form-group">\r\n                <label for="name">{{ \'AbpIdentity::DisplayName:Name\' | abpLocalization }}</label>\r\n                <input type="text" id="name" class="form-control" formControlName="name" />\r\n              </div>\r\n\r\n              <div class="form-group">\r\n                <label for="surname">{{\r\n                  \'AbpIdentity::DisplayName:Surname\' | abpLocalization\r\n                }}</label>\r\n                <input type="text" id="surname" class="form-control" formControlName="surname" />\r\n              </div>\r\n\r\n              <div class="form-group">\r\n                <label for="password">{{ \'AbpIdentity::Password\' | abpLocalization }}</label\r\n                ><span *ngIf="!selected.userName"> * </span>\r\n                <input\r\n                  type="password"\r\n                  id="password"\r\n                  autocomplete="new-password"\r\n                  class="form-control"\r\n                  formControlName="password"\r\n                />\r\n              </div>\r\n\r\n              <div class="form-group">\r\n                <label for="email">{{ \'AbpIdentity::EmailAddress\' | abpLocalization }}</label\r\n                ><span> * </span>\r\n                <input type="text" id="email" class="form-control" formControlName="email" />\r\n              </div>\r\n\r\n              <div class="form-group">\r\n                <label for="phone-number">{{ \'AbpIdentity::PhoneNumber\' | abpLocalization }}</label>\r\n                <input\r\n                  type="text"\r\n                  id="phone-number"\r\n                  class="form-control"\r\n                  formControlName="phoneNumber"\r\n                />\r\n              </div>\r\n\r\n              <div class="custom-checkbox custom-control mb-2">\r\n                <input\r\n                  type="checkbox"\r\n                  id="lockout-checkbox"\r\n                  class="custom-control-input"\r\n                  formControlName="lockoutEnabled"\r\n                />\r\n                <label class="custom-control-label" for="lockout-checkbox">{{\r\n                  \'AbpIdentity::DisplayName:LockoutEnabled\' | abpLocalization\r\n                }}</label>\r\n              </div>\r\n\r\n              <div class="custom-checkbox custom-control mb-2">\r\n                <input\r\n                  type="checkbox"\r\n                  id="two-factor-checkbox"\r\n                  class="custom-control-input"\r\n                  formControlName="twoFactorEnabled"\r\n                />\r\n                <label class="custom-control-label" for="two-factor-checkbox">{{\r\n                  \'AbpIdentity::DisplayName:TwoFactorEnabled\' | abpLocalization\r\n                }}</label>\r\n              </div>\r\n            </div>\r\n          </ng-template>\r\n        </ngb-tab>\r\n        <ngb-tab [title]="\'AbpIdentity::Roles\' | abpLocalization">\r\n          <ng-template ngbTabContent>\r\n            <div class="mt-2 fade-in-top">\r\n              <div\r\n                *ngFor="let roleGroup of roleGroups; let i = index; trackBy: trackByFn"\r\n                class="custom-checkbox custom-control mb-2"\r\n              >\r\n                <input\r\n                  type="checkbox"\r\n                  name="Roles[0].IsAssigned"\r\n                  value="true"\r\n                  class="custom-control-input"\r\n                  [attr.id]="\'roles-\' + i"\r\n                  [formControl]="roleGroup.controls[roles[i].name]"\r\n                />\r\n                <label class="custom-control-label" [attr.for]="\'roles-\' + i">{{\r\n                  roles[i].name\r\n                }}</label>\r\n              </div>\r\n            </div>\r\n          </ng-template>\r\n        </ngb-tab>\r\n      </ngb-tabset>\r\n    </form>\r\n  </ng-template>\r\n\r\n  <ng-template #abpFooter>\r\n    <button type="button" class="btn btn-secondary" #abpClose>\r\n      {{ \'AbpIdentity::Cancel\' | abpLocalization }}\r\n    </button>\r\n    <abp-button iconClass="fa fa-check" (click)="save()" [disabled]="form?.invalid">{{\r\n      \'AbpIdentity::Save\' | abpLocalization\r\n    }}</abp-button>\r\n  </ng-template>\r\n</abp-modal>\r\n\r\n<abp-permission-management\r\n  #abpPermissionManagement="abpPermissionManagement"\r\n  *abpReplaceableTemplate="\r\n    {\r\n      inputs: {\r\n        providerName: { value: \'U\' },\r\n        providerKey: { value: providerKey },\r\n        visible: { value: visiblePermissions, twoWay: true }\r\n      },\r\n      outputs: { visibleChange: onVisiblePermissionChange },\r\n      componentKey: \'PermissionManagement.PermissionManagementComponent\'\r\n    };\r\n    let init = initTemplate\r\n  "\r\n  (abpInit)="init(abpPermissionManagement)"\r\n>\r\n</abp-permission-management>\r\n'}]}],e.ctorParameters=function(){return[{type:o.ConfirmationService},{type:i.FormBuilder},{type:n.Store}]},e.propDecorators={modalContent:[{type:r.ViewChild,args:["modalContent",{static:!1}]}]},y([n.Select(k.getUsers),g("design:type",a.Observable)],e.prototype,"data$",void 0),y([n.Select(k.getUsersTotalCount),g("design:type",a.Observable)],e.prototype,"totalCount$",void 0),e}();var D,z={requiredPolicy:"AbpIdentity.Roles",replaceableComponent:{key:"Identity.RolesComponent",defaultComponent:M}},q={requiredPolicy:"AbpIdentity.Users",replaceableComponent:{key:"Identity.UsersComponent",defaultComponent:O}},T=[{path:"",redirectTo:"roles",pathMatch:"full"},{path:"",component:t.DynamicLayoutComponent,canActivate:[t.AuthGuard,t.PermissionGuard],children:[{path:"roles",component:t.ReplaceableRouteContainerComponent,data:z},{path:"users",component:t.ReplaceableRouteContainerComponent,data:q}]}],j=function(){function e(){}return e.decorators=[{type:r.NgModule,args:[{imports:[l.RouterModule.forChild(T),t.CoreModule],exports:[l.RouterModule]}]}],e}(),B=function(){function e(){}return e.decorators=[{type:r.NgModule,args:[{declarations:[M,O],imports:[n.NgxsModule.forFeature([k]),t.CoreModule,j,c.NgbTabsetModule,o.ThemeSharedModule,b.TableModule,c.NgbDropdownModule,u.PermissionManagementModule,p.NgxValidateCoreModule]}]}],e}();!function(e){function t(){}function r(){}function n(){}function o(){}function i(){}function a(){}e.State=t,e.RoleSaveRequest=r,e.RoleItem=n,e.UserItem=o,e.User=i,e.UserSaveRequest=a}(D||(D={}));var F=function(){function e(e){this.store=e}return e.prototype.getRoles=function(){return this.store.selectSnapshot(k.getRoles)},e.prototype.getRolesTotalCount=function(){return this.store.selectSnapshot(k.getRolesTotalCount)},e.prototype.getUsers=function(){return this.store.selectSnapshot(k.getUsers)},e.prototype.getUsersTotalCount=function(){return this.store.selectSnapshot(k.getUsersTotalCount)},e.prototype.dispatchGetRoles=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(v.bind.apply(v,h([void 0],e))))},e.prototype.dispatchGetRoleById=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(I.bind.apply(I,h([void 0],e))))},e.prototype.dispatchDeleteRole=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(R.bind.apply(R,h([void 0],e))))},e.prototype.dispatchCreateRole=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(w.bind.apply(w,h([void 0],e))))},e.prototype.dispatchUpdateRole=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(C.bind.apply(C,h([void 0],e))))},e.prototype.dispatchGetUsers=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(A.bind.apply(A,h([void 0],e))))},e.prototype.dispatchGetUserById=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(U.bind.apply(U,h([void 0],e))))},e.prototype.dispatchDeleteUser=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(P.bind.apply(P,h([void 0],e))))},e.prototype.dispatchCreateUser=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(S.bind.apply(S,h([void 0],e))))},e.prototype.dispatchUpdateUser=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(L.bind.apply(L,h([void 0],e))))},e.prototype.dispatchGetUserRoles=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(N.bind.apply(N,h([void 0],e))))},e.decorators=[{type:r.Injectable,args:[{providedIn:"root"}]}],e.ctorParameters=function(){return[{type:n.Store}]},e.ngInjectableDef=r.ɵɵdefineInjectable({factory:function(){return new e(r.ɵɵinject(n.Store))},token:e,providedIn:"root"}),e}();e.CreateRole=w,e.CreateUser=S,e.DeleteRole=R,e.DeleteUser=P,e.GetRoleById=I,e.GetRoles=v,e.GetUserById=U,e.GetUserRoles=N,e.GetUsers=A,e.IdentityModule=B,e.IdentityService=x,e.IdentityState=k,e.IdentityStateService=F,e.RolesComponent=M,e.UpdateRole=C,e.UpdateUser=L,e.UsersComponent=O,e.ɵa=M,e.ɵb=x,e.ɵd=O,e.ɵe=j,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=abp-ng.identity.umd.min.js.map