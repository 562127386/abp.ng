import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { RestService } from '@abp/ng.core';
import * as i0 from "@angular/core";
import * as i1 from "@abp/ng.core";
let IdentityService = class IdentityService {
    constructor(rest) {
        this.rest = rest;
        this.apiName = 'AbpIdentity';
    }
    getRoles(params = {}) {
        const request = {
            method: 'GET',
            url: '/api/identity/roles',
            params,
        };
        return this.rest.request(request, { apiName: this.apiName });
    }
    getAllRoles() {
        const request = {
            method: 'GET',
            url: '/api/identity/roles/all',
        };
        return this.rest.request(request, { apiName: this.apiName });
    }
    getRoleById(id) {
        const request = {
            method: 'GET',
            url: `/api/identity/roles/${id}`,
        };
        return this.rest.request(request, { apiName: this.apiName });
    }
    deleteRole(id) {
        const request = {
            method: 'DELETE',
            url: `/api/identity/roles/${id}`,
        };
        return this.rest.request(request, { apiName: this.apiName });
    }
    createRole(body) {
        const request = {
            method: 'POST',
            url: '/api/identity/roles',
            body,
        };
        return this.rest.request(request, {
            apiName: this.apiName,
        });
    }
    updateRole(body) {
        const url = `/api/identity/roles/${body.id}`;
        delete body.id;
        const request = {
            method: 'PUT',
            url,
            body,
        };
        return this.rest.request(request, {
            apiName: this.apiName,
        });
    }
    getUsers(params = {}) {
        const request = {
            method: 'GET',
            url: '/api/identity/users',
            params,
        };
        return this.rest.request(request, { apiName: this.apiName });
    }
    getUserById(id) {
        const request = {
            method: 'GET',
            url: `/api/identity/users/${id}`,
        };
        return this.rest.request(request, { apiName: this.apiName });
    }
    getUserRoles(id) {
        const request = {
            method: 'GET',
            url: `/api/identity/users/${id}/roles`,
        };
        return this.rest.request(request, { apiName: this.apiName });
    }
    getUserAssingableRoles() {
        const request = {
            method: 'GET',
            url: '/api/identity/users/assignable-roles',
        };
        return this.rest.request(request, { apiName: this.apiName });
    }
    deleteUser(id) {
        const request = {
            method: 'DELETE',
            url: `/api/identity/users/${id}`,
        };
        return this.rest.request(request, { apiName: this.apiName });
    }
    createUser(body) {
        const request = {
            method: 'POST',
            url: '/api/identity/users',
            body,
        };
        return this.rest.request(request, {
            apiName: this.apiName,
        });
    }
    updateUser(body) {
        const url = `/api/identity/users/${body.id}`;
        delete body.id;
        const request = {
            method: 'PUT',
            url,
            body,
        };
        return this.rest.request(request, {
            apiName: this.apiName,
        });
    }
};
IdentityService.ɵprov = i0.ɵɵdefineInjectable({ factory: function IdentityService_Factory() { return new IdentityService(i0.ɵɵinject(i1.RestService)); }, token: IdentityService, providedIn: "root" });
IdentityService = __decorate([
    Injectable({
        providedIn: 'root',
    }),
    __metadata("design:paramtypes", [RestService])
], IdentityService);
export { IdentityService };
//# sourceMappingURL=data:application/json;base64,