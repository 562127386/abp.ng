!function(n,r){"object"==typeof exports&&"undefined"!=typeof module?r(exports,require("@fs/account"),require("@abp/ng.core"),require("@angular/core"),require("@fs/ngx-admin/basic"),require("@angular/router"),require("@abp/ng.account"),require("@abp/ng.theme.shared"),require("@angular/forms"),require("@ngxs/store"),require("angular-oauth2-oidc"),require("@abp/ng.account/services/account.service"),require("@abp/ng.account/components/tenant-box/tenant-box.component")):"function"==typeof define&&define.amd?define("@fs/account/ngx-admin",["exports","@fs/account","@abp/ng.core","@angular/core","@fs/ngx-admin/basic","@angular/router","@abp/ng.account","@abp/ng.theme.shared","@angular/forms","@ngxs/store","angular-oauth2-oidc","@abp/ng.account/services/account.service","@abp/ng.account/components/tenant-box/tenant-box.component"],r):r(((n=n||self).fs=n.fs||{},n.fs.account=n.fs.account||{},n.fs.account["ngx-admin"]={}),n.fs.account,n.ng_core,n.ng.core,n.basic,n.ng.router,n.ng_account,n.ng_theme_shared,n.ng.forms,n.store,n.angularOauth2Oidc,n.account_service,n.tenantBox_component)}(this,(function(n,r,t,e,a,o,i,c,l,s,u,p,d){"use strict";
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */var b=function(n,r){return(b=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,r){n.__proto__=r}||function(n,r){for(var t in r)r.hasOwnProperty(t)&&(n[t]=r[t])})(n,r)};function m(n,r){function t(){this.constructor=n}b(n,r),n.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)}var g=function(n){function r(r,t,e,a,o){return n.call(this,r,t,e,a,o)||this}return m(r,n),r.decorators=[{type:e.Component,args:[{selector:"ngx-admin-login",template:'<ngx-admin-tenant-box></ngx-admin-tenant-box>\r\n\r\n<nb-card class="mt-3 shadow-sm rounded bg-light">\r\n  <nb-card-body class="p-5">\r\n    <h1 id="title" class="title">{{ \'AbpAccount::Login\' | abpLocalization }}</h1>\r\n\r\n    <form (ngSubmit)="onSubmit()" [formGroup]="form" novalidate aria-labelledby="title">\r\n\r\n      <div class="form-control-group">\r\n        <label class="label" for="login-input-user-name-or-email-address">\r\n          {{\r\n          \'AbpAccount::UserNameOrEmailAddress\' | abpLocalization\r\n          }}\r\n        </label>\r\n        <input nbInput\r\n               fullWidth\r\n               id="login-input-user-name-or-email-address"\r\n               fieldSize="large"\r\n               placeholder="username"\r\n               formControlName="username"\r\n               autofocus>\r\n      </div>\r\n\r\n      <div class="form-control-group">\r\n        <span class="label-with-link">\r\n          <label class="label" for="login-input-password">{{ \'AbpAccount::Password\' | abpLocalization }}</label>\r\n        </span>\r\n        <input nbInput\r\n               fullWidth\r\n               formControlName="password"\r\n               type="password"\r\n               id="login-input-password"\r\n               placeholder="Password"\r\n               fieldSize="large">\r\n      </div>\r\n\r\n      <div class="form-control-group accept-group">\r\n        <nb-checkbox formControlName="remember">{{ \'AbpAccount::RememberMe\' | abpLocalization }}</nb-checkbox>\r\n      </div>\r\n\r\n      <button nbButton\r\n              fullWidth\r\n              status="primary"\r\n              size="large"\r\n              [disabled]="!form.valid">\r\n        {{ \'AbpAccount::Login\' | abpLocalization }}\r\n      </button>\r\n    </form>\r\n\r\n    \x3c!-- <section *ngIf="socialLinks && socialLinks.length > 0" class="links" aria-label="Social sign in">\r\n      or enter with:\r\n      <div class="socials">\r\n        <ng-container *ngFor="let socialLink of socialLinks">\r\n          <a *ngIf="socialLink.link"\r\n             [routerLink]="socialLink.link"\r\n             [attr.target]="socialLink.target"\r\n             [attr.class]="socialLink.icon"\r\n             [class.with-icon]="socialLink.icon">\r\n            <nb-icon *ngIf="socialLink.icon; else title" [icon]="socialLink.icon"></nb-icon>\r\n            <ng-template #title>{{ socialLink.title }}</ng-template>\r\n          </a>\r\n          <a *ngIf="socialLink.url"\r\n             [attr.href]="socialLink.url"\r\n             [attr.target]="socialLink.target"\r\n             [attr.class]="socialLink.icon"\r\n             [class.with-icon]="socialLink.icon">\r\n            <nb-icon *ngIf="socialLink.icon; else title" [icon]="socialLink.icon"></nb-icon>\r\n            <ng-template #title>{{ socialLink.title }}</ng-template>\r\n          </a>\r\n        </ng-container>\r\n      </div>\r\n    </section> --\x3e\r\n\r\n    <section class="another-action" aria-label="Register">\r\n      {{ \'AbpAccount::AreYouANewUser\' | abpLocalization }} <a class="text-link" routerLink="/account/register">{{ \'AbpAccount::Register\' | abpLocalization }}</a>\r\n    </section>\r\n  </nb-card-body>\r\n</nb-card>\r\n'}]}],r.ctorParameters=function(){return[{type:l.FormBuilder},{type:u.OAuthService},{type:s.Store},{type:c.ToasterService},{type:void 0,decorators:[{type:e.Optional},{type:e.Inject,args:["ACCOUNT_OPTIONS"]}]}]},r}(i.LoginComponent),f=function(n){function r(r,t,e,a,o){var i=n.call(this,r,t,e,a,o)||this;return i._fb=r,i._accountService=t,i._oauthService=e,i._store=a,i._toasterService=o,i}return m(r,n),r.decorators=[{type:e.Component,args:[{selector:"ngx-admin-register",template:'<ngx-admin-tenant-box></ngx-admin-tenant-box>\r\n<nb-card class="mt-3 shadow-sm rounded bg-light">\r\n  <nb-card-body class="p-5">\r\n    <h1 id="title" class="title">{{ \'AbpAccount::Register\' | abpLocalization }}</h1>\r\n\r\n    <form (ngSubmit)="onSubmit()" [formGroup]="form" novalidate aria-labelledby="title">\r\n\r\n      <div class="form-control-group">\r\n        <label class="label" for="input-user-name">\r\n          {{\r\n          \'AbpAccount::UserName\' | abpLocalization\r\n          }}\r\n        </label>\r\n        <input nbInput\r\n               formControlName="username"\r\n               id="input-user-name"\r\n               placeholder="username"\r\n               autofocus\r\n               fullWidth\r\n               fieldSize="large">\r\n      </div>\r\n\r\n      <div class="form-control-group">\r\n        <label class="label" for="input-email-address">{{ \'AbpAccount::EmailAddress\' | abpLocalization }}</label>\r\n        <input nbInput\r\n               type="email"\r\n               formControlName="email"\r\n               id="input-email-address"\r\n               placeholder="Email address"\r\n               fullWidth\r\n               fieldSize="large">\r\n      </div>\r\n\r\n      <div class="form-control-group">\r\n        <label class="label" for="input-password">{{ \'AbpAccount::Password\' | abpLocalization }}<</label>\r\n        <input nbInput\r\n               formControlName="password"\r\n               type="password"\r\n               id="input-password"\r\n               name="password"\r\n               placeholder="Password"\r\n               fullWidth\r\n               fieldSize="large">\r\n      </div>\r\n\r\n      <button nbButton\r\n              fullWidth\r\n              status="primary"\r\n              size="large"\r\n              [disabled]="!form.valid">\r\n        {{ \'AbpAccount::Register\' | abpLocalization }}\r\n      </button>\r\n    </form>\r\n\r\n    <section class="another-action" aria-label="Sign in">\r\n      {{ \'AbpAccount::AlreadyRegistered\' | abpLocalization }} <a class="text-link" routerLink="/account/login">{{ \'AbpAccount::Login\' | abpLocalization }}</a>\r\n    </section>\r\n\r\n  </nb-card-body>\r\n</nb-card>\r\n\r\n'}]}],r.ctorParameters=function(){return[{type:l.FormBuilder},{type:p.AccountService},{type:u.OAuthService},{type:s.Store},{type:c.ToasterService}]},r}(i.RegisterComponent);var h=[{path:"",pathMatch:"full",redirectTo:"login"},{path:"",component:t.DynamicLayoutComponent,children:[{path:"login",component:g},{path:"register",component:f}]}],v=function(){function n(){}return n.decorators=[{type:e.NgModule,args:[{imports:[o.RouterModule.forChild(h)],exports:[o.RouterModule]}]}],n}(),y=function(n){function r(r,t,e){var a=n.call(this,r,t,e)||this;return a._store=r,a._toasterService=t,a._accountService=e,a}return m(r,n),r.decorators=[{type:e.Component,args:[{selector:"ngx-admin-tenant-box",template:'<nb-card class="shadow-sm rounded mb-3 bg-light">\r\n  <nb-card-body class="px-5">\r\n    <div class="row">\r\n      <div class="col">\r\n        <span style="font-size: 0.8em;" class="text-uppercase text-muted">{{\r\n          \'AbpUiMultiTenancy::Tenant\' | abpLocalization\r\n        }}</span\r\n        ><br />\r\n        <h6 class="m-0 d-inline-block">\r\n          <span>\r\n            {{ tenantName || (\'AbpUiMultiTenancy::NotSelected\' | abpLocalization) }}\r\n          </span>\r\n        </h6>\r\n      </div>\r\n      <div class="col-auto">\r\n        <a\r\n          id="AbpTenantSwitchLink"\r\n          href="javascript:void(0);"\r\n          class="btn btn-sm mt-3 btn-outline-primary"\r\n          (click)="onSwitch()"\r\n          >{{ \'AbpUiMultiTenancy::Switch\' | abpLocalization }}</a\r\n        >\r\n      </div>\r\n    </div>\r\n  </nb-card-body>\r\n</nb-card>\r\n\r\n<abp-modal [(visible)]="isModalVisible" size="md">\r\n  <ng-template #abpHeader>\r\n    <h5>Switch Tenant</h5>\r\n  </ng-template>\r\n  <ng-template #abpBody>\r\n    <form (ngSubmit)="save()">\r\n      <div class="mt-2">\r\n        <div class="form-group">\r\n          <label for="name">{{ \'AbpUiMultiTenancy::Name\' | abpLocalization }}</label>\r\n          <input [(ngModel)]="tenant.name" type="text" id="name" name="tenant" class="form-control" autofocus />\r\n        </div>\r\n        <p>{{ \'AbpUiMultiTenancy::SwitchTenantHint\' | abpLocalization }}</p>\r\n      </div>\r\n    </form>\r\n  </ng-template>\r\n  <ng-template #abpFooter>\r\n    <button #abpClose type="button" class="btn btn-secondary">\r\n      {{ \'AbpTenantManagement::Cancel\' | abpLocalization }}\r\n    </button>\r\n    <button type="button" class="btn btn-primary" (click)="save()">\r\n      <i class="fa fa-check mr-1"></i> <span>{{ \'AbpTenantManagement::Save\' | abpLocalization }}</span>\r\n    </button>\r\n  </ng-template>\r\n</abp-modal>\r\n'}]}],r.ctorParameters=function(){return[{type:s.Store},{type:c.ToasterService},{type:p.AccountService}]},r}(d.TenantBoxComponent);var A=function(){function n(){}return n.decorators=[{type:e.NgModule,args:[{declarations:[g,f,y],imports:[t.CoreModule,a.NgxAdminBasicModule,v,r.AccountModule]}]}],n}();n.AccountNgxAdminModule=A,n.ɵa=g,n.ɵb=f,n.ɵc=y,n.ɵd=v,Object.defineProperty(n,"__esModule",{value:!0})}));
//# sourceMappingURL=fs-account-ngx-admin.umd.min.js.map