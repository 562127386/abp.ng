!function(n,r){"object"==typeof exports&&"undefined"!=typeof module?r(exports,require("@fs/account"),require("@abp/ng.core"),require("@angular/core"),require("@fs/ngx-admin/basic"),require("@angular/forms"),require("@abp/ng.account"),require("angular-oauth2-oidc"),require("@ngxs/store"),require("@abp/ng.theme.shared")):"function"==typeof define&&define.amd?define("@fs/account/ngx-admin",["exports","@fs/account","@abp/ng.core","@angular/core","@fs/ngx-admin/basic","@angular/forms","@abp/ng.account","angular-oauth2-oidc","@ngxs/store","@abp/ng.theme.shared"],r):r(((n=n||self).fs=n.fs||{},n.fs.account=n.fs.account||{},n.fs.account["ngx-admin"]={}),n.fs.account,n.ng_core,n.ng.core,n.basic,n.ng.forms,n.ng_account,n.angularOauth2Oidc,n.store,n.ng_theme_shared)}(this,(function(n,r,e,t,a,o,i,c,l,s){"use strict";
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */var u=function(n,r){return(u=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,r){n.__proto__=r}||function(n,r){for(var e in r)r.hasOwnProperty(e)&&(n[e]=r[e])})(n,r)};function p(n,r){function e(){this.constructor=n}u(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}var d=function(n){function r(r,e,t,a,o,i){var c=n.call(this,r,e,t,a,o,i)||this;return c._fb=r,c._accountService=e,c._oauthService=t,c._store=a,c._toasterService=o,c._authService=i,c}return p(r,n),r.decorators=[{type:t.Component,args:[{selector:"ngx-admin-register",template:'<ngx-admin-tenant-box></ngx-admin-tenant-box>\r\n<nb-card class="mt-3 shadow-sm rounded bg-light">\r\n  <nb-card-body class="p-5">\r\n    <h1 id="title" class="title">{{ \'AbpAccount::Register\' | abpLocalization }}</h1>\r\n\r\n    <form (ngSubmit)="onSubmit()" [formGroup]="form" novalidate aria-labelledby="title">\r\n\r\n      <div class="form-control-group">\r\n        <label class="label" for="input-user-name">\r\n          {{\r\n          \'AbpAccount::UserName\' | abpLocalization\r\n          }}\r\n        </label>\r\n        <input nbInput\r\n               formControlName="username"\r\n               id="input-user-name"\r\n               placeholder="username"\r\n               autofocus\r\n               fullWidth\r\n               fieldSize="large">\r\n      </div>\r\n\r\n      <div class="form-control-group">\r\n        <label class="label" for="input-email-address">{{ \'AbpAccount::EmailAddress\' | abpLocalization }}</label>\r\n        <input nbInput\r\n               type="email"\r\n               formControlName="email"\r\n               id="input-email-address"\r\n               placeholder="Email address"\r\n               fullWidth\r\n               fieldSize="large">\r\n      </div>\r\n\r\n      <div class="form-control-group">\r\n        <label class="label" for="input-password">{{ \'AbpAccount::Password\' | abpLocalization }}<</label>\r\n        <input nbInput\r\n               formControlName="password"\r\n               type="password"\r\n               id="input-password"\r\n               name="password"\r\n               placeholder="Password"\r\n               fullWidth\r\n               fieldSize="large">\r\n      </div>\r\n\r\n      <button nbButton\r\n              fullWidth\r\n              status="primary"\r\n              size="large"\r\n              [disabled]="!form.valid">\r\n        {{ \'AbpAccount::Register\' | abpLocalization }}\r\n      </button>\r\n    </form>\r\n\r\n    <section class="another-action" aria-label="Sign in">\r\n      {{ \'AbpAccount::AlreadyRegistered\' | abpLocalization }} <a class="text-link" routerLink="/account/login">{{ \'AbpAccount::Login\' | abpLocalization }}</a>\r\n    </section>\r\n\r\n  </nb-card-body>\r\n</nb-card>\r\n\r\n'}]}],r.ctorParameters=function(){return[{type:o.FormBuilder},{type:i.AccountService},{type:c.OAuthService},{type:l.Store},{type:s.ToasterService},{type:e.AuthService}]},r}(i.RegisterComponent);var b=function(n){function r(r,e,t,a,o){return n.call(this,r,e,t,a,o)||this}return p(r,n),r.decorators=[{type:t.Component,args:[{selector:"ngx-admin-login",template:'<ngx-admin-tenant-box></ngx-admin-tenant-box>\r\n\r\n<nb-card class="mt-3 shadow-sm rounded bg-light">\r\n  <nb-card-body class="p-5">\r\n    <h1 id="title" class="title">{{ \'AbpAccount::Login\' | abpLocalization }}</h1>\r\n\r\n    <form (ngSubmit)="onSubmit()" [formGroup]="form" novalidate aria-labelledby="title">\r\n\r\n      <div class="form-control-group">\r\n        <label class="label" for="login-input-user-name-or-email-address">\r\n          {{\r\n          \'AbpAccount::UserNameOrEmailAddress\' | abpLocalization\r\n          }}\r\n        </label>\r\n        <input nbInput\r\n               fullWidth\r\n               id="login-input-user-name-or-email-address"\r\n               fieldSize="large"\r\n               placeholder="username"\r\n               formControlName="username"\r\n               autofocus>\r\n      </div>\r\n\r\n      <div class="form-control-group">\r\n        <span class="label-with-link">\r\n          <label class="label" for="login-input-password">{{ \'AbpAccount::Password\' | abpLocalization }}</label>\r\n        </span>\r\n        <input nbInput\r\n               fullWidth\r\n               formControlName="password"\r\n               type="password"\r\n               id="login-input-password"\r\n               placeholder="Password"\r\n               fieldSize="large">\r\n      </div>\r\n\r\n      <div class="form-control-group accept-group">\r\n        <nb-checkbox formControlName="remember">{{ \'AbpAccount::RememberMe\' | abpLocalization }}</nb-checkbox>\r\n      </div>\r\n\r\n      <button nbButton\r\n              fullWidth\r\n              status="primary"\r\n              size="large"\r\n              [disabled]="!form.valid">\r\n        {{ \'AbpAccount::Login\' | abpLocalization }}\r\n      </button>\r\n    </form>\r\n\r\n    \x3c!-- <section *ngIf="socialLinks && socialLinks.length > 0" class="links" aria-label="Social sign in">\r\n      or enter with:\r\n      <div class="socials">\r\n        <ng-container *ngFor="let socialLink of socialLinks">\r\n          <a *ngIf="socialLink.link"\r\n             [routerLink]="socialLink.link"\r\n             [attr.target]="socialLink.target"\r\n             [attr.class]="socialLink.icon"\r\n             [class.with-icon]="socialLink.icon">\r\n            <nb-icon *ngIf="socialLink.icon; else title" [icon]="socialLink.icon"></nb-icon>\r\n            <ng-template #title>{{ socialLink.title }}</ng-template>\r\n          </a>\r\n          <a *ngIf="socialLink.url"\r\n             [attr.href]="socialLink.url"\r\n             [attr.target]="socialLink.target"\r\n             [attr.class]="socialLink.icon"\r\n             [class.with-icon]="socialLink.icon">\r\n            <nb-icon *ngIf="socialLink.icon; else title" [icon]="socialLink.icon"></nb-icon>\r\n            <ng-template #title>{{ socialLink.title }}</ng-template>\r\n          </a>\r\n        </ng-container>\r\n      </div>\r\n    </section> --\x3e\r\n\r\n    <section class="another-action" aria-label="Register">\r\n      {{ \'AbpAccount::AreYouANewUser\' | abpLocalization }} <a class="text-link" routerLink="/account/register">{{ \'AbpAccount::Register\' | abpLocalization }}</a>\r\n    </section>\r\n  </nb-card-body>\r\n</nb-card>\r\n'}]}],r.ctorParameters=function(){return[{type:o.FormBuilder},{type:c.OAuthService},{type:l.Store},{type:s.ToasterService},{type:e.AuthService}]},r}(i.LoginComponent),m=function(n){function r(r,e,t){var a=n.call(this,r,e,t)||this;return a._store=r,a._toasterService=e,a._accountService=t,a}return p(r,n),r.decorators=[{type:t.Component,args:[{selector:"ngx-admin-tenant-box",template:'<nb-card class="shadow-sm rounded mb-3 bg-light" *ngIf="(currentTenant$ | async) || {} as currentTenant">\r\n  <nb-card-body class="px-5">\r\n    <div class="row">\r\n      <div class="col">\r\n        <span style="font-size: 0.8em;" class="text-uppercase text-muted">{{\r\n          \'AbpUiMultiTenancy::Tenant\' | abpLocalization\r\n        }}</span\r\n        ><br />\r\n        <h6 class="m-0 d-inline-block">\r\n          <span>\r\n            {{ currentTenant.name || (\'AbpUiMultiTenancy::NotSelected\' | abpLocalization) }}\r\n          </span>\r\n        </h6>\r\n      </div>\r\n      <div class="col-auto">\r\n        <a\r\n          id="AbpTenantSwitchLink"\r\n          href="javascript:void(0);"\r\n          class="btn btn-sm mt-3 btn-outline-primary"\r\n          (click)="onSwitch()"\r\n          >{{ \'AbpUiMultiTenancy::Switch\' | abpLocalization }}</a\r\n        >\r\n      </div>\r\n    </div>\r\n  </nb-card-body>\r\n</nb-card>\r\n\r\n<abp-modal [(visible)]="isModalVisible" size="md">\r\n  <ng-template #abpHeader>\r\n    <h5>Switch Tenant</h5>\r\n  </ng-template>\r\n  <ng-template #abpBody>\r\n    <form (ngSubmit)="save()">\r\n      <div class="mt-2">\r\n        <div class="form-group">\r\n          <label for="name">{{ \'AbpUiMultiTenancy::Name\' | abpLocalization }}</label>\r\n          <input [(ngModel)]="name" type="text" id="name" name="tenant" class="form-control" autofocus />\r\n        </div>\r\n        <p>{{ \'AbpUiMultiTenancy::SwitchTenantHint\' | abpLocalization }}</p>\r\n      </div>\r\n    </form>\r\n  </ng-template>\r\n  <ng-template #abpFooter>\r\n    <button #abpClose type="button" class="btn btn-secondary">\r\n      {{ \'AbpTenantManagement::Cancel\' | abpLocalization }}\r\n    </button>\r\n    <button type="button" class="btn btn-primary" (click)="save()">\r\n      <i class="fa fa-check mr-1"></i> <span>{{ \'AbpTenantManagement::Save\' | abpLocalization }}</span>\r\n    </button>\r\n  </ng-template>\r\n</abp-modal>\r\n'}]}],r.ctorParameters=function(){return[{type:l.Store},{type:s.ToasterService},{type:i.AccountService}]},r}(i.TenantBoxComponent);var g=function(){function n(n){this.store=n,n.dispatch(new e.PatchRouteByName("AbpAccount::Menu:Account",{layout:"account"})),n.dispatch(new e.PatchRouteByName("AbpAccount::ManageYourProfile",{layout:"application"})),n.dispatch(new e.AddReplaceableComponent({component:b,key:"Account.LoginComponent"})),n.dispatch(new e.AddReplaceableComponent({component:d,key:"Account.RegisterComponent"}))}return n.decorators=[{type:t.NgModule,args:[{declarations:[b,d,m],entryComponents:[b,d],imports:[e.CoreModule,a.NgxAdminBasicModule,r.AccountModule]}]}],n.ctorParameters=function(){return[{type:l.Store}]},n}();n.AccountNgxAdminModule=g,n.ɵa=b,n.ɵb=d,n.ɵc=m,Object.defineProperty(n,"__esModule",{value:!0})}));
//# sourceMappingURL=fs-account-ngx-admin.umd.min.js.map